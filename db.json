{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.png","path":"uploads/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/wechatpay.png","path":"uploads/wechatpay.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/alipay.png","path":"uploads/alipay.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1509161902663},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1509161903548},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1509161903554},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1509161903555},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1509161903571},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1509161903571},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1509161903572},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1509161903572},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1509161903573},{"_id":"themes/next/.travis.yml","hash":"1a69a0b3ae010b10080069332829205573c64371","modified":1509161903573},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1509161903574},{"_id":"themes/next/README.md","hash":"0876b7c79aea2a15f35d467a1fb2b98a8a16d447","modified":1509161903575},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1509161903575},{"_id":"themes/next/_config.yml","hash":"c25cad9ca43462f32973ee39886a71b0ec95b3ed","modified":1509161903575},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1509161903576},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1509161903576},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1509161903617},{"_id":"source/_posts/Mac生成SSHKey.md","hash":"9a63d6a9953d01ac5489c2450c55ebe4f171bab6","modified":1509165792738},{"_id":"source/_posts/Mac使用oh-my-zsh和iTerm2.md","hash":"8a71885432015e3fbb06bb5134e24f5c17a8fa6c","modified":1509174683196},{"_id":"source/_posts/ReactNative入门（2）.md","hash":"a71f02c97fb38d6f9d289b1b7dd676963c193592","modified":1509161902669},{"_id":"source/_posts/ReactNative入门（1）.md","hash":"1c5f210d54f281bdab51f1af602232297ef571f3","modified":1509161902665},{"_id":"source/_posts/ReactNative入门（3）.md","hash":"defa3821102e1595934a77eef7947a00d2c52e3e","modified":1509161902670},{"_id":"source/_posts/hello-world.md","hash":"b62d5c99eab5519dcc9c7b8025693099ef604fe2","modified":1509164162673},{"_id":"source/_posts/fastlane+jenkins实现iOS持续集成.md","hash":"4fa3cf061b76cd4838c63bb17b667094b5d2b76d","modified":1509161902671},{"_id":"source/_posts/iOS9下Safari和app间cookie互通.md","hash":"ad4ef6cb34785fee6f5bb583215a6f653182e2de","modified":1509161902682},{"_id":"source/_posts/iOS-AppIcon添加打包标识.md","hash":"96531a1c1d1066f218a1c543ca96bc373c230ede","modified":1509161902676},{"_id":"source/_posts/使用CocoaPods创建私有Spec-Repo管理项目公共组件.md","hash":"063d6d2c68c6ff06198c20dd70abd058994da871","modified":1509161902683},{"_id":"source/_posts/几种排序算法.md","hash":"79e9883b7f2de4409e852b01e094436f8dd3ed09","modified":1509161902683},{"_id":"source/_posts/成都游记.md","hash":"e53ab9a5d61a096b86d829a16c77ed89e6ae86d9","modified":1509161902684},{"_id":"source/_posts/港珠澳之行.md","hash":"84d48924de92fe387d9b03ab0da14e53110d0036","modified":1509161903108},{"_id":"source/_posts/首尔之行.md","hash":"8c6db1eb4a2f6f36f3438ddeea35ef59cc55b13b","modified":1509161903325},{"_id":"source/all-archives/index.md","hash":"b7083556810624be9ea601e4265c19cc602315ff","modified":1509161903546},{"_id":"source/all-tags/index.md","hash":"b957310f55e7334c18295a6a7a36cec4162fac27","modified":1509161903546},{"_id":"source/about/index.md","hash":"fb2b49e3ac64cac4f8532eff5595451acb94dc15","modified":1509161903524},{"_id":"source/all-categories/index.md","hash":"349c5dd8807d6514558aaf352ec3d4b72bcd1ed1","modified":1509161903546},{"_id":"source/tags/index.md","hash":"e79d2772748e0ecb24d780dd75a4b55efbe050d6","modified":1509161903547},{"_id":"source/categories/index.md","hash":"7b40433d717e963533aaefbb7181d70a9a7da194","modified":1509161903547},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1509161903568},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"e039a409bdbd2e38d77936556e3b7b080cc1fd7e","modified":1509161903569},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"e9169b65a7e3392c27562f9e11061a3ab76bb600","modified":1509161903570},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1509161903570},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1509161903618},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1509161903618},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1509161903890},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1509161903889},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1509161903890},{"_id":"themes/next/layout/_layout.swig","hash":"e3c40f48ffbe19e7a2a54e72c8bb273630c37633","modified":1509161903582},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1509161903612},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1509161903613},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1509161903613},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1509161903614},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1509161903614},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1509161903615},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1509161903616},{"_id":"themes/next/source/favicon.png","hash":"03136b4808aebd9768ecca6da5d9ab06f7e077fe","modified":1509161903694},{"_id":"themes/next/languages/en.yml","hash":"c0b90d66772e79585cd26a81694ad69c16312d6b","modified":1509161903577},{"_id":"themes/next/languages/de.yml","hash":"98aa551443b2a61a74b6f2a218635da6d2f6cf57","modified":1509161903576},{"_id":"themes/next/languages/default.yml","hash":"c0b90d66772e79585cd26a81694ad69c16312d6b","modified":1509161903577},{"_id":"themes/next/languages/fr-FR.yml","hash":"a14d051bbec26cfcae358bdcf1acf62a35fb1a45","modified":1509161903577},{"_id":"themes/next/languages/id.yml","hash":"f8b57daac2e50ace9a6d5051b17208af8139c2ae","modified":1509161903579},{"_id":"themes/next/languages/ja.yml","hash":"0c99ba4ba7d36c43d002342611d2c656ef498582","modified":1509161903579},{"_id":"themes/next/languages/pt.yml","hash":"dfd0b8574177346b78cab29db055fbc44ac309dc","modified":1509161903581},{"_id":"themes/next/languages/pt-BR.yml","hash":"91584764104ef29293117375fc010b1bdbe9aff6","modified":1509161903580},{"_id":"themes/next/languages/ko.yml","hash":"043951e82997131dd8be40ff2093ef36849ba725","modified":1509161903580},{"_id":"themes/next/languages/ru.yml","hash":"98dd9b6ddd88400a7b02cd7e8adb41e7b842bf57","modified":1509161903581},{"_id":"themes/next/languages/zh-Hans.yml","hash":"c1255b722fc5fdecf1852c3b592edfea9dbb554c","modified":1509161903581},{"_id":"themes/next/languages/zh-hk.yml","hash":"e8072846fd43beadbae394e30a49aa5c92a0a53b","modified":1509161903581},{"_id":"themes/next/languages/zh-tw.yml","hash":"562141bfe450432131af012baa262a3de79a50bc","modified":1509161903581},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509161903695},{"_id":"source/_posts/Mac使用oh-my-zsh和iTerm2/oh-my-zsh.png","hash":"d796db71f6bacd2d1cd0a9fb63ab968f7f71463c","modified":1509166932465},{"_id":"source/_posts/Mac使用oh-my-zsh和iTerm2/iterm2.png","hash":"503ba14dfe0420ee40b4031c41e551b7d38bb453","modified":1509172959960},{"_id":"source/_posts/fastlane+jenkins实现iOS持续集成/fastlane-logo.png","hash":"b5f5de819834c0aae317f3cf3c920c73d98aa5b2","modified":1509161902674},{"_id":"source/_posts/iOS-AppIcon添加打包标识/buildPhases_Shell.png","hash":"0d366ce0c53429e95586babd1a2a3a5f3a7c4d18","modified":1509161902677},{"_id":"source/_posts/iOS-AppIcon添加打包标识/infoPlist_Icon1.png","hash":"4da9ba0eb29f97a8b5c41b254e6013dacd3fcf3e","modified":1509161902678},{"_id":"source/_posts/iOS-AppIcon添加打包标识/infoPlist_Icon2.png","hash":"dffb32d9b1eef1edd89c837a6dcdd0731c0256e7","modified":1509161902681},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1509161903621},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1509161903622},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1509161903622},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1509161903623},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1509161903623},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1509161903624},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1509161903625},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1509161903626},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1509161903625},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1509161903591},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1509161903582},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1509161903590},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1509161903582},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1509161903594},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1509161903606},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1509161903606},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1509161903606},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1509161903607},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1509161903583},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1509161903607},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1509161903608},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1509161903583},{"_id":"themes/next/layout/_macro/reward.swig","hash":"61005298d682ce32819dcd0d237a1e272d5118a0","modified":1509161903584},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1509161903584},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1509161903584},{"_id":"themes/next/layout/_macro/post.swig","hash":"767e1d5503ecce85f577c8fb673a3503b65484ce","modified":1509161903583},{"_id":"themes/next/layout/_partials/footer.swig","hash":"3e71627f4397b10f3b5259e4afa852d49e55704b","modified":1509161903585},{"_id":"themes/next/layout/_partials/comments.swig","hash":"010ef8c42d2e1a95abc60caf757293ca8eb4a68b","modified":1509161903585},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1509161903587},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1509161903586},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1509161903587},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1509161903587},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1509161903588},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1509161903693},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1509161903697},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1509161903696},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1509161903697},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1509161903698},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1509161903698},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1509161903699},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1509161903700},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1509161903703},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1509161903704},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1509161903702},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1509161903704},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1509161903704},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1509161903704},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1509161903705},{"_id":"themes/next/source/uploads/avatar.png","hash":"03136b4808aebd9768ecca6da5d9ab06f7e077fe","modified":1509161903886},{"_id":"themes/next/source/uploads/wechatpay.png","hash":"768020c7cbca40b6111a6c0c7c4ee8c37f094590","modified":1509161903889},{"_id":"source/_posts/ReactNative入门（1）/component-lifecycle.jpg","hash":"4da0e553905cc8533d322d3c8781e621bd278613","modified":1509161902666},{"_id":"source/_posts/fastlane+jenkins实现iOS持续集成/fastlane-intro-tree.png","hash":"5af03a4b738e9f838d521c2336b932074365119b","modified":1509161902673},{"_id":"source/_posts/首尔之行/16.2.jpg","hash":"76d40a4763f0caf37780aa72d4deb506df18fba4","modified":1509161903388},{"_id":"source/_posts/首尔之行/3.1.jpg","hash":"d71de83bcef6c8403b43314d906667e992a86f10","modified":1509161903433},{"_id":"source/_posts/首尔之行/5.1.JPG","hash":"2120fc32be8b350d7c6be18e6a623f05a9649524","modified":1509161903440},{"_id":"source/_posts/首尔之行/7.3.jpg","hash":"62c87a3dbfebf7c48a16dde0a1dfcbdfe375341f","modified":1509161903459},{"_id":"source/_posts/首尔之行/7.2.jpg","hash":"8ab23838584a8e76b5caaaac29bbaa2e4612b0a5","modified":1509161903458},{"_id":"source/_posts/首尔之行/8.6.JPG","hash":"c411c5daaba7e96b971487d0651f84539e232acf","modified":1509161903490},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509161903592},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509161903593},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509161903692},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509161903693},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509161903671},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509161903671},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1509161903675},{"_id":"themes/next/source/uploads/alipay.png","hash":"4d99a7b938513d56d6e814e72610e5ce96496859","modified":1509161903885},{"_id":"source/_posts/首尔之行/2.JPG","hash":"6a83704e7602259bf2b71967aaac952d891041c5","modified":1509161903432},{"_id":"source/_posts/首尔之行/3.2.JPG","hash":"09d8b8b3c5a33aa42e678b022533eb19d8cd7867","modified":1509161903434},{"_id":"source/_posts/首尔之行/4.JPG","hash":"d6da1ac6e22287157d65fe3efbdf90c74a82edf6","modified":1509161903439},{"_id":"source/_posts/首尔之行/9.6.JPG","hash":"8e3a551fbbc0f13aa42770ade02738de83d5f2a9","modified":1509161903518},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1509161903592},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1509161903592},{"_id":"source/_posts/首尔之行/9.7.JPG","hash":"3b551260498d0d0e6e76ac16d8ce5c5155f0d18f","modified":1509161903520},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1509161903594},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1509161903595},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1509161903595},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1509161903595},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1509161903597},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1509161903596},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1509161903596},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1509161903597},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1509161903597},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1509161903598},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1509161903598},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1509161903599},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1509161903599},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1509161903599},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1509161903600},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1509161903601},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1509161903601},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"576e716893153a855eaf6d136fad7cb6d4065e09","modified":1509161903603},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1509161903604},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1509161903605},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"9f4ed36c73e890909b8ebbe601fb60e13d048288","modified":1509161903605},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1509161903611},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1509161903610},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1509161903612},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1509161903610},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1509161903586},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1509161903586},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1509161903588},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1509161903588},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1509161903588},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1509161903589},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1509161903589},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1509161903589},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"fd65b0d38d4a8b8306de815c48caad20b84ba4cb","modified":1509161903590},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"6359c84aaa02c90be60b22abe638b737ddd69c9c","modified":1509161903691},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1509161903692},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1509161903693},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1509161903668},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1509161903670},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1509161903693},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1509161903673},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1509161903672},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1509161903706},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1509161903706},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1509161903706},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1509161903707},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1509161903707},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1509161903708},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1509161903707},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1509161903707},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1509161903709},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1509161903710},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1509161903711},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1509161903722},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1509161903726},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1509161903725},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1509161903846},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1509161903843},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1509161903847},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1509161903847},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1509161903847},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1509161903849},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1509161903850},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1509161903850},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1509161903851},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1509161903851},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1509161903852},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1509161903852},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1509161903852},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1509161903853},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1509161903853},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1509161903854},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1509161903854},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1509161903854},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1509161903855},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1509161903848},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1509161903856},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1509161903855},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1509161903856},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1509161903857},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1509161903861},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1509161903864},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1509161903866},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1509161903734},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1509161903884},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1509161903883},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1509161903734},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1509161903734},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1509161903834},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1509161903816},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1509161903835},{"_id":"themes/next/source/uploads/wechat-qcode.jpg","hash":"dfd4e5c400c088a933783d2e95c6535e1b2d5194","modified":1509161903888},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1509161903836},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1509161903836},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1509161903835},{"_id":"source/_posts/港珠澳之行/1.2.JPG","hash":"47b0e8dcc8b29a54ffced3f1577c30bc83412d41","modified":1509161903115},{"_id":"source/_posts/港珠澳之行/1.3.JPG","hash":"3cf5e1a3954da5391e8f9a6bad29ad65b7e7ce30","modified":1509161903116},{"_id":"source/_posts/港珠澳之行/2.5.JPG","hash":"834a90dd956d2f834bbdff5ac9ff5ca29c705c64","modified":1509161903129},{"_id":"source/_posts/港珠澳之行/3.2.JPG","hash":"f34242056680a49a7d1478189d2ff24a8fd7ec17","modified":1509161903133},{"_id":"source/_posts/首尔之行/13.jpg","hash":"72dcba3dbf98c6cae330a85172e8d43b2ff61a94","modified":1509161903375},{"_id":"source/_posts/首尔之行/16.3.jpg","hash":"b5b18ce556b1b3d87fb516f41ba0ce736c9085d4","modified":1509161903388},{"_id":"source/_posts/首尔之行/5.2.JPG","hash":"1b9656a59a26226a34123b923b862813402fead6","modified":1509161903442},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1509161903844},{"_id":"source/_posts/首尔之行/16.1.jpg","hash":"83940df1ec00e85fcfe97203ed3c7026e16f491a","modified":1509161903387},{"_id":"source/_posts/首尔之行/7.1.JPG","hash":"36f63a413201f89a15c4be860eb86631dbf26c11","modified":1509161903457},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1509161903609},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1509161903609},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1509161903627},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1509161903628},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1509161903629},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1509161903629},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1509161903630},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1509161903641},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1509161903656},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1509161903662},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"a9c6355d6516af2e13254ec89e33e5b7dcf8ceb4","modified":1509161903662},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1509161903663},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1509161903663},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1509161903664},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1509161903667},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"f2030fa436c47791d1a42358cc0ef6f9809f212c","modified":1509161903661},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1509161903676},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1509161903677},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1509161903678},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1509161903678},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1509161903678},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1509161903679},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1509161903679},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1509161903685},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1509161903686},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1509161903681},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1509161903686},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1509161903687},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1509161903687},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1509161903688},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"0af5a9322156c4c21d3c7d38f5ee48de5286f523","modified":1509161903689},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1509161903690},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1509161903690},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1509161903691},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"f00d0a9ff02f6814011e0b613a2d9020911b5c58","modified":1509161903690},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1509161903708},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1509161903715},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1509161903721},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1509161903727},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1509161903721},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1509161903727},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1509161903728},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1509161903728},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1509161903728},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1509161903728},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1509161903733},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1509161903733},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1509161903733},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1509161903860},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1509161903861},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1509161903832},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1509161903833},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1509161903837},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1509161903837},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1509161903838},{"_id":"source/_posts/港珠澳之行/2.2.JPG","hash":"1011e12a003ffeff7f196633e2324f9fc719b290","modified":1509161903122},{"_id":"source/_posts/首尔之行/5.3.JPG","hash":"6bea3300136e755013fb3c20aefdcae4fff39613","modified":1509161903444},{"_id":"source/_posts/首尔之行/5.4.JPG","hash":"9563cc21b066ad31e53fb06f1229d6cc45f4f42d","modified":1509161903446},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1509161903865},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1509161903717},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1509161903843},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1509161903842},{"_id":"source/_posts/港珠澳之行/2.1.JPG","hash":"f94bf4a801b2e726c0d80bac6c3e800bb6db2f1c","modified":1509161903119},{"_id":"source/_posts/港珠澳之行/5.4.JPG","hash":"79b6a555b7559227e8d09f188c2524d878478e5c","modified":1509161903296},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1509161903631},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1509161903636},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1509161903636},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1509161903636},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1509161903632},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1509161903633},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1509161903633},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1509161903635},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1509161903634},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1509161903638},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1509161903639},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1509161903638},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1509161903640},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1509161903640},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1509161903652},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1509161903651},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1509161903652},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1509161903652},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1509161903653},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1509161903654},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1509161903654},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1509161903655},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1509161903656},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1509161903642},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1509161903656},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1509161903643},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1509161903643},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1509161903644},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1509161903644},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1509161903646},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1509161903645},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1509161903646},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1509161903647},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1509161903647},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1509161903648},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1509161903648},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1509161903649},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1509161903649},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1509161903657},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"e6680feea343cecbdde8d643c777d689742abc28","modified":1509161903650},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1509161903657},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1509161903657},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1509161903658},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1509161903658},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1509161903658},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1509161903658},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1509161903659},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1509161903659},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1509161903659},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1509161903659},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1509161903659},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1509161903660},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1509161903660},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1509161903660},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1509161903661},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1509161903661},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1509161903683},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1509161903684},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1509161903688},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1509161903713},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1509161903713},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1509161903714},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1509161903714},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1509161903729},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1509161903729},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1509161903729},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1509161903731},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1509161903729},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1509161903732},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1509161903838},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1509161903840},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1509161903841},{"_id":"source/_posts/首尔之行/5.5.JPG","hash":"8e893eb8cd45e8e45cd69a44676bdcb11ca9174b","modified":1509161903449},{"_id":"source/_posts/港珠澳之行/2.3.JPG","hash":"73ebcff06bf59d650b2667c014371827aa0a3def","modified":1509161903125},{"_id":"source/_posts/港珠澳之行/5.5.JPG","hash":"167f9416aa64b88382e076472e7e760c5ceda178","modified":1509161903298},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1509161903725},{"_id":"source/_posts/港珠澳之行/5.6.JPG","hash":"e069cc6bba71999e84fb1ff6d3e1d1b64cad102a","modified":1509161903300},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1509161903860},{"_id":"source/_posts/港珠澳之行/3.1.JPG","hash":"f953fbbaf8ebb9a9893adf2e1929e1b6bad2c855","modified":1509161903132},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1509161903841},{"_id":"source/_posts/港珠澳之行/2.4.JPG","hash":"a8a141df0b8f0adbdc3dad9629d0fe7dad805438","modified":1509161903128},{"_id":"source/_posts/成都游记/1.1.JPG","hash":"ffac08185754dbcbdaef7f6adc8be6e877f5e341","modified":1509161902689},{"_id":"source/_posts/成都游记/4.4.JPG","hash":"9c23ab5f0ba52badb96982b1ecb113b5a70a0371","modified":1509161902939},{"_id":"source/_posts/首尔之行/10.2.jpg","hash":"95221d651928eafc665016c4e83edaf4f2961bc5","modified":1509161903356},{"_id":"source/_posts/首尔之行/10.1.JPG","hash":"97da9cefe6a158f9a2b700de92bdafb7e9600a84","modified":1509161903353},{"_id":"source/_posts/港珠澳之行/6.1.JPG","hash":"47520f2a43596bd5f1a5077b198e37faa27136b8","modified":1509161903311},{"_id":"source/_posts/首尔之行/17.2.JPG","hash":"9df1da2fcd8adc79355e1a1cb387d58848cea659","modified":1509161903410},{"_id":"source/_posts/首尔之行/17.1.JPG","hash":"72539a58922b7a668da0ba7e34b2a5f4449cd0c1","modified":1509161903396},{"_id":"source/_posts/成都游记/2.4.JPG","hash":"6641bb61435fa7ab38c531a824fd404ae853fa15","modified":1509161902743},{"_id":"source/_posts/首尔之行/12.JPG","hash":"45dd9bcd517e4bdb74ebafeecfc7cc787db115be","modified":1509161903373},{"_id":"source/_posts/首尔之行/17.3.JPG","hash":"2fcc15854ebdfef7c6fbe90fbbc29468d300fbf5","modified":1509161903431},{"_id":"source/_posts/成都游记/2.5.JPG","hash":"eebc3ef2e882e94b1221aa721bbe8a74eba3bd01","modified":1509161902747},{"_id":"source/_posts/成都游记/1.2.JPG","hash":"7f447ef9b3c608385fdf97e4d9b035e20a960781","modified":1509161902703},{"_id":"source/_posts/港珠澳之行/1.1.JPG","hash":"be3057ac9a5842d1b277adfefbceadf4a09f5a5d","modified":1509161903113},{"_id":"source/_posts/成都游记/4.1.JPG","hash":"ef2d3088f3389ee3215ec1dcce170607c8c5f684","modified":1509161902911},{"_id":"source/_posts/首尔之行/9.8.JPG","hash":"8b932ef4e9186943b1d4476cf3f60fb759cd6342","modified":1509161903523},{"_id":"source/_posts/港珠澳之行/5.3.JPG","hash":"4a53c991fb36d7303be8e26dc60aa46cd0b3de9d","modified":1509161903294},{"_id":"source/_posts/首尔之行/11.JPG","hash":"9779805c971996ba4e27c67f746ddfdb8943b047","modified":1509161903360},{"_id":"source/_posts/成都游记/4.3.JPG","hash":"e39e024dce6eef102780b1a51fbfea47e1d6da2d","modified":1509161902928},{"_id":"source/_posts/首尔之行/9.3.JPG","hash":"ea38f46cc69f45ef78f3eaa0734796a28087661c","modified":1509161903506},{"_id":"source/_posts/成都游记/3.6.JPG","hash":"425250a83a6254cd8707fbad417ee74e5e59e8ca","modified":1509161902903},{"_id":"source/_posts/成都游记/4.5.JPG","hash":"f2374c7b4e4c1ae5daaa2414ec75a517ce0546aa","modified":1509161902948},{"_id":"source/_posts/首尔之行/15.JPG","hash":"aa0c8aca779bae51080b64f5f76b1a9045365cfa","modified":1509161903385},{"_id":"source/_posts/成都游记/2.6.JPG","hash":"61f9699a6ea574aafd51e854f04e2037afd60b83","modified":1509161902759},{"_id":"source/_posts/成都游记/4.2.JPG","hash":"709f550920b311947579989dffef8fad5c17e9d3","modified":1509161902918},{"_id":"source/_posts/港珠澳之行/5.7.JPG","hash":"fffbfe4de455f471a0d1fe4a93be6c7994d7107c","modified":1509161903306},{"_id":"source/_posts/首尔之行/8.3.JPG","hash":"bddd0cf6ee8866ce745a983bc7d646965013abd5","modified":1509161903474},{"_id":"source/_posts/成都游记/3.1.JPG","hash":"2323ccbf5c2bd09f283b569cc5192040b6b95e88","modified":1509161902811},{"_id":"source/_posts/首尔之行/9.2.JPG","hash":"28c805ee13db7fb4bb95fe29e65eb41ca80b7e35","modified":1509161903501},{"_id":"source/_posts/首尔之行/8.1.JPG","hash":"e007846e282a6cb3d9b9d523d355845bfd7d8e6f","modified":1509161903463},{"_id":"source/_posts/成都游记/2.3.JPG","hash":"c0b17393f891ba88a1d56ed97034cedc56e95757","modified":1509161902736},{"_id":"source/_posts/首尔之行/9.4.JPG","hash":"046314b93dade8fbc30293985d1c1578449c2348","modified":1509161903511},{"_id":"source/_posts/首尔之行/9.5.JPG","hash":"c865e0cd365507f09428da34450a6e91beee960e","modified":1509161903516},{"_id":"source/_posts/首尔之行/14.JPG","hash":"19f0df7f09de625ac06b89ddced3ece077c76cdb","modified":1509161903380},{"_id":"source/_posts/成都游记/2.2.JPG","hash":"bc3da0cdde70ee14c5d56988b36a5a4d880b8940","modified":1509161902727},{"_id":"source/_posts/成都游记/3.5.JPG","hash":"31edce2de4622c6a8f192826be8f8d44ca37f2da","modified":1509161902895},{"_id":"source/_posts/成都游记/5.2.JPG","hash":"36d2ed6e6750ab9b3dc1ce7ad6bbdb27fa95d62d","modified":1509161903006},{"_id":"source/_posts/首尔之行/8.2.JPG","hash":"4ccd3044530150d7c31099a2963004ef8c51bd83","modified":1509161903470},{"_id":"source/_posts/成都游记/2.7.JPG","hash":"519dfbff49466bac93d07e513291ff1eb2bd837f","modified":1509161902769},{"_id":"source/_posts/成都游记/5.3.JPG","hash":"216d3370fdf80b3273773aa2d26bef2d66a35c5f","modified":1509161903023},{"_id":"source/_posts/港珠澳之行/4.JPG","hash":"69e872bd65fe3303fbf3c450c6bc60145a3592b1","modified":1509161903150},{"_id":"source/_posts/成都游记/2.1.JPG","hash":"6c4cb92049278134d1e14a8a0d35fa91781adb7e","modified":1509161902713},{"_id":"source/_posts/成都游记/5.4.JPG","hash":"ff03f84327cb3988b0825965303419ad8a87fdcb","modified":1509161903042},{"_id":"source/_posts/首尔之行/8.5.JPG","hash":"506eb56d8a1d48b0248383adb116c6f335e095bc","modified":1509161903489},{"_id":"source/_posts/成都游记/2.8.JPG","hash":"eccaf1cb4e8febcbada4b3318456c59a0684cb2f","modified":1509161902783},{"_id":"source/_posts/成都游记/5.1.JPG","hash":"b0e1d2b8a5097b8631730b6b9830fbde9d65d1e9","modified":1509161902962},{"_id":"source/_posts/成都游记/5.5.JPG","hash":"356a9e4758ea7fc1fa0653dc1ae908735d4c993d","modified":1509161903059},{"_id":"source/_posts/成都游记/2.9.JPG","hash":"cd9acead9b20a16e27afc4819701c629c7fe898e","modified":1509161902796},{"_id":"source/_posts/首尔之行/8.4.JPG","hash":"2b391892cb39400c07a7460b6d6f550b5ef105c8","modified":1509161903482},{"_id":"source/_posts/港珠澳之行/6.2.JPG","hash":"92e846c1acc0cafb141e891e118ad39e803601c8","modified":1509161903318},{"_id":"source/_posts/首尔之行/9.1.JPG","hash":"c5fd1e075554f28ff39c0a50db2d9e0b192bd03f","modified":1509161903496},{"_id":"source/_posts/首尔之行/1.1.JPG","hash":"4574afec899ed7544de4357c4715e4e44e215cc6","modified":1509161903338},{"_id":"source/_posts/首尔之行/6.JPG","hash":"c002b2343d54fd95a19a22cbb7eb328db6fb7b66","modified":1509161903455},{"_id":"source/_posts/成都游记/5.7.JPG","hash":"1ba8ff8a8a54cdb6f77b4a69fb8158b3f76cc3d2","modified":1509161903087},{"_id":"source/_posts/首尔之行/1.2.JPG","hash":"cf38766dfe6efb768c6a04846c14a99795d0c8a8","modified":1509161903347},{"_id":"source/_posts/成都游记/5.6.JPG","hash":"89ac195f8b7bb472f3b43306bf8f34428e1a9921","modified":1509161903066},{"_id":"source/_posts/成都游记/5.8.JPG","hash":"6992cc52521f7fa6f20943061c06e86dec437739","modified":1509161903096},{"_id":"source/_posts/成都游记/5.9.JPG","hash":"89f8ab75500588c2f30c639a7d2ca23703ee52b8","modified":1509161903106},{"_id":"source/_posts/成都游记/3.4.JPG","hash":"4f65c16b357a3816d48b2c4d2bbf89b1c8d79d47","modified":1509161902868},{"_id":"source/_posts/成都游记/3.3.JPG","hash":"832e30b8a80c7e80b483f6c022af92b74910e681","modified":1509161902851},{"_id":"source/_posts/成都游记/3.2.JPG","hash":"00dff7ed22e4041f09f1d871fb4ea53992795c8b","modified":1509161902831},{"_id":"source/_posts/成都游记/5.10.JPG","hash":"c20abb3782beaef96b77450c52e7fdca27e6ccb9","modified":1509161902982},{"_id":"source/_posts/港珠澳之行/5.2.JPG","hash":"2b2daf09b62bddd737fd8768df5760cf4060677d","modified":1509161903258},{"_id":"source/_posts/港珠澳之行/5.1.JPG","hash":"220403c80065640b51af12b99d08db525959effb","modified":1509161903208},{"_id":"public/atom.xml","hash":"c30b1eb18d4c717ad674a9703b97982861b04ab9","modified":1509174979495},{"_id":"public/404.html","hash":"891fe89d1afe5ae8ed829544f3115292e8736b36","modified":1509174979531},{"_id":"public/all-archives/index.html","hash":"1909a89ac6686aeec9ea143539a49602bceff384","modified":1509174979531},{"_id":"public/about/index.html","hash":"e8db05524401664954adc5146fe73e12a1c896b9","modified":1509174979532},{"_id":"public/all-tags/index.html","hash":"a18f9831f8935e84acf16559d7835a666b3c6404","modified":1509174979532},{"_id":"public/all-categories/index.html","hash":"4c3ccb9c22cd122945e5cb839706f9b6c1d923e2","modified":1509174979532},{"_id":"public/tags/index.html","hash":"ec21a5c0dcf87c4f550810be13e5d777339bd5fb","modified":1509174979532},{"_id":"public/categories/index.html","hash":"a71b46bf279016b75d49abe6ae30e1f203b35e65","modified":1509174979532},{"_id":"public/archives/page/2/index.html","hash":"75479f32325f3ef316d4ff0ab4b152630003c822","modified":1509174979532},{"_id":"public/archives/2016/07/index.html","hash":"237081e4c6e2cdc72b841e54c11bdcadb57be74f","modified":1509174979532},{"_id":"public/archives/2016/08/index.html","hash":"894bb5acf4a07969db437f8f1c0ddb37e47f4079","modified":1509174979532},{"_id":"public/archives/2016/09/index.html","hash":"85adef6e0122695a41aa78a4b063fda47a370141","modified":1509174979532},{"_id":"public/archives/2016/10/index.html","hash":"9815e43779d3e72960b8fac90f26e23467bba9ab","modified":1509174979532},{"_id":"public/archives/2016/12/index.html","hash":"ed8a18b61a4addad350fd33adf2ec8c7f8f8b659","modified":1509174979532},{"_id":"public/archives/2017/index.html","hash":"70cb787791d74185e0b0c7c4fd2b01c4055a8a52","modified":1509174979532},{"_id":"public/archives/2017/01/index.html","hash":"c0f0fe71a6ade96e67112ce9bb401834fa413aa0","modified":1509174979532},{"_id":"public/archives/2017/04/index.html","hash":"8e90d61d7df1d61a2569fa07fc30851fffb77a84","modified":1509174979532},{"_id":"public/archives/2017/06/index.html","hash":"1356fc7af65db32d4daad62e3f6baddc4dfa7966","modified":1509174979532},{"_id":"public/archives/2017/08/index.html","hash":"b66d79d075cb22faf7a8f6f8c234bfd3dc26a517","modified":1509174979532},{"_id":"public/categories/游记/index.html","hash":"ff5a9edf6a0972edd5a5b1971532b7c32bc0104e","modified":1509174979532},{"_id":"public/tags/Mac/index.html","hash":"3ad6d904e3baaf7a68cdf6dee3f3cd08bb9fa3ea","modified":1509174979532},{"_id":"public/tags/React-Native/index.html","hash":"bbf444d323b1edb13e9632f3ea55f6a6af94e8d7","modified":1509174979533},{"_id":"public/tags/Hexo/index.html","hash":"faf8db1f1909ac50b716b804fe99e1a9eeefd2f5","modified":1509174979533},{"_id":"public/tags/fastlane/index.html","hash":"601b7ef4595058d9915ab460407fe7834ffd135b","modified":1509174979533},{"_id":"public/tags/jenkins/index.html","hash":"ae4f65d97f6ea76a7287fdf657b490d44f4e6d27","modified":1509174979533},{"_id":"public/tags/CocoaPods/index.html","hash":"47917ddfd7901feb1d1436a168b304b30e75a61c","modified":1509174979533},{"_id":"public/tags/算法/index.html","hash":"3386c9e7a3a5cd0a0844e07c18219bcd2e718b6c","modified":1509174979533},{"_id":"public/tags/成都/index.html","hash":"b3d612a9409010251f9d1a577365c9d0eff2e2f1","modified":1509174979533},{"_id":"public/tags/都江堰/index.html","hash":"fcbd8bd908ec3edfee539f2426e05f239d297cb0","modified":1509174979533},{"_id":"public/tags/珠海/index.html","hash":"1298b196a49a2563ed6e061deb0f4559ff5e03ec","modified":1509174979533},{"_id":"public/tags/长隆/index.html","hash":"6ddc693458a9d88fa16fbba09a8aec03d1cb8a97","modified":1509174979533},{"_id":"public/tags/香港/index.html","hash":"aa93d290fd11bee368d0c584399923196b34ec64","modified":1509174979533},{"_id":"public/tags/澳门/index.html","hash":"84931134047ba01e4cfb59260bb9643ad0bb04bf","modified":1509174979533},{"_id":"public/tags/首尔/index.html","hash":"e9230ddbe2ef81d0b3100cd97aa810adcfeb23e3","modified":1509174979533},{"_id":"public/2017/08/17/iOS-AppIcon添加打包标识/index.html","hash":"5d6c7c33614fa6a6e7d2d922c12713d0746813e7","modified":1509174979534},{"_id":"public/2017/06/05/港珠澳之行/index.html","hash":"2d393244bf41e75c6b4117620de6f8ff000e9ba0","modified":1509174979534},{"_id":"public/2017/04/08/fastlane+jenkins实现iOS持续集成/index.html","hash":"c29d94d51ffca5d5e0e535a54d377ce2fc3341da","modified":1509174979534},{"_id":"public/2017/01/28/Mac使用oh-my-zsh和iTerm2/index.html","hash":"4fd739aba82beb3f6ebc4d8f499767153e2956d2","modified":1509174979534},{"_id":"public/2016/12/17/ReactNative入门（3）/index.html","hash":"b716419215e18fb54415b1ab9f7ad015462d1dca","modified":1509174979534},{"_id":"public/2016/10/10/成都游记/index.html","hash":"f0361c881744e85b7ecd9b4d6268a7db4b1761f3","modified":1509174979534},{"_id":"public/2016/09/28/首尔之行/index.html","hash":"3221d982a7e4d9af844a9e60134df7ca1d538c18","modified":1509174979534},{"_id":"public/2016/08/19/使用CocoaPods创建私有Spec-Repo管理项目公共组件/index.html","hash":"0a9b757eeb752556e25494a0f54721b142f29b3c","modified":1509174979534},{"_id":"public/2016/08/18/Mac生成SSHKey/index.html","hash":"09c144bdbc680394513d72fd88507ec00b9f605b","modified":1509174979534},{"_id":"public/2016/08/13/iOS9下Safari和app间cookie互通/index.html","hash":"0d86aac524d4ab97fb95ad2e694a665d23ab05ea","modified":1509174979534},{"_id":"public/2016/07/24/ReactNative入门（2）/index.html","hash":"1ffebd64c86a42f0bcffcd6cf688f461fba1ee2e","modified":1509174979534},{"_id":"public/2016/07/10/ReactNative入门（1）/index.html","hash":"2b354b4fc401b22fc19a9ae521584a9e5563b837","modified":1509174979534},{"_id":"public/2016/07/08/几种排序算法/index.html","hash":"a3ef1cca83d6a08fe7ae52a65a8b8c912fec0588","modified":1509174979534},{"_id":"public/2016/07/07/hello-world/index.html","hash":"bbcf8b6b0feb39e43d19a2979f3adc67aa6fd76a","modified":1509174979534},{"_id":"public/archives/index.html","hash":"fbe0e46d1482dab4e4ebccfd8425881f24e601e6","modified":1509174979534},{"_id":"public/archives/2016/index.html","hash":"b40f7726364e3e11d70d030020f712a8e9fc8798","modified":1509174979534},{"_id":"public/categories/技术/index.html","hash":"91b0a4fd7ad52a1a246c8acb87068b88372f4d7f","modified":1509174979534},{"_id":"public/index.html","hash":"fd7a6d8c29a19713614978fc6f4ee5497fd58464","modified":1509174979534},{"_id":"public/page/2/index.html","hash":"99a80d66039e0160f02726d5fc841251f67481fa","modified":1509174979534},{"_id":"public/tags/iOS/index.html","hash":"4acf81356fa6e2ac6b5bc9bdbef5e32f4a128e5b","modified":1509174979535},{"_id":"public/favicon.png","hash":"03136b4808aebd9768ecca6da5d9ab06f7e077fe","modified":1509174979558},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1509174979558},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1509174979558},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1509174979558},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1509174979558},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1509174979558},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1509174979558},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1509174979558},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1509174979558},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1509174979558},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1509174979558},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1509174979558},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1509174979558},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1509174979558},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1509174979558},{"_id":"public/uploads/wechatpay.png","hash":"768020c7cbca40b6111a6c0c7c4ee8c37f094590","modified":1509174979558},{"_id":"public/uploads/avatar.png","hash":"03136b4808aebd9768ecca6da5d9ab06f7e077fe","modified":1509174979558},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1509174979558},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1509174979558},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1509174979558},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1509174979559},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1509174979559},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1509174979559},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1509174979559},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1509174979559},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1509174979559},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1509174979559},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1509174979559},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1509174979559},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1509174979559},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1509174979559},{"_id":"public/2017/01/28/Mac使用oh-my-zsh和iTerm2/iterm2.png","hash":"503ba14dfe0420ee40b4031c41e551b7d38bb453","modified":1509174979559},{"_id":"public/2017/01/28/Mac使用oh-my-zsh和iTerm2/oh-my-zsh.png","hash":"d796db71f6bacd2d1cd0a9fb63ab968f7f71463c","modified":1509174979559},{"_id":"public/2017/04/08/fastlane+jenkins实现iOS持续集成/fastlane-logo.png","hash":"b5f5de819834c0aae317f3cf3c920c73d98aa5b2","modified":1509174979559},{"_id":"public/2017/08/17/iOS-AppIcon添加打包标识/infoPlist_Icon1.png","hash":"4da9ba0eb29f97a8b5c41b254e6013dacd3fcf3e","modified":1509174979559},{"_id":"public/2017/08/17/iOS-AppIcon添加打包标识/buildPhases_Shell.png","hash":"0d366ce0c53429e95586babd1a2a3a5f3a7c4d18","modified":1509174979559},{"_id":"public/2017/08/17/iOS-AppIcon添加打包标识/infoPlist_Icon2.png","hash":"dffb32d9b1eef1edd89c837a6dcdd0731c0256e7","modified":1509174979559},{"_id":"public/uploads/alipay.png","hash":"4d99a7b938513d56d6e814e72610e5ce96496859","modified":1509174980335},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1509174980336},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1509174980348},{"_id":"public/2016/07/10/ReactNative入门（1）/component-lifecycle.jpg","hash":"4da0e553905cc8533d322d3c8781e621bd278613","modified":1509174980348},{"_id":"public/2017/04/08/fastlane+jenkins实现iOS持续集成/fastlane-intro-tree.png","hash":"5af03a4b738e9f838d521c2336b932074365119b","modified":1509174980348},{"_id":"public/2016/09/28/首尔之行/16.2.jpg","hash":"76d40a4763f0caf37780aa72d4deb506df18fba4","modified":1509174980348},{"_id":"public/2016/09/28/首尔之行/3.1.jpg","hash":"d71de83bcef6c8403b43314d906667e992a86f10","modified":1509174980348},{"_id":"public/2016/09/28/首尔之行/5.1.JPG","hash":"2120fc32be8b350d7c6be18e6a623f05a9649524","modified":1509174980348},{"_id":"public/2016/09/28/首尔之行/7.2.jpg","hash":"8ab23838584a8e76b5caaaac29bbaa2e4612b0a5","modified":1509174980348},{"_id":"public/2016/09/28/首尔之行/7.3.jpg","hash":"62c87a3dbfebf7c48a16dde0a1dfcbdfe375341f","modified":1509174980348},{"_id":"public/2016/09/28/首尔之行/8.6.JPG","hash":"c411c5daaba7e96b971487d0651f84539e232acf","modified":1509174980349},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1509174980364},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1509174980364},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1509174980364},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1509174980364},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1509174980364},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1509174980364},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1509174980364},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1509174980364},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1509174980364},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1509174980364},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1509174980364},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1509174980364},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1509174980364},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1509174980364},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1509174980364},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1509174980364},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1509174980364},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1509174980364},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1509174980365},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1509174980365},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1509174980365},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1509174980365},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1509174980365},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1509174980365},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1509174980365},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1509174980366},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1509174980366},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1509174980366},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1509174980366},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1509174980366},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1509174980366},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1509174980366},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1509174980366},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1509174980366},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1509174980366},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1509174980366},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1509174980366},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1509174980367},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1509174980367},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1509174980368},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1509174980368},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1509174980368},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1509174980368},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1509174980369},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1509174980369},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1509174980369},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1509174980369},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1509174980369},{"_id":"public/css/main.css","hash":"bc5d680517f864ea07ec70ffa5d16efaeae14f50","modified":1509174980369},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1509174980369},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1509174980369},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1509174980369},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1509174980369},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1509174980369},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1509174980369},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1509174980369},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1509174980370},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1509174980370},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1509174980370},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1509174980370},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1509174980370},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1509174980370},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1509174980370},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1509174980370},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1509174980370},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1509174980370},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1509174980370},{"_id":"public/uploads/wechat-qcode.jpg","hash":"dfd4e5c400c088a933783d2e95c6535e1b2d5194","modified":1509174980370},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1509174980371},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1509174980371},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1509174980371},{"_id":"public/2016/09/28/首尔之行/2.JPG","hash":"6a83704e7602259bf2b71967aaac952d891041c5","modified":1509174980371},{"_id":"public/2016/09/28/首尔之行/3.2.JPG","hash":"09d8b8b3c5a33aa42e678b022533eb19d8cd7867","modified":1509174980371},{"_id":"public/2016/09/28/首尔之行/4.JPG","hash":"d6da1ac6e22287157d65fe3efbdf90c74a82edf6","modified":1509174980371},{"_id":"public/2016/09/28/首尔之行/9.6.JPG","hash":"8e3a551fbbc0f13aa42770ade02738de83d5f2a9","modified":1509174980372},{"_id":"public/2016/09/28/首尔之行/9.7.JPG","hash":"3b551260498d0d0e6e76ac16d8ce5c5155f0d18f","modified":1509174980372},{"_id":"public/2017/06/05/港珠澳之行/1.2.JPG","hash":"47b0e8dcc8b29a54ffced3f1577c30bc83412d41","modified":1509174980400},{"_id":"public/2017/06/05/港珠澳之行/1.3.JPG","hash":"3cf5e1a3954da5391e8f9a6bad29ad65b7e7ce30","modified":1509174980400},{"_id":"public/2017/06/05/港珠澳之行/2.5.JPG","hash":"834a90dd956d2f834bbdff5ac9ff5ca29c705c64","modified":1509174980400},{"_id":"public/2017/06/05/港珠澳之行/3.2.JPG","hash":"f34242056680a49a7d1478189d2ff24a8fd7ec17","modified":1509174980400},{"_id":"public/2016/09/28/首尔之行/13.jpg","hash":"72dcba3dbf98c6cae330a85172e8d43b2ff61a94","modified":1509174980400},{"_id":"public/2016/09/28/首尔之行/5.2.JPG","hash":"1b9656a59a26226a34123b923b862813402fead6","modified":1509174980401},{"_id":"public/2016/09/28/首尔之行/16.3.jpg","hash":"b5b18ce556b1b3d87fb516f41ba0ce736c9085d4","modified":1509174980401},{"_id":"public/2016/09/28/首尔之行/16.1.jpg","hash":"83940df1ec00e85fcfe97203ed3c7026e16f491a","modified":1509174980429},{"_id":"public/2016/09/28/首尔之行/7.1.JPG","hash":"36f63a413201f89a15c4be860eb86631dbf26c11","modified":1509174980429},{"_id":"public/2017/06/05/港珠澳之行/2.2.JPG","hash":"1011e12a003ffeff7f196633e2324f9fc719b290","modified":1509174980460},{"_id":"public/2016/09/28/首尔之行/5.3.JPG","hash":"6bea3300136e755013fb3c20aefdcae4fff39613","modified":1509174980460},{"_id":"public/2016/09/28/首尔之行/5.4.JPG","hash":"9563cc21b066ad31e53fb06f1229d6cc45f4f42d","modified":1509174980460},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1509174980487},{"_id":"public/2017/06/05/港珠澳之行/2.1.JPG","hash":"f94bf4a801b2e726c0d80bac6c3e800bb6db2f1c","modified":1509174980487},{"_id":"public/2017/06/05/港珠澳之行/5.4.JPG","hash":"79b6a555b7559227e8d09f188c2524d878478e5c","modified":1509174980490},{"_id":"public/2016/09/28/首尔之行/5.5.JPG","hash":"8e893eb8cd45e8e45cd69a44676bdcb11ca9174b","modified":1509174980527},{"_id":"public/2017/06/05/港珠澳之行/2.3.JPG","hash":"73ebcff06bf59d650b2667c014371827aa0a3def","modified":1509174980664},{"_id":"public/2017/06/05/港珠澳之行/5.5.JPG","hash":"167f9416aa64b88382e076472e7e760c5ceda178","modified":1509174980664},{"_id":"public/2017/06/05/港珠澳之行/5.6.JPG","hash":"e069cc6bba71999e84fb1ff6d3e1d1b64cad102a","modified":1509174980706},{"_id":"public/2017/06/05/港珠澳之行/3.1.JPG","hash":"f953fbbaf8ebb9a9893adf2e1929e1b6bad2c855","modified":1509174980725},{"_id":"public/2017/06/05/港珠澳之行/2.4.JPG","hash":"a8a141df0b8f0adbdc3dad9629d0fe7dad805438","modified":1509174980749},{"_id":"public/2016/10/10/成都游记/1.1.JPG","hash":"ffac08185754dbcbdaef7f6adc8be6e877f5e341","modified":1509174980819},{"_id":"public/2016/10/10/成都游记/4.4.JPG","hash":"9c23ab5f0ba52badb96982b1ecb113b5a70a0371","modified":1509174980860},{"_id":"public/2016/09/28/首尔之行/10.2.jpg","hash":"95221d651928eafc665016c4e83edaf4f2961bc5","modified":1509174980875},{"_id":"public/2017/06/05/港珠澳之行/6.1.JPG","hash":"47520f2a43596bd5f1a5077b198e37faa27136b8","modified":1509174980890},{"_id":"public/2016/09/28/首尔之行/10.1.JPG","hash":"97da9cefe6a158f9a2b700de92bdafb7e9600a84","modified":1509174980890},{"_id":"public/2016/09/28/首尔之行/17.2.JPG","hash":"9df1da2fcd8adc79355e1a1cb387d58848cea659","modified":1509174980907},{"_id":"public/2016/09/28/首尔之行/17.1.JPG","hash":"72539a58922b7a668da0ba7e34b2a5f4449cd0c1","modified":1509174980924},{"_id":"public/2016/10/10/成都游记/2.4.JPG","hash":"6641bb61435fa7ab38c531a824fd404ae853fa15","modified":1509174981055},{"_id":"public/2016/09/28/首尔之行/12.JPG","hash":"45dd9bcd517e4bdb74ebafeecfc7cc787db115be","modified":1509174981055},{"_id":"public/2016/09/28/首尔之行/17.3.JPG","hash":"2fcc15854ebdfef7c6fbe90fbbc29468d300fbf5","modified":1509174981057},{"_id":"public/2016/10/10/成都游记/2.5.JPG","hash":"eebc3ef2e882e94b1221aa721bbe8a74eba3bd01","modified":1509174981097},{"_id":"public/2017/06/05/港珠澳之行/1.1.JPG","hash":"be3057ac9a5842d1b277adfefbceadf4a09f5a5d","modified":1509174981120},{"_id":"public/2016/10/10/成都游记/1.2.JPG","hash":"7f447ef9b3c608385fdf97e4d9b035e20a960781","modified":1509174981120},{"_id":"public/2016/10/10/成都游记/4.1.JPG","hash":"ef2d3088f3389ee3215ec1dcce170607c8c5f684","modified":1509174981138},{"_id":"public/2016/09/28/首尔之行/9.8.JPG","hash":"8b932ef4e9186943b1d4476cf3f60fb759cd6342","modified":1509174981176},{"_id":"public/2017/06/05/港珠澳之行/5.3.JPG","hash":"4a53c991fb36d7303be8e26dc60aa46cd0b3de9d","modified":1509174981176},{"_id":"public/2016/09/28/首尔之行/11.JPG","hash":"9779805c971996ba4e27c67f746ddfdb8943b047","modified":1509174981178},{"_id":"public/2016/10/10/成都游记/4.3.JPG","hash":"e39e024dce6eef102780b1a51fbfea47e1d6da2d","modified":1509174981198},{"_id":"public/2016/09/28/首尔之行/9.3.JPG","hash":"ea38f46cc69f45ef78f3eaa0734796a28087661c","modified":1509174981198},{"_id":"public/2016/10/10/成都游记/3.6.JPG","hash":"425250a83a6254cd8707fbad417ee74e5e59e8ca","modified":1509174981212},{"_id":"public/2016/10/10/成都游记/4.5.JPG","hash":"f2374c7b4e4c1ae5daaa2414ec75a517ce0546aa","modified":1509174981213},{"_id":"public/2016/09/28/首尔之行/15.JPG","hash":"aa0c8aca779bae51080b64f5f76b1a9045365cfa","modified":1509174981215},{"_id":"public/2017/06/05/港珠澳之行/5.7.JPG","hash":"fffbfe4de455f471a0d1fe4a93be6c7994d7107c","modified":1509174981238},{"_id":"public/2016/10/10/成都游记/2.6.JPG","hash":"61f9699a6ea574aafd51e854f04e2037afd60b83","modified":1509174981239},{"_id":"public/2016/10/10/成都游记/4.2.JPG","hash":"709f550920b311947579989dffef8fad5c17e9d3","modified":1509174981241},{"_id":"public/2016/09/28/首尔之行/8.3.JPG","hash":"bddd0cf6ee8866ce745a983bc7d646965013abd5","modified":1509174981243},{"_id":"public/2016/09/28/首尔之行/9.2.JPG","hash":"28c805ee13db7fb4bb95fe29e65eb41ca80b7e35","modified":1509174981253},{"_id":"public/2016/09/28/首尔之行/9.4.JPG","hash":"046314b93dade8fbc30293985d1c1578449c2348","modified":1509174981261},{"_id":"public/2016/10/10/成都游记/3.1.JPG","hash":"2323ccbf5c2bd09f283b569cc5192040b6b95e88","modified":1509174981349},{"_id":"public/2016/09/28/首尔之行/8.1.JPG","hash":"e007846e282a6cb3d9b9d523d355845bfd7d8e6f","modified":1509174981349},{"_id":"public/2016/09/28/首尔之行/9.5.JPG","hash":"c865e0cd365507f09428da34450a6e91beee960e","modified":1509174981354},{"_id":"public/2016/10/10/成都游记/2.3.JPG","hash":"c0b17393f891ba88a1d56ed97034cedc56e95757","modified":1509174981366},{"_id":"public/2016/09/28/首尔之行/14.JPG","hash":"19f0df7f09de625ac06b89ddced3ece077c76cdb","modified":1509174981381},{"_id":"public/2016/10/10/成都游记/2.2.JPG","hash":"bc3da0cdde70ee14c5d56988b36a5a4d880b8940","modified":1509174981409},{"_id":"public/2016/10/10/成都游记/5.2.JPG","hash":"36d2ed6e6750ab9b3dc1ce7ad6bbdb27fa95d62d","modified":1509174981409},{"_id":"public/2016/10/10/成都游记/3.5.JPG","hash":"31edce2de4622c6a8f192826be8f8d44ca37f2da","modified":1509174981416},{"_id":"public/2016/09/28/首尔之行/8.2.JPG","hash":"4ccd3044530150d7c31099a2963004ef8c51bd83","modified":1509174981421},{"_id":"public/2017/06/05/港珠澳之行/4.JPG","hash":"69e872bd65fe3303fbf3c450c6bc60145a3592b1","modified":1509174981437},{"_id":"public/2016/10/10/成都游记/2.7.JPG","hash":"519dfbff49466bac93d07e513291ff1eb2bd837f","modified":1509174981437},{"_id":"public/2016/10/10/成都游记/5.3.JPG","hash":"216d3370fdf80b3273773aa2d26bef2d66a35c5f","modified":1509174981441},{"_id":"public/2016/10/10/成都游记/2.1.JPG","hash":"6c4cb92049278134d1e14a8a0d35fa91781adb7e","modified":1509174981462},{"_id":"public/2016/10/10/成都游记/5.4.JPG","hash":"ff03f84327cb3988b0825965303419ad8a87fdcb","modified":1509174981463},{"_id":"public/2016/09/28/首尔之行/8.5.JPG","hash":"506eb56d8a1d48b0248383adb116c6f335e095bc","modified":1509174981472},{"_id":"public/2016/10/10/成都游记/2.8.JPG","hash":"eccaf1cb4e8febcbada4b3318456c59a0684cb2f","modified":1509174981490},{"_id":"public/2016/10/10/成都游记/5.1.JPG","hash":"b0e1d2b8a5097b8631730b6b9830fbde9d65d1e9","modified":1509174981490},{"_id":"public/2016/10/10/成都游记/5.5.JPG","hash":"356a9e4758ea7fc1fa0653dc1ae908735d4c993d","modified":1509174981494},{"_id":"public/2016/10/10/成都游记/2.9.JPG","hash":"cd9acead9b20a16e27afc4819701c629c7fe898e","modified":1509174981510},{"_id":"public/2016/09/28/首尔之行/8.4.JPG","hash":"2b391892cb39400c07a7460b6d6f550b5ef105c8","modified":1509174981510},{"_id":"public/2016/09/28/首尔之行/9.1.JPG","hash":"c5fd1e075554f28ff39c0a50db2d9e0b192bd03f","modified":1509174981515},{"_id":"public/2017/06/05/港珠澳之行/6.2.JPG","hash":"92e846c1acc0cafb141e891e118ad39e803601c8","modified":1509174981614},{"_id":"public/2016/09/28/首尔之行/1.1.JPG","hash":"4574afec899ed7544de4357c4715e4e44e215cc6","modified":1509174981635},{"_id":"public/2016/09/28/首尔之行/6.JPG","hash":"c002b2343d54fd95a19a22cbb7eb328db6fb7b66","modified":1509174981647},{"_id":"public/2016/10/10/成都游记/5.7.JPG","hash":"1ba8ff8a8a54cdb6f77b4a69fb8158b3f76cc3d2","modified":1509174981661},{"_id":"public/2016/09/28/首尔之行/1.2.JPG","hash":"cf38766dfe6efb768c6a04846c14a99795d0c8a8","modified":1509174981676},{"_id":"public/2016/10/10/成都游记/5.8.JPG","hash":"6992cc52521f7fa6f20943061c06e86dec437739","modified":1509174981683},{"_id":"public/2016/10/10/成都游记/5.6.JPG","hash":"89ac195f8b7bb472f3b43306bf8f34428e1a9921","modified":1509174981683},{"_id":"public/2016/10/10/成都游记/5.9.JPG","hash":"89f8ab75500588c2f30c639a7d2ca23703ee52b8","modified":1509174981694},{"_id":"public/2016/10/10/成都游记/3.3.JPG","hash":"832e30b8a80c7e80b483f6c022af92b74910e681","modified":1509174981713},{"_id":"public/2016/10/10/成都游记/3.4.JPG","hash":"4f65c16b357a3816d48b2c4d2bbf89b1c8d79d47","modified":1509174981727},{"_id":"public/2016/10/10/成都游记/3.2.JPG","hash":"00dff7ed22e4041f09f1d871fb4ea53992795c8b","modified":1509174981735},{"_id":"public/2016/10/10/成都游记/5.10.JPG","hash":"c20abb3782beaef96b77450c52e7fdca27e6ccb9","modified":1509174981744},{"_id":"public/2017/06/05/港珠澳之行/5.2.JPG","hash":"2b2daf09b62bddd737fd8768df5760cf4060677d","modified":1509174981759},{"_id":"public/2017/06/05/港珠澳之行/5.1.JPG","hash":"220403c80065640b51af12b99d08db525959effb","modified":1509174981867}],"Category":[{"name":"技术","_id":"cj9aztboz0006xox0xmm72b9m"},{"name":"游记","_id":"cj9aztbpr0016xox0pkm9gnwz"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2017-10-28T03:38:22.663Z","updated":"2017-10-28T03:38:22.663Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj9aztbgc0000xox0xpyfcvhb","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"all-archives","layout":"all-archives","date":"2015-04-04T09:33:40.000Z","_content":"","source":"all-archives/index.md","raw":"title: \"all-archives\"\nlayout: \"all-archives\"\ndate: 2015-04-04 17:33:40\n---\n","updated":"2017-10-28T03:38:23.546Z","path":"all-archives/index.html","comments":1,"_id":"cj9aztbos0002xox0y4127fij","content":"","excerpt":"","more":""},{"title":"","date":"2017-08-17T08:16:40.000Z","type":"about","_content":"\n# 联系方式\n\n- 邮箱：lijinysu@163.com\n- 博客：https://mlijin9011.github.io/\n- Github：https://github.com/mlijin9011\n- 微博：http://weibo.com/mlj90\n\n---\n\n# 个人信息\n\n - iOS 开发\n - 工作年限：5年\n - 目前任职于新浪，新浪新闻客户端 iOS 开发\n\n---\n\n# 个人评价\n\n\n勤奋努力，为人谦虚、自律，有很强的团队合作精神，沟通协作意识良好。\n\n思想活跃，学习能力强，善于接受新事物，喜爱编程，有良好的职业道德和饱满的工作热情；能快速适应新环境，融入集体；具有高度责任感。\n\n期待与您的合作！\n\n\n","source":"about/index.md","raw":"---\ntitle: \ndate: 2017-08-17 16:16:40\ntype: \"about\"\n---\n\n# 联系方式\n\n- 邮箱：lijinysu@163.com\n- 博客：https://mlijin9011.github.io/\n- Github：https://github.com/mlijin9011\n- 微博：http://weibo.com/mlj90\n\n---\n\n# 个人信息\n\n - iOS 开发\n - 工作年限：5年\n - 目前任职于新浪，新浪新闻客户端 iOS 开发\n\n---\n\n# 个人评价\n\n\n勤奋努力，为人谦虚、自律，有很强的团队合作精神，沟通协作意识良好。\n\n思想活跃，学习能力强，善于接受新事物，喜爱编程，有良好的职业道德和饱满的工作热情；能快速适应新环境，融入集体；具有高度责任感。\n\n期待与您的合作！\n\n\n","updated":"2017-10-28T03:38:23.524Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj9aztbow0004xox0mgdazj4s","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>邮箱：lijinysu@163.com</li>\n<li>博客：<a href=\"https://mlijin9011.github.io/\">https://mlijin9011.github.io/</a></li>\n<li>Github：<a href=\"https://github.com/mlijin9011\" target=\"_blank\" rel=\"external\">https://github.com/mlijin9011</a></li>\n<li>微博：<a href=\"http://weibo.com/mlj90\" target=\"_blank\" rel=\"external\">http://weibo.com/mlj90</a></li>\n</ul>\n<hr>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>iOS 开发</li>\n<li>工作年限：5年</li>\n<li>目前任职于新浪，新浪新闻客户端 iOS 开发</li>\n</ul>\n<hr>\n<h1 id=\"个人评价\"><a href=\"#个人评价\" class=\"headerlink\" title=\"个人评价\"></a>个人评价</h1><p>勤奋努力，为人谦虚、自律，有很强的团队合作精神，沟通协作意识良好。</p>\n<p>思想活跃，学习能力强，善于接受新事物，喜爱编程，有良好的职业道德和饱满的工作热情；能快速适应新环境，融入集体；具有高度责任感。</p>\n<p>期待与您的合作！</p>\n","excerpt":"","more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>邮箱：lijinysu@163.com</li>\n<li>博客：<a href=\"https://mlijin9011.github.io/\">https://mlijin9011.github.io/</a></li>\n<li>Github：<a href=\"https://github.com/mlijin9011\">https://github.com/mlijin9011</a></li>\n<li>微博：<a href=\"http://weibo.com/mlj90\">http://weibo.com/mlj90</a></li>\n</ul>\n<hr>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>iOS 开发</li>\n<li>工作年限：5年</li>\n<li>目前任职于新浪，新浪新闻客户端 iOS 开发</li>\n</ul>\n<hr>\n<h1 id=\"个人评价\"><a href=\"#个人评价\" class=\"headerlink\" title=\"个人评价\"></a>个人评价</h1><p>勤奋努力，为人谦虚、自律，有很强的团队合作精神，沟通协作意识良好。</p>\n<p>思想活跃，学习能力强，善于接受新事物，喜爱编程，有良好的职业道德和饱满的工作热情；能快速适应新环境，融入集体；具有高度责任感。</p>\n<p>期待与您的合作！</p>\n"},{"title":"all-tags","layout":"all-tags","date":"2015-04-04T09:33:45.000Z","_content":"","source":"all-tags/index.md","raw":"title: \"all-tags\"\nlayout: \"all-tags\"\ndate: 2015-04-04 17:33:45\n---\n","updated":"2017-10-28T03:38:23.546Z","path":"all-tags/index.html","comments":1,"_id":"cj9aztbp10008xox0t2fmmy3b","content":"","excerpt":"","more":""},{"title":"all-categories","layout":"all-categories","date":"2015-04-04T09:33:51.000Z","_content":"","source":"all-categories/index.md","raw":"title: \"all-categories\"\nlayout: \"all-categories\"\n\ndate: 2015-04-04 17:33:51\n---\n","updated":"2017-10-28T03:38:23.546Z","path":"all-categories/index.html","comments":1,"_id":"cj9aztbp3000axox0k2imyzun","content":"","excerpt":"","more":""},{"title":"标签","date":"2017-08-17T07:43:10.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-08-17 15:43:10\ntype: \"tags\"\n---\n","updated":"2017-10-28T03:38:23.547Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj9aztbp5000exox0jmtgz70r","content":"","excerpt":"","more":""},{"title":"分类","date":"2017-08-17T07:45:21.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-08-17 15:45:21\ntype: \"categories\"\n---\n","updated":"2017-10-28T03:38:23.547Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj9aztbp9000hxox0tlg5qgnj","content":"","excerpt":"","more":""}],"Post":[{"title":"Mac生成SSHKey","date":"2016-08-18T04:16:23.000Z","_content":"\n## 关于 SSH key\n\n使用 SSH 协议，可以连接和验证远程服务器和服务。大家都知道 GitHub 克隆代码可以通过两种方式，SSH key 或者 HTTPS。使用 SSH key 时，您可以直接通过 SSH key 连接到 GitHub，而无需在每次访问时提供用户名或密码。\n\n<!--more-->\n\n## 步骤\n\n    1. 检查 SSH key 是否存在\n    2. 生成新的 SSH key\n    3. 将 SSH key 添加到 GitHub 中\n    \n\n### 检查\n\n在生成 SSH key 之前，您可以检查是否有任何现有的 SSH key。输入下面的命令，如果有文件 id_rsa.pub 或 id_dsa.pub，则直接进入步骤3将 SSH key 添加到 GitHub 中，否则进入第二步生成 SSH key\n\n```\n$ ls -al ~/.ssh\n```\n\n### 生成\n\n如果检查后还没有 SSH key，则要生成一个新的 SSH key 并将其添加到 SSH 代理中\n\n1.生成新的 SSH key\n\n```\n$ ssh-keygen -t rsa -C \"your_email@example.com\"\n```\n\n执行上面的命令后会先让你选择路径，可以直接回车即使用默认路径，然后会提示输入密码，也可以直接回车不设置密码。\n\n2.添加到 SSH 代理中\n\n```\n$ ssh-add ~/.ssh/id_rsa\n```\n\n### 获取\n\n要配置 GitHub 帐户以使用新的（或现有的）SSH key，需要将其添加到你的 GitHub 帐户中。\n\n1.复制 SSH key 到剪贴板\n\n```\n$ pbcopy < ~/.ssh/id_rsa.pub\n```\n\n2.添加到 GitHub\n\n进入 GitHub 个人设置中，把复制的 SSH key 添加的个人 SSH key 管理设置中。\n\n\n","source":"_posts/Mac生成SSHKey.md","raw":"---\ntitle: Mac生成SSHKey\ndate: 2016-8-18 12:16:23\ncategories:\n- 技术\ntags:\n- Mac\n---\n\n## 关于 SSH key\n\n使用 SSH 协议，可以连接和验证远程服务器和服务。大家都知道 GitHub 克隆代码可以通过两种方式，SSH key 或者 HTTPS。使用 SSH key 时，您可以直接通过 SSH key 连接到 GitHub，而无需在每次访问时提供用户名或密码。\n\n<!--more-->\n\n## 步骤\n\n    1. 检查 SSH key 是否存在\n    2. 生成新的 SSH key\n    3. 将 SSH key 添加到 GitHub 中\n    \n\n### 检查\n\n在生成 SSH key 之前，您可以检查是否有任何现有的 SSH key。输入下面的命令，如果有文件 id_rsa.pub 或 id_dsa.pub，则直接进入步骤3将 SSH key 添加到 GitHub 中，否则进入第二步生成 SSH key\n\n```\n$ ls -al ~/.ssh\n```\n\n### 生成\n\n如果检查后还没有 SSH key，则要生成一个新的 SSH key 并将其添加到 SSH 代理中\n\n1.生成新的 SSH key\n\n```\n$ ssh-keygen -t rsa -C \"your_email@example.com\"\n```\n\n执行上面的命令后会先让你选择路径，可以直接回车即使用默认路径，然后会提示输入密码，也可以直接回车不设置密码。\n\n2.添加到 SSH 代理中\n\n```\n$ ssh-add ~/.ssh/id_rsa\n```\n\n### 获取\n\n要配置 GitHub 帐户以使用新的（或现有的）SSH key，需要将其添加到你的 GitHub 帐户中。\n\n1.复制 SSH key 到剪贴板\n\n```\n$ pbcopy < ~/.ssh/id_rsa.pub\n```\n\n2.添加到 GitHub\n\n进入 GitHub 个人设置中，把复制的 SSH key 添加的个人 SSH key 管理设置中。\n\n\n","slug":"Mac生成SSHKey","published":1,"updated":"2017-10-28T04:43:12.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9aztbop0001xox0smld128m","content":"<h2 id=\"关于-SSH-key\"><a href=\"#关于-SSH-key\" class=\"headerlink\" title=\"关于 SSH key\"></a>关于 SSH key</h2><p>使用 SSH 协议，可以连接和验证远程服务器和服务。大家都知道 GitHub 克隆代码可以通过两种方式，SSH key 或者 HTTPS。使用 SSH key 时，您可以直接通过 SSH key 连接到 GitHub，而无需在每次访问时提供用户名或密码。</p>\n<a id=\"more\"></a>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><pre><code>1. 检查 SSH key 是否存在\n2. 生成新的 SSH key\n3. 将 SSH key 添加到 GitHub 中\n</code></pre><h3 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h3><p>在生成 SSH key 之前，您可以检查是否有任何现有的 SSH key。输入下面的命令，如果有文件 id_rsa.pub 或 id_dsa.pub，则直接进入步骤3将 SSH key 添加到 GitHub 中，否则进入第二步生成 SSH key</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh</div></pre></td></tr></table></figure>\n<h3 id=\"生成\"><a href=\"#生成\" class=\"headerlink\" title=\"生成\"></a>生成</h3><p>如果检查后还没有 SSH key，则要生成一个新的 SSH key 并将其添加到 SSH 代理中</p>\n<p>1.生成新的 SSH key</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</div></pre></td></tr></table></figure>\n<p>执行上面的命令后会先让你选择路径，可以直接回车即使用默认路径，然后会提示输入密码，也可以直接回车不设置密码。</p>\n<p>2.添加到 SSH 代理中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>\n<h3 id=\"获取\"><a href=\"#获取\" class=\"headerlink\" title=\"获取\"></a>获取</h3><p>要配置 GitHub 帐户以使用新的（或现有的）SSH key，需要将其添加到你的 GitHub 帐户中。</p>\n<p>1.复制 SSH key 到剪贴板</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pbcopy &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>\n<p>2.添加到 GitHub</p>\n<p>进入 GitHub 个人设置中，把复制的 SSH key 添加的个人 SSH key 管理设置中。</p>\n","excerpt":"<h2 id=\"关于-SSH-key\"><a href=\"#关于-SSH-key\" class=\"headerlink\" title=\"关于 SSH key\"></a>关于 SSH key</h2><p>使用 SSH 协议，可以连接和验证远程服务器和服务。大家都知道 GitHub 克隆代码可以通过两种方式，SSH key 或者 HTTPS。使用 SSH key 时，您可以直接通过 SSH key 连接到 GitHub，而无需在每次访问时提供用户名或密码。</p>","more":"<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><pre><code>1. 检查 SSH key 是否存在\n2. 生成新的 SSH key\n3. 将 SSH key 添加到 GitHub 中\n</code></pre><h3 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h3><p>在生成 SSH key 之前，您可以检查是否有任何现有的 SSH key。输入下面的命令，如果有文件 id_rsa.pub 或 id_dsa.pub，则直接进入步骤3将 SSH key 添加到 GitHub 中，否则进入第二步生成 SSH key</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh</div></pre></td></tr></table></figure>\n<h3 id=\"生成\"><a href=\"#生成\" class=\"headerlink\" title=\"生成\"></a>生成</h3><p>如果检查后还没有 SSH key，则要生成一个新的 SSH key 并将其添加到 SSH 代理中</p>\n<p>1.生成新的 SSH key</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</div></pre></td></tr></table></figure>\n<p>执行上面的命令后会先让你选择路径，可以直接回车即使用默认路径，然后会提示输入密码，也可以直接回车不设置密码。</p>\n<p>2.添加到 SSH 代理中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>\n<h3 id=\"获取\"><a href=\"#获取\" class=\"headerlink\" title=\"获取\"></a>获取</h3><p>要配置 GitHub 帐户以使用新的（或现有的）SSH key，需要将其添加到你的 GitHub 帐户中。</p>\n<p>1.复制 SSH key 到剪贴板</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pbcopy &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>\n<p>2.添加到 GitHub</p>\n<p>进入 GitHub 个人设置中，把复制的 SSH key 添加的个人 SSH key 管理设置中。</p>"},{"title":"ReactNative入门（2）—— 接入原生应用","date":"2016-07-24T02:18:09.000Z","_content":"\n\n## 安装 React Native 依赖\n\n在工程所在目录新建一个文件夹，作为 JS 文件目录，在这个文件夹下，安装 React 和 React Native 依赖：\n\n```\ncd x/xx/xxx #你的工程路径\nnpm install react\nnpm install react-native\n```\n\t\n这时这个文件夹下会出现一个 node_modules 文件夹，react 依赖库就在这个文件夹下。\n\n<!--more-->\n\n## CocoaPods安装\n\n在 Podfile 文件中增加以下的内容：\n\n```\n# path 后面的内容修改为正确的路径，根据你的 node_modules 文件夹路径。\npod 'React', :path => './node_modules/react-native', :subspecs => [\n  'Core',\n  'RCTImage',\n  'RCTNetwork',\n  'RCTText',\n  # 添加其他你想在工程中使用的依赖。\n]\n```\n\n接着安装 pods：\n\n```\n$ pod install\n```\n\t\n## 创建 React Native 应用\n\n首先，创建一个文件夹来保存 React 代码，然后创建一个 js 文件：\n\n```\n$ mkdir ReactViews\n$ touch ReactViews/test.js\n```\n\n然后写你的 js 代码：\n\n```\n'use strict';\n\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  Text,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'red'\n  }\n});\n\nclass SimpleApp extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>This is a simple react native application.</Text>\n      </View>\n    )\n  }\n}\n\nAppRegistry.registerComponent('SimpleApp', () => SimpleApp);\n```\n\nSimpleApp 是你的模块名，这个在后面会要用到。\n\n接着，往应用里添加容器视图，来容纳 React Native 组件，它可以是你应用里任何的 UIView。\n\n新建一个 ReactView 继承 UIView。\n\n// ReactView.h\n\n```\n#import <UIKit/UIKit.h>\n@interface ReactView : UIView\n\n@end\n```\n\n往 ReactView 里添加 RCTRootView，来包含你的 React Native 应用。\n\n// ReactView.m \n\n```\n#import \"RCTRootView.h\"\n\n@implementation MZLReactView\n\n- (instancetype)initWithFrame:(CGRect)frame {\n    self = [super initWithFrame:frame];\n    if (self) {\n        self.backgroundColor = [UIColor grayColor];\n        \n        NSURL *jsCodeLocation = [NSURL URLWithString:@\"http://localhost:8081/test.bundle?platform=ios\"];\n        // NSURL *jsCodeLocation = [[NSBundle mainBundle] URLForResource:@\"test\" withExtension:@\"jsbundle\"];\n    \n        RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation moduleName:@\"SimpleComponent\" initialProperties:nil launchOptions:nil];\n        [self addSubview:rootView];\n        \n        rootView.frame = self.bounds;\n    }\n    return self;\n}\n\n@end\n```\n\n在 UIViewController 中使用这个 ReactView，这样就创建了一个 React Native 应用。\n\n## 运行\n\n在工程的根目录下，开启 React Native 开发服务器：\n\n```\n(JS_DIR=`pwd`/ReactViews; cd node_modules/react-native; npm run start -- --root $JS_DIR)\n```\n\n这条命令会启动一个 React Native 开发服务器，用于构建我们的 bundle 文件。--root 选项用来标明你的 React Native 应用所在的根目录。在我们这里是 ReactViews 目录，里面有一个test.js 文件。开发服务器启动后会打包出 test.bundle 文件来，并可以通过 `http://localhost:8081/test.bundle` 来访问。\n\n现在编译和运行你的应用，就可以看到你的 React Native 应用在 ReactView 内运行。\n\n## 总结\n\n在底层，当 RCTRootView 初始化完成以后，它会尝试从开发服务器下载、解析并运行打包后的脚本文件。所以你所要做的就是实现你自己的容器视图或者视图控制器，然后把 RCTRootView 作为子视图加入，接下来 RCTRootView 会搞定你的脚本文件然后渲染你的 React 组件。\n\n你可以在这里获得一个样例应用的完整源代码。\n\n\n参考博文：[React Native 中文网：嵌入到现有原生应用](http://reactnative.cn/docs/0.31/integration-with-existing-apps.html#content)","source":"_posts/ReactNative入门（2）.md","raw":"---\ntitle: ReactNative入门（2）—— 接入原生应用\ndate: 2016-07-24 10:18:09\ncategories:\n- 技术\ntags:\n- React Native\n- iOS\n---\n\n\n## 安装 React Native 依赖\n\n在工程所在目录新建一个文件夹，作为 JS 文件目录，在这个文件夹下，安装 React 和 React Native 依赖：\n\n```\ncd x/xx/xxx #你的工程路径\nnpm install react\nnpm install react-native\n```\n\t\n这时这个文件夹下会出现一个 node_modules 文件夹，react 依赖库就在这个文件夹下。\n\n<!--more-->\n\n## CocoaPods安装\n\n在 Podfile 文件中增加以下的内容：\n\n```\n# path 后面的内容修改为正确的路径，根据你的 node_modules 文件夹路径。\npod 'React', :path => './node_modules/react-native', :subspecs => [\n  'Core',\n  'RCTImage',\n  'RCTNetwork',\n  'RCTText',\n  # 添加其他你想在工程中使用的依赖。\n]\n```\n\n接着安装 pods：\n\n```\n$ pod install\n```\n\t\n## 创建 React Native 应用\n\n首先，创建一个文件夹来保存 React 代码，然后创建一个 js 文件：\n\n```\n$ mkdir ReactViews\n$ touch ReactViews/test.js\n```\n\n然后写你的 js 代码：\n\n```\n'use strict';\n\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  Text,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'red'\n  }\n});\n\nclass SimpleApp extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text>This is a simple react native application.</Text>\n      </View>\n    )\n  }\n}\n\nAppRegistry.registerComponent('SimpleApp', () => SimpleApp);\n```\n\nSimpleApp 是你的模块名，这个在后面会要用到。\n\n接着，往应用里添加容器视图，来容纳 React Native 组件，它可以是你应用里任何的 UIView。\n\n新建一个 ReactView 继承 UIView。\n\n// ReactView.h\n\n```\n#import <UIKit/UIKit.h>\n@interface ReactView : UIView\n\n@end\n```\n\n往 ReactView 里添加 RCTRootView，来包含你的 React Native 应用。\n\n// ReactView.m \n\n```\n#import \"RCTRootView.h\"\n\n@implementation MZLReactView\n\n- (instancetype)initWithFrame:(CGRect)frame {\n    self = [super initWithFrame:frame];\n    if (self) {\n        self.backgroundColor = [UIColor grayColor];\n        \n        NSURL *jsCodeLocation = [NSURL URLWithString:@\"http://localhost:8081/test.bundle?platform=ios\"];\n        // NSURL *jsCodeLocation = [[NSBundle mainBundle] URLForResource:@\"test\" withExtension:@\"jsbundle\"];\n    \n        RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation moduleName:@\"SimpleComponent\" initialProperties:nil launchOptions:nil];\n        [self addSubview:rootView];\n        \n        rootView.frame = self.bounds;\n    }\n    return self;\n}\n\n@end\n```\n\n在 UIViewController 中使用这个 ReactView，这样就创建了一个 React Native 应用。\n\n## 运行\n\n在工程的根目录下，开启 React Native 开发服务器：\n\n```\n(JS_DIR=`pwd`/ReactViews; cd node_modules/react-native; npm run start -- --root $JS_DIR)\n```\n\n这条命令会启动一个 React Native 开发服务器，用于构建我们的 bundle 文件。--root 选项用来标明你的 React Native 应用所在的根目录。在我们这里是 ReactViews 目录，里面有一个test.js 文件。开发服务器启动后会打包出 test.bundle 文件来，并可以通过 `http://localhost:8081/test.bundle` 来访问。\n\n现在编译和运行你的应用，就可以看到你的 React Native 应用在 ReactView 内运行。\n\n## 总结\n\n在底层，当 RCTRootView 初始化完成以后，它会尝试从开发服务器下载、解析并运行打包后的脚本文件。所以你所要做的就是实现你自己的容器视图或者视图控制器，然后把 RCTRootView 作为子视图加入，接下来 RCTRootView 会搞定你的脚本文件然后渲染你的 React 组件。\n\n你可以在这里获得一个样例应用的完整源代码。\n\n\n参考博文：[React Native 中文网：嵌入到现有原生应用](http://reactnative.cn/docs/0.31/integration-with-existing-apps.html#content)","slug":"ReactNative入门（2）","published":1,"updated":"2017-10-28T03:38:22.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9aztbou0003xox0aep7kolx","content":"<h2 id=\"安装-React-Native-依赖\"><a href=\"#安装-React-Native-依赖\" class=\"headerlink\" title=\"安装 React Native 依赖\"></a>安装 React Native 依赖</h2><p>在工程所在目录新建一个文件夹，作为 JS 文件目录，在这个文件夹下，安装 React 和 React Native 依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd x/xx/xxx #你的工程路径</div><div class=\"line\">npm install react</div><div class=\"line\">npm install react-native</div></pre></td></tr></table></figure>\n<p>这时这个文件夹下会出现一个 node_modules 文件夹，react 依赖库就在这个文件夹下。</p>\n<a id=\"more\"></a>\n<h2 id=\"CocoaPods安装\"><a href=\"#CocoaPods安装\" class=\"headerlink\" title=\"CocoaPods安装\"></a>CocoaPods安装</h2><p>在 Podfile 文件中增加以下的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># path 后面的内容修改为正确的路径，根据你的 node_modules 文件夹路径。</div><div class=\"line\">pod &apos;React&apos;, :path =&gt; &apos;./node_modules/react-native&apos;, :subspecs =&gt; [</div><div class=\"line\">  &apos;Core&apos;,</div><div class=\"line\">  &apos;RCTImage&apos;,</div><div class=\"line\">  &apos;RCTNetwork&apos;,</div><div class=\"line\">  &apos;RCTText&apos;,</div><div class=\"line\">  # 添加其他你想在工程中使用的依赖。</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>接着安装 pods：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pod install</div></pre></td></tr></table></figure>\n<h2 id=\"创建-React-Native-应用\"><a href=\"#创建-React-Native-应用\" class=\"headerlink\" title=\"创建 React Native 应用\"></a>创建 React Native 应用</h2><p>首先，创建一个文件夹来保存 React 代码，然后创建一个 js 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir ReactViews</div><div class=\"line\">$ touch ReactViews/test.js</div></pre></td></tr></table></figure>\n<p>然后写你的 js 代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  Text,</div><div class=\"line\">  StyleSheet,</div><div class=\"line\">  View,</div><div class=\"line\">&#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">var styles = StyleSheet.create(&#123;</div><div class=\"line\">  container: &#123;</div><div class=\"line\">    flex: 1,</div><div class=\"line\">    backgroundColor: &apos;red&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">class SimpleApp extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class=\"line\">        &lt;Text&gt;This is a simple react native application.&lt;/Text&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(&apos;SimpleApp&apos;, () =&gt; SimpleApp);</div></pre></td></tr></table></figure>\n<p>SimpleApp 是你的模块名，这个在后面会要用到。</p>\n<p>接着，往应用里添加容器视图，来容纳 React Native 组件，它可以是你应用里任何的 UIView。</p>\n<p>新建一个 ReactView 继承 UIView。</p>\n<p>// ReactView.h</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;UIKit/UIKit.h&gt;</div><div class=\"line\">@interface ReactView : UIView</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>往 ReactView 里添加 RCTRootView，来包含你的 React Native 应用。</p>\n<p>// ReactView.m </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;RCTRootView.h&quot;</div><div class=\"line\"></div><div class=\"line\">@implementation MZLReactView</div><div class=\"line\"></div><div class=\"line\">- (instancetype)initWithFrame:(CGRect)frame &#123;</div><div class=\"line\">    self = [super initWithFrame:frame];</div><div class=\"line\">    if (self) &#123;</div><div class=\"line\">        self.backgroundColor = [UIColor grayColor];</div><div class=\"line\">        </div><div class=\"line\">        NSURL *jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/test.bundle?platform=ios&quot;];</div><div class=\"line\">        // NSURL *jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;test&quot; withExtension:@&quot;jsbundle&quot;];</div><div class=\"line\">    </div><div class=\"line\">        RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation moduleName:@&quot;SimpleComponent&quot; initialProperties:nil launchOptions:nil];</div><div class=\"line\">        [self addSubview:rootView];</div><div class=\"line\">        </div><div class=\"line\">        rootView.frame = self.bounds;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return self;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>在 UIViewController 中使用这个 ReactView，这样就创建了一个 React Native 应用。</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>在工程的根目录下，开启 React Native 开发服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(JS_DIR=`pwd`/ReactViews; cd node_modules/react-native; npm run start -- --root $JS_DIR)</div></pre></td></tr></table></figure>\n<p>这条命令会启动一个 React Native 开发服务器，用于构建我们的 bundle 文件。–root 选项用来标明你的 React Native 应用所在的根目录。在我们这里是 ReactViews 目录，里面有一个test.js 文件。开发服务器启动后会打包出 test.bundle 文件来，并可以通过 <code>http://localhost:8081/test.bundle</code> 来访问。</p>\n<p>现在编译和运行你的应用，就可以看到你的 React Native 应用在 ReactView 内运行。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在底层，当 RCTRootView 初始化完成以后，它会尝试从开发服务器下载、解析并运行打包后的脚本文件。所以你所要做的就是实现你自己的容器视图或者视图控制器，然后把 RCTRootView 作为子视图加入，接下来 RCTRootView 会搞定你的脚本文件然后渲染你的 React 组件。</p>\n<p>你可以在这里获得一个样例应用的完整源代码。</p>\n<p>参考博文：<a href=\"http://reactnative.cn/docs/0.31/integration-with-existing-apps.html#content\" target=\"_blank\" rel=\"external\">React Native 中文网：嵌入到现有原生应用</a></p>\n","excerpt":"<h2 id=\"安装-React-Native-依赖\"><a href=\"#安装-React-Native-依赖\" class=\"headerlink\" title=\"安装 React Native 依赖\"></a>安装 React Native 依赖</h2><p>在工程所在目录新建一个文件夹，作为 JS 文件目录，在这个文件夹下，安装 React 和 React Native 依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd x/xx/xxx #你的工程路径</div><div class=\"line\">npm install react</div><div class=\"line\">npm install react-native</div></pre></td></tr></table></figure>\n<p>这时这个文件夹下会出现一个 node_modules 文件夹，react 依赖库就在这个文件夹下。</p>","more":"<h2 id=\"CocoaPods安装\"><a href=\"#CocoaPods安装\" class=\"headerlink\" title=\"CocoaPods安装\"></a>CocoaPods安装</h2><p>在 Podfile 文件中增加以下的内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># path 后面的内容修改为正确的路径，根据你的 node_modules 文件夹路径。</div><div class=\"line\">pod &apos;React&apos;, :path =&gt; &apos;./node_modules/react-native&apos;, :subspecs =&gt; [</div><div class=\"line\">  &apos;Core&apos;,</div><div class=\"line\">  &apos;RCTImage&apos;,</div><div class=\"line\">  &apos;RCTNetwork&apos;,</div><div class=\"line\">  &apos;RCTText&apos;,</div><div class=\"line\">  # 添加其他你想在工程中使用的依赖。</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>接着安装 pods：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pod install</div></pre></td></tr></table></figure>\n<h2 id=\"创建-React-Native-应用\"><a href=\"#创建-React-Native-应用\" class=\"headerlink\" title=\"创建 React Native 应用\"></a>创建 React Native 应用</h2><p>首先，创建一个文件夹来保存 React 代码，然后创建一个 js 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir ReactViews</div><div class=\"line\">$ touch ReactViews/test.js</div></pre></td></tr></table></figure>\n<p>然后写你的 js 代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  Text,</div><div class=\"line\">  StyleSheet,</div><div class=\"line\">  View,</div><div class=\"line\">&#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">var styles = StyleSheet.create(&#123;</div><div class=\"line\">  container: &#123;</div><div class=\"line\">    flex: 1,</div><div class=\"line\">    backgroundColor: &apos;red&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">class SimpleApp extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class=\"line\">        &lt;Text&gt;This is a simple react native application.&lt;/Text&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(&apos;SimpleApp&apos;, () =&gt; SimpleApp);</div></pre></td></tr></table></figure>\n<p>SimpleApp 是你的模块名，这个在后面会要用到。</p>\n<p>接着，往应用里添加容器视图，来容纳 React Native 组件，它可以是你应用里任何的 UIView。</p>\n<p>新建一个 ReactView 继承 UIView。</p>\n<p>// ReactView.h</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;UIKit/UIKit.h&gt;</div><div class=\"line\">@interface ReactView : UIView</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>往 ReactView 里添加 RCTRootView，来包含你的 React Native 应用。</p>\n<p>// ReactView.m </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;RCTRootView.h&quot;</div><div class=\"line\"></div><div class=\"line\">@implementation MZLReactView</div><div class=\"line\"></div><div class=\"line\">- (instancetype)initWithFrame:(CGRect)frame &#123;</div><div class=\"line\">    self = [super initWithFrame:frame];</div><div class=\"line\">    if (self) &#123;</div><div class=\"line\">        self.backgroundColor = [UIColor grayColor];</div><div class=\"line\">        </div><div class=\"line\">        NSURL *jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/test.bundle?platform=ios&quot;];</div><div class=\"line\">        // NSURL *jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;test&quot; withExtension:@&quot;jsbundle&quot;];</div><div class=\"line\">    </div><div class=\"line\">        RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation moduleName:@&quot;SimpleComponent&quot; initialProperties:nil launchOptions:nil];</div><div class=\"line\">        [self addSubview:rootView];</div><div class=\"line\">        </div><div class=\"line\">        rootView.frame = self.bounds;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return self;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>在 UIViewController 中使用这个 ReactView，这样就创建了一个 React Native 应用。</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>在工程的根目录下，开启 React Native 开发服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(JS_DIR=`pwd`/ReactViews; cd node_modules/react-native; npm run start -- --root $JS_DIR)</div></pre></td></tr></table></figure>\n<p>这条命令会启动一个 React Native 开发服务器，用于构建我们的 bundle 文件。–root 选项用来标明你的 React Native 应用所在的根目录。在我们这里是 ReactViews 目录，里面有一个test.js 文件。开发服务器启动后会打包出 test.bundle 文件来，并可以通过 <code>http://localhost:8081/test.bundle</code> 来访问。</p>\n<p>现在编译和运行你的应用，就可以看到你的 React Native 应用在 ReactView 内运行。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在底层，当 RCTRootView 初始化完成以后，它会尝试从开发服务器下载、解析并运行打包后的脚本文件。所以你所要做的就是实现你自己的容器视图或者视图控制器，然后把 RCTRootView 作为子视图加入，接下来 RCTRootView 会搞定你的脚本文件然后渲染你的 React 组件。</p>\n<p>你可以在这里获得一个样例应用的完整源代码。</p>\n<p>参考博文：<a href=\"http://reactnative.cn/docs/0.31/integration-with-existing-apps.html#content\">React Native 中文网：嵌入到现有原生应用</a></p>"},{"title":"Mac使用oh-my-zsh和iTerm2","date":"2017-01-28T04:45:27.000Z","_content":"\n## 前言\n\nShell 是 Linux/Unix 的一个外壳，它负责外界与 Linux 内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序。\n\nMac 的最大优势是 GUI 和命令行的完美结合，本文介绍如何使用 iTerm2 和 oh my zsh 打造 Mac 最强终端。\n\n<!--more-->\n\n## iTerm2\n\niTerm2 是一个终端模拟器，官方网站：http://www.iterm2.com/\n\n### 安装\n\n直接去 [官网](http://www.iterm2.com/) 下载就可以\n\n### 更改配色\n\niTerm2 比较好看的配色方案当属 `Solarized` ，直接在 `iTerm2 - Preferences - Profiles - Colors` 里面配置就好了，我使用的是 Solarized-Dark。\n\n### 更改 powerline 字体\n\n1.安装 Powerline\n\n下载 Powerline 工程\n\n```\n$ git clone https://github.com/powerline/fonts.git --depth=1\n```\n\n将工程下载下来后 cd 到 install.sh 文件所在目录，然后执行 `./install.sh` 指令安装所有 Powerline 字体\n\n```\n$ cd fonts\n$ ./install.sh\n```\n\n安装完成后，删除下载的工程，也可以不清，主要是为了保持电脑空间干净整洁\n\n```\n$ cd ..\n$ rm -rf fonts\n```\n\n2.设置 iTerm 2 的字体\n\n安装完字体库之后，在 `iTerm2 - Preferences - Profiles - Text` 选项卡中里的字体设置成 Powerline 的字体，我这里设置的字体是 `Meslo LG M DZ for Powerline`。\n\n\n## oh my zsh\n\nMac 终端默认使用的 Shell 是 bash，设置当前用户使用 zsh：\n\n```\n$ chsh -s /bin/zsh\n```\n\n执行命令后，根据提示输入当前用户的密码就可以了。\n\n如果以后想恢复为 bash，可执行 \n\n```\n$ chsh -s /bin/bash\n```\n\n### 安装\n\n执行下面的两个命令可以自动安装：\n\n```\n$ wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh\n```\n\n或者\n\n```\n$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh\n```\n\n安装完后会输出这样的结果：\n\n![image](Mac使用oh-my-zsh和iTerm2/oh-my-zsh.png)\n\n### 配置\n\nzsh 的配置主要集中在用户目录的 .zshrc 里，用 vim 或你喜欢的其他编辑器打开.zshrc，在最下面会发现这么一行字：\n\n    # Customize to your needs…\n\n可以在此处定义自己的环境变量和别名，当然，oh my zsh 在安装时已经自动读取当前的环境变量并进行了设置，你可以继续追加其他环境变量。\n\n```\nalias zshconfig=\"sublime ~/.zshrc\"\nalias ohmyzsh=\"sublime ~/.oh-my-zsh\"\nalias cls='clear'\nalias h='history'\nalias ll='ls -l'\nalias la='ls -a'\nalias vi='vim'\nalias sublime=\"open -a /Applications/Sublime\\ Text\\.app\"\nalias javac=\"javac -J-Dfile.encoding=utf8\"\nalias grep=\"grep --color=auto\"\nalias -s html=sublime # 在命令行直接输入后缀为 html 的文件名，会在 sublime  中打开\nalias -s rb=sublime   # 在命令行直接输入 ruby 文件，会在 sublime 中打开\nalias -s py=sublime   # 在命令行直接输入 python 文件，会用 sublime 中打开，以下类似\nalias -s js=sublime\nalias -s c=sublime\nalias -s java=sublime\nalias -s txt=sublime\nalias -s gz='tar -xzvf'\nalias -s tgz='tar -xzvf'\nalias -s zip='unzip'\nalias -s bz2='tar -xjvf'\n```\n\n### 主题\n\n为了美观，可以设置主题，在 .zshrc 里找到 ZSH_THEME，就可以设置主题了，默认主题是：ZSH_THEME=”robbyrussell”。\n\noh my zsh 提供了数十种主题，相关文件在~/.oh-my-zsh/themes 目录下，你可以随意选择，也可以自定义主题。\n\n复制一个主题文件作为自定义主题 `mzl-powerline.zsh-theme`，修改里面的内容为:\n\n```\nif [ \"$POWERLINE_DATE_FORMAT\" = \"\" ]; then\n  POWERLINE_DATE_FORMAT=%D{%Y-%m-%d}\nfi\n\nif [ \"$POWERLINE_RIGHT_B\" = \"\" ]; then\n  POWERLINE_RIGHT_B=%D{%H:%M:%S}\nelif [ \"$POWERLINE_RIGHT_B\" = \"none\" ]; then\n  POWERLINE_RIGHT_B=\"\"\nfi\n\nif [ \"$POWERLINE_RIGHT_A\" = \"mixed\" ]; then\n  POWERLINE_RIGHT_A=%(?.\"$POWERLINE_DATE_FORMAT\".%F{red}✘ %?)\nelif [ \"$POWERLINE_RIGHT_A\" = \"exit-status\" ]; then\n  POWERLINE_RIGHT_A=%(?.%F{green}✔ %?.%F{red}✘ %?)\nelif [ \"$POWERLINE_RIGHT_A\" = \"date\" ]; then\n  POWERLINE_RIGHT_A=\"$POWERLINE_DATE_FORMAT\"\nfi\n\nif [ \"$POWERLINE_HIDE_USER_NAME\" = \"\" ] && [ \"$POWERLINE_HIDE_HOST_NAME\" = \"\" ]; then\n    POWERLINE_USER_NAME=\"%n@\"'%M'\nelif [ \"$POWERLINE_HIDE_USER_NAME\" != \"\" ] && [ \"$POWERLINE_HIDE_HOST_NAME\" = \"\" ]; then\n    POWERLINE_USER_NAME=\"@%M\"\nelif [ \"$POWERLINE_HIDE_USER_NAME\" = \"\" ] && [ \"$POWERLINE_HIDE_HOST_NAME\" != \"\" ]; then\n    POWERLINE_USER_NAME=\"%n\"\nelse\n    POWERLINE_USER_NAME=\"λ\"\nfi\n\nPOWERLINE_CURRENT_PATH=\"%d\"\n\nif [ \"$POWERLINE_FULL_CURRENT_PATH\" = \"\" ]; then\n  POWERLINE_CURRENT_PATH=\"%1~\"\nfi\n\nif [ \"$POWERLINE_GIT_CLEAN\" = \"\" ]; then\n  POWERLINE_GIT_CLEAN=\"✔\"\nfi\n\nif [ \"$POWERLINE_GIT_DIRTY\" = \"\" ]; then\n  POWERLINE_GIT_DIRTY=\"✘\"\nfi\n\nif [ \"$POWERLINE_GIT_ADDED\" = \"\" ]; then\n  POWERLINE_GIT_ADDED=\"%F{green}✚%F{black}\"\nfi\n\nif [ \"$POWERLINE_GIT_MODIFIED\" = \"\" ]; then\n  POWERLINE_GIT_MODIFIED=\"%F{blue}✹%F{black}\"\nfi\n\nif [ \"$POWERLINE_GIT_DELETED\" = \"\" ]; then\n  POWERLINE_GIT_DELETED=\"%F{red}✖%F{black}\"\nfi\n\nif [ \"$POWERLINE_GIT_UNTRACKED\" = \"\" ]; then\n  POWERLINE_GIT_UNTRACKED=\"%F{yellow}✭%F{black}\"\nfi\n\nif [ \"$POWERLINE_GIT_RENAMED\" = \"\" ]; then\n  POWERLINE_GIT_RENAMED=\"➜\"\nfi\n\nif [ \"$POWERLINE_GIT_UNMERGED\" = \"\" ]; then\n  POWERLINE_GIT_UNMERGED=\"═\"\nfi\n\nZSH_THEME_GIT_PROMPT_PREFIX=\" \\ue0a0 \"\nZSH_THEME_GIT_PROMPT_SUFFIX=\"\"\nZSH_THEME_GIT_PROMPT_DIRTY=\" $POWERLINE_GIT_DIRTY\"\nZSH_THEME_GIT_PROMPT_CLEAN=\" $POWERLINE_GIT_CLEAN\"\n\nZSH_THEME_GIT_PROMPT_ADDED=\" $POWERLINE_GIT_ADDED\"\nZSH_THEME_GIT_PROMPT_MODIFIED=\" $POWERLINE_GIT_MODIFIED\"\nZSH_THEME_GIT_PROMPT_DELETED=\" $POWERLINE_GIT_DELETED\"\nZSH_THEME_GIT_PROMPT_UNTRACKED=\" $POWERLINE_GIT_UNTRACKED\"\nZSH_THEME_GIT_PROMPT_RENAMED=\" $POWERLINE_GIT_RENAMED\"\nZSH_THEME_GIT_PROMPT_UNMERGED=\" $POWERLINE_GIT_UNMERGED\"\nZSH_THEME_GIT_PROMPT_AHEAD=\" ⬆\"\nZSH_THEME_GIT_PROMPT_BEHIND=\" ⬇\"\nZSH_THEME_GIT_PROMPT_DIVERGED=\" ⬍\"\n\nif [ \"$POWERLINE_SHOW_GIT_ON_RIGHT\" = \"\" ]; then\n    if [ \"$POWERLINE_HIDE_GIT_PROMPT_STATUS\" = \"\" ]; then\n        POWERLINE_GIT_INFO_LEFT=\" %F{blue}%K{white}\"$'\\ue0b0'\"%F{white}%F{black}%K{white}\"$'$(git_prompt_info)$(git_prompt_status)%F{white}'\n    else\n        POWERLINE_GIT_INFO_LEFT=\" %F{blue}%K{white}\"$'\\ue0b0'\"%F{white}%F{black}%K{white}\"$'$(git_prompt_info)%F{white}'\n    fi\n    POWERLINE_GIT_INFO_RIGHT=\"\"\nelse\n    POWERLINE_GIT_INFO_LEFT=\"\"\n    POWERLINE_GIT_INFO_RIGHT=\"%F{white}\"$'\\ue0b2'\"%F{black}%K{white}\"$'$(git_prompt_info)'\" %K{white}\"\nfi\n\nif [ $(id -u) -eq 0 ]; then\n    POWERLINE_SEC1_BG=%K{red}\n    POWERLINE_SEC1_FG=%F{red}\nelse\n    POWERLINE_SEC1_BG=%K{green}\n    POWERLINE_SEC1_FG=%F{green}\nfi\nPOWERLINE_SEC1_TXT=%F{black}\nif [ \"$POWERLINE_DETECT_SSH\" != \"\" ]; then\n  if [ -n \"$SSH_CLIENT\" ]; then\n    POWERLINE_SEC1_BG=%K{red}\n    POWERLINE_SEC1_FG=%F{red}\n    POWERLINE_SEC1_TXT=%F{white}\n  fi\nfi\nPROMPT=\"$POWERLINE_SEC1_BG$POWERLINE_SEC1_TXT $POWERLINE_USER_NAME %k%f$POWERLINE_SEC1_FG%K{blue}\"$'\\ue0b0'\"%k%f%F{white}%K{blue} \"$POWERLINE_CURRENT_PATH\"%F{blue}\"$POWERLINE_GIT_INFO_LEFT\" %k\"$'\\ue0b0'\"%f \"\n\nif [ \"$POWERLINE_NO_BLANK_LINE\" = \"\" ]; then\n    PROMPT=\"\n\"$PROMPT\nfi\n\nif [ \"$POWERLINE_DISABLE_RPROMPT\" = \"\" ]; then\n    if [ \"$POWERLINE_RIGHT_A\" = \"\" ]; then\n        RPROMPT=\"$POWERLINE_GIT_INFO_RIGHT%F{white}\"$'\\ue0b2'\"%k%F{black}%K{white} $POWERLINE_RIGHT_B %f%k\"\n    elif [ \"$POWERLINE_RIGHT_B\" = \"\" ]; then\n        RPROMPT=\"$POWERLINE_GIT_INFO_RIGHT%F{white}\"$'\\ue0b2'\"%k%F{240}%K{white} $POWERLINE_RIGHT_A %f%k\"\n    else\n        RPROMPT=\"$POWERLINE_GIT_INFO_RIGHT%F{white}\"$'\\ue0b2'\"%k%F{black}%K{white} $POWERLINE_RIGHT_B %f%F{240}\"$'\\ue0b2'\"%f%k%K{240}%F{255} $POWERLINE_RIGHT_A %f%k\"\n    fi\nfi\n```\n\n然后修改 .zshrc 文件，修改 `ZSH_THEME=”mzl-powerline”`，然后在后面添加主题配置：\n\n```\nPOWERLINE_HIDE_USER_NAME=\"true\"\nPOWERLINE_HIDE_HOST_NAME=\"true\"\nPOWERLINE_DETECT_SSH=\"true\"\nPOWERLINE_GIT_CLEAN=\"✔\"\nPOWERLINE_GIT_DIRTY=\"✘\"\nPOWERLINE_GIT_ADDED=\"%F{green}✚%F{black}\"\nPOWERLINE_GIT_MODIFIED=\"%F{blue}✹%F{black}\"\nPOWERLINE_GIT_DELETED=\"%F{red}✖%F{black}\"\nPOWERLINE_GIT_UNTRACKED=\"%F{yellow}✭%F{black}\"\nPOWERLINE_GIT_RENAMED=\"➜\"\nPOWERLINE_GIT_UNMERGED=\"═\"\n```\n\n设置完后效果如图：\n![image](Mac使用oh-my-zsh和iTerm2/iterm2.png)\n\n## 参考文章\n\n1.[Mac OS X & Oh My ZSH Theme on iTerm2](https://coderwall.com/p/sun7za/mac-os-x-oh-my-zsh-theme-on-iterm2)\n2.[终极 Shell](http://macshuo.com/?p=676)\n\n\n","source":"_posts/Mac使用oh-my-zsh和iTerm2.md","raw":"---\ntitle: Mac使用oh-my-zsh和iTerm2\ndate: 2017-01-28 12:45:27\ncategories:\n- 技术\ntags:\n- Mac\n---\n\n## 前言\n\nShell 是 Linux/Unix 的一个外壳，它负责外界与 Linux 内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序。\n\nMac 的最大优势是 GUI 和命令行的完美结合，本文介绍如何使用 iTerm2 和 oh my zsh 打造 Mac 最强终端。\n\n<!--more-->\n\n## iTerm2\n\niTerm2 是一个终端模拟器，官方网站：http://www.iterm2.com/\n\n### 安装\n\n直接去 [官网](http://www.iterm2.com/) 下载就可以\n\n### 更改配色\n\niTerm2 比较好看的配色方案当属 `Solarized` ，直接在 `iTerm2 - Preferences - Profiles - Colors` 里面配置就好了，我使用的是 Solarized-Dark。\n\n### 更改 powerline 字体\n\n1.安装 Powerline\n\n下载 Powerline 工程\n\n```\n$ git clone https://github.com/powerline/fonts.git --depth=1\n```\n\n将工程下载下来后 cd 到 install.sh 文件所在目录，然后执行 `./install.sh` 指令安装所有 Powerline 字体\n\n```\n$ cd fonts\n$ ./install.sh\n```\n\n安装完成后，删除下载的工程，也可以不清，主要是为了保持电脑空间干净整洁\n\n```\n$ cd ..\n$ rm -rf fonts\n```\n\n2.设置 iTerm 2 的字体\n\n安装完字体库之后，在 `iTerm2 - Preferences - Profiles - Text` 选项卡中里的字体设置成 Powerline 的字体，我这里设置的字体是 `Meslo LG M DZ for Powerline`。\n\n\n## oh my zsh\n\nMac 终端默认使用的 Shell 是 bash，设置当前用户使用 zsh：\n\n```\n$ chsh -s /bin/zsh\n```\n\n执行命令后，根据提示输入当前用户的密码就可以了。\n\n如果以后想恢复为 bash，可执行 \n\n```\n$ chsh -s /bin/bash\n```\n\n### 安装\n\n执行下面的两个命令可以自动安装：\n\n```\n$ wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh\n```\n\n或者\n\n```\n$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh\n```\n\n安装完后会输出这样的结果：\n\n![image](Mac使用oh-my-zsh和iTerm2/oh-my-zsh.png)\n\n### 配置\n\nzsh 的配置主要集中在用户目录的 .zshrc 里，用 vim 或你喜欢的其他编辑器打开.zshrc，在最下面会发现这么一行字：\n\n    # Customize to your needs…\n\n可以在此处定义自己的环境变量和别名，当然，oh my zsh 在安装时已经自动读取当前的环境变量并进行了设置，你可以继续追加其他环境变量。\n\n```\nalias zshconfig=\"sublime ~/.zshrc\"\nalias ohmyzsh=\"sublime ~/.oh-my-zsh\"\nalias cls='clear'\nalias h='history'\nalias ll='ls -l'\nalias la='ls -a'\nalias vi='vim'\nalias sublime=\"open -a /Applications/Sublime\\ Text\\.app\"\nalias javac=\"javac -J-Dfile.encoding=utf8\"\nalias grep=\"grep --color=auto\"\nalias -s html=sublime # 在命令行直接输入后缀为 html 的文件名，会在 sublime  中打开\nalias -s rb=sublime   # 在命令行直接输入 ruby 文件，会在 sublime 中打开\nalias -s py=sublime   # 在命令行直接输入 python 文件，会用 sublime 中打开，以下类似\nalias -s js=sublime\nalias -s c=sublime\nalias -s java=sublime\nalias -s txt=sublime\nalias -s gz='tar -xzvf'\nalias -s tgz='tar -xzvf'\nalias -s zip='unzip'\nalias -s bz2='tar -xjvf'\n```\n\n### 主题\n\n为了美观，可以设置主题，在 .zshrc 里找到 ZSH_THEME，就可以设置主题了，默认主题是：ZSH_THEME=”robbyrussell”。\n\noh my zsh 提供了数十种主题，相关文件在~/.oh-my-zsh/themes 目录下，你可以随意选择，也可以自定义主题。\n\n复制一个主题文件作为自定义主题 `mzl-powerline.zsh-theme`，修改里面的内容为:\n\n```\nif [ \"$POWERLINE_DATE_FORMAT\" = \"\" ]; then\n  POWERLINE_DATE_FORMAT=%D{%Y-%m-%d}\nfi\n\nif [ \"$POWERLINE_RIGHT_B\" = \"\" ]; then\n  POWERLINE_RIGHT_B=%D{%H:%M:%S}\nelif [ \"$POWERLINE_RIGHT_B\" = \"none\" ]; then\n  POWERLINE_RIGHT_B=\"\"\nfi\n\nif [ \"$POWERLINE_RIGHT_A\" = \"mixed\" ]; then\n  POWERLINE_RIGHT_A=%(?.\"$POWERLINE_DATE_FORMAT\".%F{red}✘ %?)\nelif [ \"$POWERLINE_RIGHT_A\" = \"exit-status\" ]; then\n  POWERLINE_RIGHT_A=%(?.%F{green}✔ %?.%F{red}✘ %?)\nelif [ \"$POWERLINE_RIGHT_A\" = \"date\" ]; then\n  POWERLINE_RIGHT_A=\"$POWERLINE_DATE_FORMAT\"\nfi\n\nif [ \"$POWERLINE_HIDE_USER_NAME\" = \"\" ] && [ \"$POWERLINE_HIDE_HOST_NAME\" = \"\" ]; then\n    POWERLINE_USER_NAME=\"%n@\"'%M'\nelif [ \"$POWERLINE_HIDE_USER_NAME\" != \"\" ] && [ \"$POWERLINE_HIDE_HOST_NAME\" = \"\" ]; then\n    POWERLINE_USER_NAME=\"@%M\"\nelif [ \"$POWERLINE_HIDE_USER_NAME\" = \"\" ] && [ \"$POWERLINE_HIDE_HOST_NAME\" != \"\" ]; then\n    POWERLINE_USER_NAME=\"%n\"\nelse\n    POWERLINE_USER_NAME=\"λ\"\nfi\n\nPOWERLINE_CURRENT_PATH=\"%d\"\n\nif [ \"$POWERLINE_FULL_CURRENT_PATH\" = \"\" ]; then\n  POWERLINE_CURRENT_PATH=\"%1~\"\nfi\n\nif [ \"$POWERLINE_GIT_CLEAN\" = \"\" ]; then\n  POWERLINE_GIT_CLEAN=\"✔\"\nfi\n\nif [ \"$POWERLINE_GIT_DIRTY\" = \"\" ]; then\n  POWERLINE_GIT_DIRTY=\"✘\"\nfi\n\nif [ \"$POWERLINE_GIT_ADDED\" = \"\" ]; then\n  POWERLINE_GIT_ADDED=\"%F{green}✚%F{black}\"\nfi\n\nif [ \"$POWERLINE_GIT_MODIFIED\" = \"\" ]; then\n  POWERLINE_GIT_MODIFIED=\"%F{blue}✹%F{black}\"\nfi\n\nif [ \"$POWERLINE_GIT_DELETED\" = \"\" ]; then\n  POWERLINE_GIT_DELETED=\"%F{red}✖%F{black}\"\nfi\n\nif [ \"$POWERLINE_GIT_UNTRACKED\" = \"\" ]; then\n  POWERLINE_GIT_UNTRACKED=\"%F{yellow}✭%F{black}\"\nfi\n\nif [ \"$POWERLINE_GIT_RENAMED\" = \"\" ]; then\n  POWERLINE_GIT_RENAMED=\"➜\"\nfi\n\nif [ \"$POWERLINE_GIT_UNMERGED\" = \"\" ]; then\n  POWERLINE_GIT_UNMERGED=\"═\"\nfi\n\nZSH_THEME_GIT_PROMPT_PREFIX=\" \\ue0a0 \"\nZSH_THEME_GIT_PROMPT_SUFFIX=\"\"\nZSH_THEME_GIT_PROMPT_DIRTY=\" $POWERLINE_GIT_DIRTY\"\nZSH_THEME_GIT_PROMPT_CLEAN=\" $POWERLINE_GIT_CLEAN\"\n\nZSH_THEME_GIT_PROMPT_ADDED=\" $POWERLINE_GIT_ADDED\"\nZSH_THEME_GIT_PROMPT_MODIFIED=\" $POWERLINE_GIT_MODIFIED\"\nZSH_THEME_GIT_PROMPT_DELETED=\" $POWERLINE_GIT_DELETED\"\nZSH_THEME_GIT_PROMPT_UNTRACKED=\" $POWERLINE_GIT_UNTRACKED\"\nZSH_THEME_GIT_PROMPT_RENAMED=\" $POWERLINE_GIT_RENAMED\"\nZSH_THEME_GIT_PROMPT_UNMERGED=\" $POWERLINE_GIT_UNMERGED\"\nZSH_THEME_GIT_PROMPT_AHEAD=\" ⬆\"\nZSH_THEME_GIT_PROMPT_BEHIND=\" ⬇\"\nZSH_THEME_GIT_PROMPT_DIVERGED=\" ⬍\"\n\nif [ \"$POWERLINE_SHOW_GIT_ON_RIGHT\" = \"\" ]; then\n    if [ \"$POWERLINE_HIDE_GIT_PROMPT_STATUS\" = \"\" ]; then\n        POWERLINE_GIT_INFO_LEFT=\" %F{blue}%K{white}\"$'\\ue0b0'\"%F{white}%F{black}%K{white}\"$'$(git_prompt_info)$(git_prompt_status)%F{white}'\n    else\n        POWERLINE_GIT_INFO_LEFT=\" %F{blue}%K{white}\"$'\\ue0b0'\"%F{white}%F{black}%K{white}\"$'$(git_prompt_info)%F{white}'\n    fi\n    POWERLINE_GIT_INFO_RIGHT=\"\"\nelse\n    POWERLINE_GIT_INFO_LEFT=\"\"\n    POWERLINE_GIT_INFO_RIGHT=\"%F{white}\"$'\\ue0b2'\"%F{black}%K{white}\"$'$(git_prompt_info)'\" %K{white}\"\nfi\n\nif [ $(id -u) -eq 0 ]; then\n    POWERLINE_SEC1_BG=%K{red}\n    POWERLINE_SEC1_FG=%F{red}\nelse\n    POWERLINE_SEC1_BG=%K{green}\n    POWERLINE_SEC1_FG=%F{green}\nfi\nPOWERLINE_SEC1_TXT=%F{black}\nif [ \"$POWERLINE_DETECT_SSH\" != \"\" ]; then\n  if [ -n \"$SSH_CLIENT\" ]; then\n    POWERLINE_SEC1_BG=%K{red}\n    POWERLINE_SEC1_FG=%F{red}\n    POWERLINE_SEC1_TXT=%F{white}\n  fi\nfi\nPROMPT=\"$POWERLINE_SEC1_BG$POWERLINE_SEC1_TXT $POWERLINE_USER_NAME %k%f$POWERLINE_SEC1_FG%K{blue}\"$'\\ue0b0'\"%k%f%F{white}%K{blue} \"$POWERLINE_CURRENT_PATH\"%F{blue}\"$POWERLINE_GIT_INFO_LEFT\" %k\"$'\\ue0b0'\"%f \"\n\nif [ \"$POWERLINE_NO_BLANK_LINE\" = \"\" ]; then\n    PROMPT=\"\n\"$PROMPT\nfi\n\nif [ \"$POWERLINE_DISABLE_RPROMPT\" = \"\" ]; then\n    if [ \"$POWERLINE_RIGHT_A\" = \"\" ]; then\n        RPROMPT=\"$POWERLINE_GIT_INFO_RIGHT%F{white}\"$'\\ue0b2'\"%k%F{black}%K{white} $POWERLINE_RIGHT_B %f%k\"\n    elif [ \"$POWERLINE_RIGHT_B\" = \"\" ]; then\n        RPROMPT=\"$POWERLINE_GIT_INFO_RIGHT%F{white}\"$'\\ue0b2'\"%k%F{240}%K{white} $POWERLINE_RIGHT_A %f%k\"\n    else\n        RPROMPT=\"$POWERLINE_GIT_INFO_RIGHT%F{white}\"$'\\ue0b2'\"%k%F{black}%K{white} $POWERLINE_RIGHT_B %f%F{240}\"$'\\ue0b2'\"%f%k%K{240}%F{255} $POWERLINE_RIGHT_A %f%k\"\n    fi\nfi\n```\n\n然后修改 .zshrc 文件，修改 `ZSH_THEME=”mzl-powerline”`，然后在后面添加主题配置：\n\n```\nPOWERLINE_HIDE_USER_NAME=\"true\"\nPOWERLINE_HIDE_HOST_NAME=\"true\"\nPOWERLINE_DETECT_SSH=\"true\"\nPOWERLINE_GIT_CLEAN=\"✔\"\nPOWERLINE_GIT_DIRTY=\"✘\"\nPOWERLINE_GIT_ADDED=\"%F{green}✚%F{black}\"\nPOWERLINE_GIT_MODIFIED=\"%F{blue}✹%F{black}\"\nPOWERLINE_GIT_DELETED=\"%F{red}✖%F{black}\"\nPOWERLINE_GIT_UNTRACKED=\"%F{yellow}✭%F{black}\"\nPOWERLINE_GIT_RENAMED=\"➜\"\nPOWERLINE_GIT_UNMERGED=\"═\"\n```\n\n设置完后效果如图：\n![image](Mac使用oh-my-zsh和iTerm2/iterm2.png)\n\n## 参考文章\n\n1.[Mac OS X & Oh My ZSH Theme on iTerm2](https://coderwall.com/p/sun7za/mac-os-x-oh-my-zsh-theme-on-iterm2)\n2.[终极 Shell](http://macshuo.com/?p=676)\n\n\n","slug":"Mac使用oh-my-zsh和iTerm2","published":1,"updated":"2017-10-28T07:11:23.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9aztbp00007xox0pk5y682z","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Shell 是 Linux/Unix 的一个外壳，它负责外界与 Linux 内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序。</p>\n<p>Mac 的最大优势是 GUI 和命令行的完美结合，本文介绍如何使用 iTerm2 和 oh my zsh 打造 Mac 最强终端。</p>\n<a id=\"more\"></a>\n<h2 id=\"iTerm2\"><a href=\"#iTerm2\" class=\"headerlink\" title=\"iTerm2\"></a>iTerm2</h2><p>iTerm2 是一个终端模拟器，官方网站：<a href=\"http://www.iterm2.com/\" target=\"_blank\" rel=\"external\">http://www.iterm2.com/</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接去 <a href=\"http://www.iterm2.com/\" target=\"_blank\" rel=\"external\">官网</a> 下载就可以</p>\n<h3 id=\"更改配色\"><a href=\"#更改配色\" class=\"headerlink\" title=\"更改配色\"></a>更改配色</h3><p>iTerm2 比较好看的配色方案当属 <code>Solarized</code> ，直接在 <code>iTerm2 - Preferences - Profiles - Colors</code> 里面配置就好了，我使用的是 Solarized-Dark。</p>\n<h3 id=\"更改-powerline-字体\"><a href=\"#更改-powerline-字体\" class=\"headerlink\" title=\"更改 powerline 字体\"></a>更改 powerline 字体</h3><p>1.安装 Powerline</p>\n<p>下载 Powerline 工程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/powerline/fonts.git --depth=1</div></pre></td></tr></table></figure>\n<p>将工程下载下来后 cd 到 install.sh 文件所在目录，然后执行 <code>./install.sh</code> 指令安装所有 Powerline 字体</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd fonts</div><div class=\"line\">$ ./install.sh</div></pre></td></tr></table></figure>\n<p>安装完成后，删除下载的工程，也可以不清，主要是为了保持电脑空间干净整洁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ..</div><div class=\"line\">$ rm -rf fonts</div></pre></td></tr></table></figure>\n<p>2.设置 iTerm 2 的字体</p>\n<p>安装完字体库之后，在 <code>iTerm2 - Preferences - Profiles - Text</code> 选项卡中里的字体设置成 Powerline 的字体，我这里设置的字体是 <code>Meslo LG M DZ for Powerline</code>。</p>\n<h2 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" class=\"headerlink\" title=\"oh my zsh\"></a>oh my zsh</h2><p>Mac 终端默认使用的 Shell 是 bash，设置当前用户使用 zsh：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chsh -s /bin/zsh</div></pre></td></tr></table></figure>\n<p>执行命令后，根据提示输入当前用户的密码就可以了。</p>\n<p>如果以后想恢复为 bash，可执行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chsh -s /bin/bash</div></pre></td></tr></table></figure>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>执行下面的两个命令可以自动安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</div></pre></td></tr></table></figure>\n<p>安装完后会输出这样的结果：</p>\n<p><img src=\"/2017/01/28/Mac使用oh-my-zsh和iTerm2/oh-my-zsh.png\" alt=\"image\"></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>zsh 的配置主要集中在用户目录的 .zshrc 里，用 vim 或你喜欢的其他编辑器打开.zshrc，在最下面会发现这么一行字：</p>\n<pre><code># Customize to your needs…\n</code></pre><p>可以在此处定义自己的环境变量和别名，当然，oh my zsh 在安装时已经自动读取当前的环境变量并进行了设置，你可以继续追加其他环境变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">alias zshconfig=&quot;sublime ~/.zshrc&quot;</div><div class=\"line\">alias ohmyzsh=&quot;sublime ~/.oh-my-zsh&quot;</div><div class=\"line\">alias cls=&apos;clear&apos;</div><div class=\"line\">alias h=&apos;history&apos;</div><div class=\"line\">alias ll=&apos;ls -l&apos;</div><div class=\"line\">alias la=&apos;ls -a&apos;</div><div class=\"line\">alias vi=&apos;vim&apos;</div><div class=\"line\">alias sublime=&quot;open -a /Applications/Sublime\\ Text\\.app&quot;</div><div class=\"line\">alias javac=&quot;javac -J-Dfile.encoding=utf8&quot;</div><div class=\"line\">alias grep=&quot;grep --color=auto&quot;</div><div class=\"line\">alias -s html=sublime # 在命令行直接输入后缀为 html 的文件名，会在 sublime  中打开</div><div class=\"line\">alias -s rb=sublime   # 在命令行直接输入 ruby 文件，会在 sublime 中打开</div><div class=\"line\">alias -s py=sublime   # 在命令行直接输入 python 文件，会用 sublime 中打开，以下类似</div><div class=\"line\">alias -s js=sublime</div><div class=\"line\">alias -s c=sublime</div><div class=\"line\">alias -s java=sublime</div><div class=\"line\">alias -s txt=sublime</div><div class=\"line\">alias -s gz=&apos;tar -xzvf&apos;</div><div class=\"line\">alias -s tgz=&apos;tar -xzvf&apos;</div><div class=\"line\">alias -s zip=&apos;unzip&apos;</div><div class=\"line\">alias -s bz2=&apos;tar -xjvf&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h3><p>为了美观，可以设置主题，在 .zshrc 里找到 ZSH_THEME，就可以设置主题了，默认主题是：ZSH_THEME=”robbyrussell”。</p>\n<p>oh my zsh 提供了数十种主题，相关文件在~/.oh-my-zsh/themes 目录下，你可以随意选择，也可以自定义主题。</p>\n<p>复制一个主题文件作为自定义主题 <code>mzl-powerline.zsh-theme</code>，修改里面的内容为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\">if [ &quot;$POWERLINE_DATE_FORMAT&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_DATE_FORMAT=%D&#123;%Y-%m-%d&#125;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_RIGHT_B&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_RIGHT_B=%D&#123;%H:%M:%S&#125;</div><div class=\"line\">elif [ &quot;$POWERLINE_RIGHT_B&quot; = &quot;none&quot; ]; then</div><div class=\"line\">  POWERLINE_RIGHT_B=&quot;&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_RIGHT_A&quot; = &quot;mixed&quot; ]; then</div><div class=\"line\">  POWERLINE_RIGHT_A=%(?.&quot;$POWERLINE_DATE_FORMAT&quot;.%F&#123;red&#125;✘ %?)</div><div class=\"line\">elif [ &quot;$POWERLINE_RIGHT_A&quot; = &quot;exit-status&quot; ]; then</div><div class=\"line\">  POWERLINE_RIGHT_A=%(?.%F&#123;green&#125;✔ %?.%F&#123;red&#125;✘ %?)</div><div class=\"line\">elif [ &quot;$POWERLINE_RIGHT_A&quot; = &quot;date&quot; ]; then</div><div class=\"line\">  POWERLINE_RIGHT_A=&quot;$POWERLINE_DATE_FORMAT&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_HIDE_USER_NAME&quot; = &quot;&quot; ] &amp;&amp; [ &quot;$POWERLINE_HIDE_HOST_NAME&quot; = &quot;&quot; ]; then</div><div class=\"line\">    POWERLINE_USER_NAME=&quot;%n@&quot;&apos;%M&apos;</div><div class=\"line\">elif [ &quot;$POWERLINE_HIDE_USER_NAME&quot; != &quot;&quot; ] &amp;&amp; [ &quot;$POWERLINE_HIDE_HOST_NAME&quot; = &quot;&quot; ]; then</div><div class=\"line\">    POWERLINE_USER_NAME=&quot;@%M&quot;</div><div class=\"line\">elif [ &quot;$POWERLINE_HIDE_USER_NAME&quot; = &quot;&quot; ] &amp;&amp; [ &quot;$POWERLINE_HIDE_HOST_NAME&quot; != &quot;&quot; ]; then</div><div class=\"line\">    POWERLINE_USER_NAME=&quot;%n&quot;</div><div class=\"line\">else</div><div class=\"line\">    POWERLINE_USER_NAME=&quot;λ&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">POWERLINE_CURRENT_PATH=&quot;%d&quot;</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_FULL_CURRENT_PATH&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_CURRENT_PATH=&quot;%1~&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_CLEAN&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_CLEAN=&quot;✔&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_DIRTY&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_DIRTY=&quot;✘&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_ADDED&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_ADDED=&quot;%F&#123;green&#125;✚%F&#123;black&#125;&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_MODIFIED&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_MODIFIED=&quot;%F&#123;blue&#125;✹%F&#123;black&#125;&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_DELETED&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_DELETED=&quot;%F&#123;red&#125;✖%F&#123;black&#125;&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_UNTRACKED&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_UNTRACKED=&quot;%F&#123;yellow&#125;✭%F&#123;black&#125;&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_RENAMED&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_RENAMED=&quot;➜&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_UNMERGED&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_UNMERGED=&quot;═&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">ZSH_THEME_GIT_PROMPT_PREFIX=&quot; \\ue0a0 &quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_SUFFIX=&quot;&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_DIRTY=&quot; $POWERLINE_GIT_DIRTY&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_CLEAN=&quot; $POWERLINE_GIT_CLEAN&quot;</div><div class=\"line\"></div><div class=\"line\">ZSH_THEME_GIT_PROMPT_ADDED=&quot; $POWERLINE_GIT_ADDED&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_MODIFIED=&quot; $POWERLINE_GIT_MODIFIED&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_DELETED=&quot; $POWERLINE_GIT_DELETED&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_UNTRACKED=&quot; $POWERLINE_GIT_UNTRACKED&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_RENAMED=&quot; $POWERLINE_GIT_RENAMED&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_UNMERGED=&quot; $POWERLINE_GIT_UNMERGED&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_AHEAD=&quot; ⬆&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_BEHIND=&quot; ⬇&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_DIVERGED=&quot; ⬍&quot;</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_SHOW_GIT_ON_RIGHT&quot; = &quot;&quot; ]; then</div><div class=\"line\">    if [ &quot;$POWERLINE_HIDE_GIT_PROMPT_STATUS&quot; = &quot;&quot; ]; then</div><div class=\"line\">        POWERLINE_GIT_INFO_LEFT=&quot; %F&#123;blue&#125;%K&#123;white&#125;&quot;$&apos;\\ue0b0&apos;&quot;%F&#123;white&#125;%F&#123;black&#125;%K&#123;white&#125;&quot;$&apos;$(git_prompt_info)$(git_prompt_status)%F&#123;white&#125;&apos;</div><div class=\"line\">    else</div><div class=\"line\">        POWERLINE_GIT_INFO_LEFT=&quot; %F&#123;blue&#125;%K&#123;white&#125;&quot;$&apos;\\ue0b0&apos;&quot;%F&#123;white&#125;%F&#123;black&#125;%K&#123;white&#125;&quot;$&apos;$(git_prompt_info)%F&#123;white&#125;&apos;</div><div class=\"line\">    fi</div><div class=\"line\">    POWERLINE_GIT_INFO_RIGHT=&quot;&quot;</div><div class=\"line\">else</div><div class=\"line\">    POWERLINE_GIT_INFO_LEFT=&quot;&quot;</div><div class=\"line\">    POWERLINE_GIT_INFO_RIGHT=&quot;%F&#123;white&#125;&quot;$&apos;\\ue0b2&apos;&quot;%F&#123;black&#125;%K&#123;white&#125;&quot;$&apos;$(git_prompt_info)&apos;&quot; %K&#123;white&#125;&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ $(id -u) -eq 0 ]; then</div><div class=\"line\">    POWERLINE_SEC1_BG=%K&#123;red&#125;</div><div class=\"line\">    POWERLINE_SEC1_FG=%F&#123;red&#125;</div><div class=\"line\">else</div><div class=\"line\">    POWERLINE_SEC1_BG=%K&#123;green&#125;</div><div class=\"line\">    POWERLINE_SEC1_FG=%F&#123;green&#125;</div><div class=\"line\">fi</div><div class=\"line\">POWERLINE_SEC1_TXT=%F&#123;black&#125;</div><div class=\"line\">if [ &quot;$POWERLINE_DETECT_SSH&quot; != &quot;&quot; ]; then</div><div class=\"line\">  if [ -n &quot;$SSH_CLIENT&quot; ]; then</div><div class=\"line\">    POWERLINE_SEC1_BG=%K&#123;red&#125;</div><div class=\"line\">    POWERLINE_SEC1_FG=%F&#123;red&#125;</div><div class=\"line\">    POWERLINE_SEC1_TXT=%F&#123;white&#125;</div><div class=\"line\">  fi</div><div class=\"line\">fi</div><div class=\"line\">PROMPT=&quot;$POWERLINE_SEC1_BG$POWERLINE_SEC1_TXT $POWERLINE_USER_NAME %k%f$POWERLINE_SEC1_FG%K&#123;blue&#125;&quot;$&apos;\\ue0b0&apos;&quot;%k%f%F&#123;white&#125;%K&#123;blue&#125; &quot;$POWERLINE_CURRENT_PATH&quot;%F&#123;blue&#125;&quot;$POWERLINE_GIT_INFO_LEFT&quot; %k&quot;$&apos;\\ue0b0&apos;&quot;%f &quot;</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_NO_BLANK_LINE&quot; = &quot;&quot; ]; then</div><div class=\"line\">    PROMPT=&quot;</div><div class=\"line\">&quot;$PROMPT</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_DISABLE_RPROMPT&quot; = &quot;&quot; ]; then</div><div class=\"line\">    if [ &quot;$POWERLINE_RIGHT_A&quot; = &quot;&quot; ]; then</div><div class=\"line\">        RPROMPT=&quot;$POWERLINE_GIT_INFO_RIGHT%F&#123;white&#125;&quot;$&apos;\\ue0b2&apos;&quot;%k%F&#123;black&#125;%K&#123;white&#125; $POWERLINE_RIGHT_B %f%k&quot;</div><div class=\"line\">    elif [ &quot;$POWERLINE_RIGHT_B&quot; = &quot;&quot; ]; then</div><div class=\"line\">        RPROMPT=&quot;$POWERLINE_GIT_INFO_RIGHT%F&#123;white&#125;&quot;$&apos;\\ue0b2&apos;&quot;%k%F&#123;240&#125;%K&#123;white&#125; $POWERLINE_RIGHT_A %f%k&quot;</div><div class=\"line\">    else</div><div class=\"line\">        RPROMPT=&quot;$POWERLINE_GIT_INFO_RIGHT%F&#123;white&#125;&quot;$&apos;\\ue0b2&apos;&quot;%k%F&#123;black&#125;%K&#123;white&#125; $POWERLINE_RIGHT_B %f%F&#123;240&#125;&quot;$&apos;\\ue0b2&apos;&quot;%f%k%K&#123;240&#125;%F&#123;255&#125; $POWERLINE_RIGHT_A %f%k&quot;</div><div class=\"line\">    fi</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>然后修改 .zshrc 文件，修改 <code>ZSH_THEME=”mzl-powerline”</code>，然后在后面添加主题配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">POWERLINE_HIDE_USER_NAME=&quot;true&quot;</div><div class=\"line\">POWERLINE_HIDE_HOST_NAME=&quot;true&quot;</div><div class=\"line\">POWERLINE_DETECT_SSH=&quot;true&quot;</div><div class=\"line\">POWERLINE_GIT_CLEAN=&quot;✔&quot;</div><div class=\"line\">POWERLINE_GIT_DIRTY=&quot;✘&quot;</div><div class=\"line\">POWERLINE_GIT_ADDED=&quot;%F&#123;green&#125;✚%F&#123;black&#125;&quot;</div><div class=\"line\">POWERLINE_GIT_MODIFIED=&quot;%F&#123;blue&#125;✹%F&#123;black&#125;&quot;</div><div class=\"line\">POWERLINE_GIT_DELETED=&quot;%F&#123;red&#125;✖%F&#123;black&#125;&quot;</div><div class=\"line\">POWERLINE_GIT_UNTRACKED=&quot;%F&#123;yellow&#125;✭%F&#123;black&#125;&quot;</div><div class=\"line\">POWERLINE_GIT_RENAMED=&quot;➜&quot;</div><div class=\"line\">POWERLINE_GIT_UNMERGED=&quot;═&quot;</div></pre></td></tr></table></figure>\n<p>设置完后效果如图：<br><img src=\"/2017/01/28/Mac使用oh-my-zsh和iTerm2/iterm2.png\" alt=\"image\"></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p>1.<a href=\"https://coderwall.com/p/sun7za/mac-os-x-oh-my-zsh-theme-on-iterm2\" target=\"_blank\" rel=\"external\">Mac OS X &amp; Oh My ZSH Theme on iTerm2</a><br>2.<a href=\"http://macshuo.com/?p=676\" target=\"_blank\" rel=\"external\">终极 Shell</a></p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Shell 是 Linux/Unix 的一个外壳，它负责外界与 Linux 内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序。</p>\n<p>Mac 的最大优势是 GUI 和命令行的完美结合，本文介绍如何使用 iTerm2 和 oh my zsh 打造 Mac 最强终端。</p>","more":"<h2 id=\"iTerm2\"><a href=\"#iTerm2\" class=\"headerlink\" title=\"iTerm2\"></a>iTerm2</h2><p>iTerm2 是一个终端模拟器，官方网站：<a href=\"http://www.iterm2.com/\">http://www.iterm2.com/</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接去 <a href=\"http://www.iterm2.com/\">官网</a> 下载就可以</p>\n<h3 id=\"更改配色\"><a href=\"#更改配色\" class=\"headerlink\" title=\"更改配色\"></a>更改配色</h3><p>iTerm2 比较好看的配色方案当属 <code>Solarized</code> ，直接在 <code>iTerm2 - Preferences - Profiles - Colors</code> 里面配置就好了，我使用的是 Solarized-Dark。</p>\n<h3 id=\"更改-powerline-字体\"><a href=\"#更改-powerline-字体\" class=\"headerlink\" title=\"更改 powerline 字体\"></a>更改 powerline 字体</h3><p>1.安装 Powerline</p>\n<p>下载 Powerline 工程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/powerline/fonts.git --depth=1</div></pre></td></tr></table></figure>\n<p>将工程下载下来后 cd 到 install.sh 文件所在目录，然后执行 <code>./install.sh</code> 指令安装所有 Powerline 字体</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd fonts</div><div class=\"line\">$ ./install.sh</div></pre></td></tr></table></figure>\n<p>安装完成后，删除下载的工程，也可以不清，主要是为了保持电脑空间干净整洁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ..</div><div class=\"line\">$ rm -rf fonts</div></pre></td></tr></table></figure>\n<p>2.设置 iTerm 2 的字体</p>\n<p>安装完字体库之后，在 <code>iTerm2 - Preferences - Profiles - Text</code> 选项卡中里的字体设置成 Powerline 的字体，我这里设置的字体是 <code>Meslo LG M DZ for Powerline</code>。</p>\n<h2 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" class=\"headerlink\" title=\"oh my zsh\"></a>oh my zsh</h2><p>Mac 终端默认使用的 Shell 是 bash，设置当前用户使用 zsh：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chsh -s /bin/zsh</div></pre></td></tr></table></figure>\n<p>执行命令后，根据提示输入当前用户的密码就可以了。</p>\n<p>如果以后想恢复为 bash，可执行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chsh -s /bin/bash</div></pre></td></tr></table></figure>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>执行下面的两个命令可以自动安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</div></pre></td></tr></table></figure>\n<p>安装完后会输出这样的结果：</p>\n<p><img src=\"/2017/01/28/Mac使用oh-my-zsh和iTerm2/oh-my-zsh.png\" alt=\"image\"></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>zsh 的配置主要集中在用户目录的 .zshrc 里，用 vim 或你喜欢的其他编辑器打开.zshrc，在最下面会发现这么一行字：</p>\n<pre><code># Customize to your needs…\n</code></pre><p>可以在此处定义自己的环境变量和别名，当然，oh my zsh 在安装时已经自动读取当前的环境变量并进行了设置，你可以继续追加其他环境变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">alias zshconfig=&quot;sublime ~/.zshrc&quot;</div><div class=\"line\">alias ohmyzsh=&quot;sublime ~/.oh-my-zsh&quot;</div><div class=\"line\">alias cls=&apos;clear&apos;</div><div class=\"line\">alias h=&apos;history&apos;</div><div class=\"line\">alias ll=&apos;ls -l&apos;</div><div class=\"line\">alias la=&apos;ls -a&apos;</div><div class=\"line\">alias vi=&apos;vim&apos;</div><div class=\"line\">alias sublime=&quot;open -a /Applications/Sublime\\ Text\\.app&quot;</div><div class=\"line\">alias javac=&quot;javac -J-Dfile.encoding=utf8&quot;</div><div class=\"line\">alias grep=&quot;grep --color=auto&quot;</div><div class=\"line\">alias -s html=sublime # 在命令行直接输入后缀为 html 的文件名，会在 sublime  中打开</div><div class=\"line\">alias -s rb=sublime   # 在命令行直接输入 ruby 文件，会在 sublime 中打开</div><div class=\"line\">alias -s py=sublime   # 在命令行直接输入 python 文件，会用 sublime 中打开，以下类似</div><div class=\"line\">alias -s js=sublime</div><div class=\"line\">alias -s c=sublime</div><div class=\"line\">alias -s java=sublime</div><div class=\"line\">alias -s txt=sublime</div><div class=\"line\">alias -s gz=&apos;tar -xzvf&apos;</div><div class=\"line\">alias -s tgz=&apos;tar -xzvf&apos;</div><div class=\"line\">alias -s zip=&apos;unzip&apos;</div><div class=\"line\">alias -s bz2=&apos;tar -xjvf&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h3><p>为了美观，可以设置主题，在 .zshrc 里找到 ZSH_THEME，就可以设置主题了，默认主题是：ZSH_THEME=”robbyrussell”。</p>\n<p>oh my zsh 提供了数十种主题，相关文件在~/.oh-my-zsh/themes 目录下，你可以随意选择，也可以自定义主题。</p>\n<p>复制一个主题文件作为自定义主题 <code>mzl-powerline.zsh-theme</code>，修改里面的内容为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\">if [ &quot;$POWERLINE_DATE_FORMAT&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_DATE_FORMAT=%D&#123;%Y-%m-%d&#125;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_RIGHT_B&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_RIGHT_B=%D&#123;%H:%M:%S&#125;</div><div class=\"line\">elif [ &quot;$POWERLINE_RIGHT_B&quot; = &quot;none&quot; ]; then</div><div class=\"line\">  POWERLINE_RIGHT_B=&quot;&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_RIGHT_A&quot; = &quot;mixed&quot; ]; then</div><div class=\"line\">  POWERLINE_RIGHT_A=%(?.&quot;$POWERLINE_DATE_FORMAT&quot;.%F&#123;red&#125;✘ %?)</div><div class=\"line\">elif [ &quot;$POWERLINE_RIGHT_A&quot; = &quot;exit-status&quot; ]; then</div><div class=\"line\">  POWERLINE_RIGHT_A=%(?.%F&#123;green&#125;✔ %?.%F&#123;red&#125;✘ %?)</div><div class=\"line\">elif [ &quot;$POWERLINE_RIGHT_A&quot; = &quot;date&quot; ]; then</div><div class=\"line\">  POWERLINE_RIGHT_A=&quot;$POWERLINE_DATE_FORMAT&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_HIDE_USER_NAME&quot; = &quot;&quot; ] &amp;&amp; [ &quot;$POWERLINE_HIDE_HOST_NAME&quot; = &quot;&quot; ]; then</div><div class=\"line\">    POWERLINE_USER_NAME=&quot;%n@&quot;&apos;%M&apos;</div><div class=\"line\">elif [ &quot;$POWERLINE_HIDE_USER_NAME&quot; != &quot;&quot; ] &amp;&amp; [ &quot;$POWERLINE_HIDE_HOST_NAME&quot; = &quot;&quot; ]; then</div><div class=\"line\">    POWERLINE_USER_NAME=&quot;@%M&quot;</div><div class=\"line\">elif [ &quot;$POWERLINE_HIDE_USER_NAME&quot; = &quot;&quot; ] &amp;&amp; [ &quot;$POWERLINE_HIDE_HOST_NAME&quot; != &quot;&quot; ]; then</div><div class=\"line\">    POWERLINE_USER_NAME=&quot;%n&quot;</div><div class=\"line\">else</div><div class=\"line\">    POWERLINE_USER_NAME=&quot;λ&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">POWERLINE_CURRENT_PATH=&quot;%d&quot;</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_FULL_CURRENT_PATH&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_CURRENT_PATH=&quot;%1~&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_CLEAN&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_CLEAN=&quot;✔&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_DIRTY&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_DIRTY=&quot;✘&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_ADDED&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_ADDED=&quot;%F&#123;green&#125;✚%F&#123;black&#125;&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_MODIFIED&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_MODIFIED=&quot;%F&#123;blue&#125;✹%F&#123;black&#125;&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_DELETED&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_DELETED=&quot;%F&#123;red&#125;✖%F&#123;black&#125;&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_UNTRACKED&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_UNTRACKED=&quot;%F&#123;yellow&#125;✭%F&#123;black&#125;&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_RENAMED&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_RENAMED=&quot;➜&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_GIT_UNMERGED&quot; = &quot;&quot; ]; then</div><div class=\"line\">  POWERLINE_GIT_UNMERGED=&quot;═&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">ZSH_THEME_GIT_PROMPT_PREFIX=&quot; \\ue0a0 &quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_SUFFIX=&quot;&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_DIRTY=&quot; $POWERLINE_GIT_DIRTY&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_CLEAN=&quot; $POWERLINE_GIT_CLEAN&quot;</div><div class=\"line\"></div><div class=\"line\">ZSH_THEME_GIT_PROMPT_ADDED=&quot; $POWERLINE_GIT_ADDED&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_MODIFIED=&quot; $POWERLINE_GIT_MODIFIED&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_DELETED=&quot; $POWERLINE_GIT_DELETED&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_UNTRACKED=&quot; $POWERLINE_GIT_UNTRACKED&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_RENAMED=&quot; $POWERLINE_GIT_RENAMED&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_UNMERGED=&quot; $POWERLINE_GIT_UNMERGED&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_AHEAD=&quot; ⬆&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_BEHIND=&quot; ⬇&quot;</div><div class=\"line\">ZSH_THEME_GIT_PROMPT_DIVERGED=&quot; ⬍&quot;</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_SHOW_GIT_ON_RIGHT&quot; = &quot;&quot; ]; then</div><div class=\"line\">    if [ &quot;$POWERLINE_HIDE_GIT_PROMPT_STATUS&quot; = &quot;&quot; ]; then</div><div class=\"line\">        POWERLINE_GIT_INFO_LEFT=&quot; %F&#123;blue&#125;%K&#123;white&#125;&quot;$&apos;\\ue0b0&apos;&quot;%F&#123;white&#125;%F&#123;black&#125;%K&#123;white&#125;&quot;$&apos;$(git_prompt_info)$(git_prompt_status)%F&#123;white&#125;&apos;</div><div class=\"line\">    else</div><div class=\"line\">        POWERLINE_GIT_INFO_LEFT=&quot; %F&#123;blue&#125;%K&#123;white&#125;&quot;$&apos;\\ue0b0&apos;&quot;%F&#123;white&#125;%F&#123;black&#125;%K&#123;white&#125;&quot;$&apos;$(git_prompt_info)%F&#123;white&#125;&apos;</div><div class=\"line\">    fi</div><div class=\"line\">    POWERLINE_GIT_INFO_RIGHT=&quot;&quot;</div><div class=\"line\">else</div><div class=\"line\">    POWERLINE_GIT_INFO_LEFT=&quot;&quot;</div><div class=\"line\">    POWERLINE_GIT_INFO_RIGHT=&quot;%F&#123;white&#125;&quot;$&apos;\\ue0b2&apos;&quot;%F&#123;black&#125;%K&#123;white&#125;&quot;$&apos;$(git_prompt_info)&apos;&quot; %K&#123;white&#125;&quot;</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ $(id -u) -eq 0 ]; then</div><div class=\"line\">    POWERLINE_SEC1_BG=%K&#123;red&#125;</div><div class=\"line\">    POWERLINE_SEC1_FG=%F&#123;red&#125;</div><div class=\"line\">else</div><div class=\"line\">    POWERLINE_SEC1_BG=%K&#123;green&#125;</div><div class=\"line\">    POWERLINE_SEC1_FG=%F&#123;green&#125;</div><div class=\"line\">fi</div><div class=\"line\">POWERLINE_SEC1_TXT=%F&#123;black&#125;</div><div class=\"line\">if [ &quot;$POWERLINE_DETECT_SSH&quot; != &quot;&quot; ]; then</div><div class=\"line\">  if [ -n &quot;$SSH_CLIENT&quot; ]; then</div><div class=\"line\">    POWERLINE_SEC1_BG=%K&#123;red&#125;</div><div class=\"line\">    POWERLINE_SEC1_FG=%F&#123;red&#125;</div><div class=\"line\">    POWERLINE_SEC1_TXT=%F&#123;white&#125;</div><div class=\"line\">  fi</div><div class=\"line\">fi</div><div class=\"line\">PROMPT=&quot;$POWERLINE_SEC1_BG$POWERLINE_SEC1_TXT $POWERLINE_USER_NAME %k%f$POWERLINE_SEC1_FG%K&#123;blue&#125;&quot;$&apos;\\ue0b0&apos;&quot;%k%f%F&#123;white&#125;%K&#123;blue&#125; &quot;$POWERLINE_CURRENT_PATH&quot;%F&#123;blue&#125;&quot;$POWERLINE_GIT_INFO_LEFT&quot; %k&quot;$&apos;\\ue0b0&apos;&quot;%f &quot;</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_NO_BLANK_LINE&quot; = &quot;&quot; ]; then</div><div class=\"line\">    PROMPT=&quot;</div><div class=\"line\">&quot;$PROMPT</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [ &quot;$POWERLINE_DISABLE_RPROMPT&quot; = &quot;&quot; ]; then</div><div class=\"line\">    if [ &quot;$POWERLINE_RIGHT_A&quot; = &quot;&quot; ]; then</div><div class=\"line\">        RPROMPT=&quot;$POWERLINE_GIT_INFO_RIGHT%F&#123;white&#125;&quot;$&apos;\\ue0b2&apos;&quot;%k%F&#123;black&#125;%K&#123;white&#125; $POWERLINE_RIGHT_B %f%k&quot;</div><div class=\"line\">    elif [ &quot;$POWERLINE_RIGHT_B&quot; = &quot;&quot; ]; then</div><div class=\"line\">        RPROMPT=&quot;$POWERLINE_GIT_INFO_RIGHT%F&#123;white&#125;&quot;$&apos;\\ue0b2&apos;&quot;%k%F&#123;240&#125;%K&#123;white&#125; $POWERLINE_RIGHT_A %f%k&quot;</div><div class=\"line\">    else</div><div class=\"line\">        RPROMPT=&quot;$POWERLINE_GIT_INFO_RIGHT%F&#123;white&#125;&quot;$&apos;\\ue0b2&apos;&quot;%k%F&#123;black&#125;%K&#123;white&#125; $POWERLINE_RIGHT_B %f%F&#123;240&#125;&quot;$&apos;\\ue0b2&apos;&quot;%f%k%K&#123;240&#125;%F&#123;255&#125; $POWERLINE_RIGHT_A %f%k&quot;</div><div class=\"line\">    fi</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>然后修改 .zshrc 文件，修改 <code>ZSH_THEME=”mzl-powerline”</code>，然后在后面添加主题配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">POWERLINE_HIDE_USER_NAME=&quot;true&quot;</div><div class=\"line\">POWERLINE_HIDE_HOST_NAME=&quot;true&quot;</div><div class=\"line\">POWERLINE_DETECT_SSH=&quot;true&quot;</div><div class=\"line\">POWERLINE_GIT_CLEAN=&quot;✔&quot;</div><div class=\"line\">POWERLINE_GIT_DIRTY=&quot;✘&quot;</div><div class=\"line\">POWERLINE_GIT_ADDED=&quot;%F&#123;green&#125;✚%F&#123;black&#125;&quot;</div><div class=\"line\">POWERLINE_GIT_MODIFIED=&quot;%F&#123;blue&#125;✹%F&#123;black&#125;&quot;</div><div class=\"line\">POWERLINE_GIT_DELETED=&quot;%F&#123;red&#125;✖%F&#123;black&#125;&quot;</div><div class=\"line\">POWERLINE_GIT_UNTRACKED=&quot;%F&#123;yellow&#125;✭%F&#123;black&#125;&quot;</div><div class=\"line\">POWERLINE_GIT_RENAMED=&quot;➜&quot;</div><div class=\"line\">POWERLINE_GIT_UNMERGED=&quot;═&quot;</div></pre></td></tr></table></figure>\n<p>设置完后效果如图：<br><img src=\"/2017/01/28/Mac使用oh-my-zsh和iTerm2/iterm2.png\" alt=\"image\"></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p>1.<a href=\"https://coderwall.com/p/sun7za/mac-os-x-oh-my-zsh-theme-on-iterm2\">Mac OS X &amp; Oh My ZSH Theme on iTerm2</a><br>2.<a href=\"http://macshuo.com/?p=676\">终极 Shell</a></p>"},{"title":"React Native入门（1）—— 组件及生命周期","date":"2016-07-10T03:54:34.000Z","_content":"\n## 前言\n\n作为一个 iOS 原生应用的开发者，刚开始接触 React Native，先来学习下 React Native 中的组件结构和生命周期，理解一个 React Native 组件如何进行展示，如何进行开发。\n\n<!--more-->\n\n## 组件的构成\n在 React Native 中，所有展示的界面，都可以看做是一个组件（Component），每一个组件根据功能和逻辑的复杂程度，又都是由许多小的组件拼成，每个小的组件也都有自己对应的逻辑，不过他们都遵循同样的代码结构。\n\n先来看一个完整的 js 文件中的代码，然后我们以它为例来分析其中的代码结构：\n\n```\n'use strict';\n\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View\n} from 'react-native';\n\nclass AwesomeProject extends Component {\n  render() {\n    return (\n      <View style={{alignItems: 'center'}}>\n        <Text style={styles.welcome}>\n          Welcome to React Native!\n        </Text>\n        <Text style={styles.instructions}>\n          To get started, edit index.ios.js\n        </Text>\n        <Text style={styles.instructions}>\n          Press Cmd+R to reload,{'\\n'}\n          Cmd+D or shake for dev menu\n        </Text>\n      </View>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n\nAppRegistry.registerComponent('AwesomeProject', () => AwesomeProject);\n```\n\n这段代码中组件的代码结构：\n\n### 包和组件引用\n\n```\n'use strict';\n\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View\n} from 'react-native';\n```\n\n`'use strict'` 表示开启了 Strict Mode，Strict Mode 使 JavaScript 的错误处理可以有所提高，一些语言缺陷也可以避免。\n\n`import {} from ''` 表示将 react、react-native 包加载进来，{ } 中的内容是引用来自 React Native 官方的组件、API 以及第三方或开发者项目中构建的组件，形式为该组件或 API 的 React 类名。import 是 ES6 的语法，这个概念等同于 iOS 或者 Swift 中的 “链接库” 或者 “导入库”。\n\n### 组件类的声明\n\n```\nclass AwesomeProject extends Component {\n  render() {\n    return (\n      ...\n    );\n  }\n}\n```\n\n这部分用于构造组件的状态和具体的展示结构，class 是在 ES6 中被引入的，利用 `class xxx extends Component {...}` 来实例化一个 React Native 组件对象，{ } 中的内容会包含组件的几个重要的生命周期（见下文），这部分是一个组件必不可少的地方，没有这些内容，就无法构成一个组件。\n\n### 组件样式的声明\n\n```\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n```\n\n使用 `StyleSheet.create({...})` 来实例化 React Native 样式对象，{ } 中的内容为 JSON 形式的 React Native 样式，来源于 CSS3，这些声明的样式可以在上面构建组件时（JSX 代码中）使用。\n\n### 其他\n\n```\nAppRegistry.registerComponent('AwesomeProject', () => AwesomeProject);\n```\n\nAppRegistry 定义了 App 的入口，并提供了根组件。这部分只有在作为入口的 js 文件中才会有。\n\n```\nmodule.exports = HelloWorld;\n```\n\n这里导出了 HelloWorld 类，可以在外部 js 文件中引入 HelloWorld 组件。这部分只有在非入口js 文件中才会有。\n\n## 组件的生命周期\n\n一个 React Native 组件的生命周期分为实例化、存在期和销毁期三个阶段，如下图。\n\n第一阶段：实例化期，是组件第一次绘制阶段，如图中的上面的虚线框内，在这个阶段完成了组件的加载和初始化；\n\n第二阶段：存在期，是组件正在运行和交互阶段，如图中的左下的虚线框内，在这个阶段组件可以处理用户交互，或者接收事件更新界面；\n\n第三阶段：销毁期，是组件被卸载消亡的阶段，如图中的右下的虚线框内，在这个阶段做一些组件的清理工作。\n\n![logo](ReactNative入门（1）/component-lifecycle.jpg)\n\n下面具体分析组件生命周期的各个阶段：\n\n### 实例化阶段\n\n实例化期分为5个阶段，每个阶段以一个函数来进行控制：\n\n**getDefaultProps**\n\n在组件创建的时候，会先调用 `getDefaultProps()`。由于这个函数在整个生命周期中只会调用一次，所以通常在这里会初始化组件的一些默认属性，将固定的内容放在这个过程中进行初始化和赋值。\n\n**getInitialState**\n\n在组件被创建后并加载的时候，会先调用 `getInitialState()` 来初始化组件的状态。该函数在整个生命周期中只会调用一次。\n\n**componentWillMount**\n\n在组件初始化后准备加载组件的时候，会先调用 `componentWillMount()`，在第一次绘制 `render()` 之前调用，也是渲染一个组件前最后一次修改 state 的机会。这个函数在整个生命周期中也只被调用一次，可以在这里做一些业务初始化操作，也可以设置组件状态。\n\n**render**\n\n这是一个组件必须有的方法，形式为一个有返回值的函数，会返回一段 JSX 或其他 React 组件来构成 DOM，表示该组件的结构和布局，和 Android 的 XML 布局类似。在 `render()` 函数中，只能通过 this.state 和 this.props 来访问在之前函数中初始化的数据值。\n\n**componentDidMount**\n\n在组件第一次绘制之后，会调用 `componentDidMount()`，表示组件已经加载完成，这个函数在整个生命周期中也只被调用一次。\n\n从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout、setInterval，或者发起网络请求，放在这个函数里进行，来保证不会出现UI上的错误。这个函数之后，就进入了稳定运行状态，等待事件触发。\n\n>注：先调用子组件的 componentDidMount()，然后才调用父组件的。\n\n### 运行阶段\n\n运行期主要是用来处理与用户的交互：\n\n**componentWillReceiveProps**\n\n如果父元素对组件的属性（props）进行了修改，组件收到新的属性时，就会调用 `componentWillReceiveProps(object nextProps)`，参数 nextProps 是即将被设置的属性，可以通过 `this.props` 来获取旧的属性。\n\n在这个回调函数里面，你可以根据属性的变化，通过调用 `this.setState()` 来更新组件状态，这里调用更新状态是安全的，并不会触发额外的 render() 调用。如下：\n\n```\ncomponentWillReceiveProps: function(nextProps) {  \n  this.setState({\n    likesIncreasing: nextProps.likeCount > this.props.likeCount\n  });\n}\n```\n\n**shouldComponentUpdate**\n\n当组件接收到新的属性或者状态改变时，都会触发调用 `boolean shouldComponentUpdate(object nextProps, object nextState)`，参数 nextProps 是即将被设置的属性，同 `componentWillReceiveProps(...)` 一样，nextState 是即将更新的状态值。这个函数返回一个布尔值，来决定是否需要更新组件进行渲染，返回 true 表示需要更新，继续走后面的更新流程。否则不更新，直接进入等待状态。\n\n**componentWillUpdate**\n\n如果组件状态或者属性改变，并且上面的 `shouldComponentUpdate(...)` 返回为 true 时，会在开始渲染组件之前调用 `componentWillUpdate(object nextProps, object nextState)`，参数同 `shouldComponentUpdate(...)` 。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。接着就会调用 render() 来更新界面了。\n\n**componentDidUpdate**\n\n调用了 `render()` 更新完成界面之后，会调用 `componentDidUpdate(object prevProps, object prevState)`，此函数的输入参数变成了 prevProps 和 prevState，因为到这里已经完成了属性和状态的更新了。\n\n### 销毁阶段\n\n**componentWillUnmount**\n\n当组件要被从界面上移除的时候，就会调用 `componentWillUnmount()`，在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求、点击事件Listener等。\n\n## 总结\n\n组件的生命周期分成三个状态：\n\n\tMounting：  已插入真实 DOM\n\tUpdating：  正在被重新渲染\n\tUnmounting：已移出真实 DOM\n\t\nReact 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数：\n\n\tcomponentWillMount()\n\tcomponentDidMount()\n\tcomponentWillUpdate(object nextProps, object nextState)\n\tcomponentDidUpdate(object prevProps, object prevState)\n\tcomponentWillUnmount()\n\n此外，React 还提供两种特殊状态的处理函数：\n\n\tcomponentWillReceiveProps(object nextProps)：组件收到新的参数时调用\n\tshouldComponentUpdate(object nextProps, object nextState)：判断是否重新渲染时调用\n\n两个初始化函数：\n\n\tgetDefaultProps()：进行初始化和赋值\n\tgetInitialState()：初始化组件的状态\n\n渲染函数：\n\n\trender()\n\n\n参考博文：[React Native 中组件的生命周期](http://www.race604.com/react-native-component-lifecycle/)\n\n","source":"_posts/ReactNative入门（1）.md","raw":"---\ntitle: React Native入门（1）—— 组件及生命周期\ndate: 2016-07-10 11:54:34\ncategories:\n- 技术\ntags: \n- React Native\n---\n\n## 前言\n\n作为一个 iOS 原生应用的开发者，刚开始接触 React Native，先来学习下 React Native 中的组件结构和生命周期，理解一个 React Native 组件如何进行展示，如何进行开发。\n\n<!--more-->\n\n## 组件的构成\n在 React Native 中，所有展示的界面，都可以看做是一个组件（Component），每一个组件根据功能和逻辑的复杂程度，又都是由许多小的组件拼成，每个小的组件也都有自己对应的逻辑，不过他们都遵循同样的代码结构。\n\n先来看一个完整的 js 文件中的代码，然后我们以它为例来分析其中的代码结构：\n\n```\n'use strict';\n\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View\n} from 'react-native';\n\nclass AwesomeProject extends Component {\n  render() {\n    return (\n      <View style={{alignItems: 'center'}}>\n        <Text style={styles.welcome}>\n          Welcome to React Native!\n        </Text>\n        <Text style={styles.instructions}>\n          To get started, edit index.ios.js\n        </Text>\n        <Text style={styles.instructions}>\n          Press Cmd+R to reload,{'\\n'}\n          Cmd+D or shake for dev menu\n        </Text>\n      </View>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n\nAppRegistry.registerComponent('AwesomeProject', () => AwesomeProject);\n```\n\n这段代码中组件的代码结构：\n\n### 包和组件引用\n\n```\n'use strict';\n\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View\n} from 'react-native';\n```\n\n`'use strict'` 表示开启了 Strict Mode，Strict Mode 使 JavaScript 的错误处理可以有所提高，一些语言缺陷也可以避免。\n\n`import {} from ''` 表示将 react、react-native 包加载进来，{ } 中的内容是引用来自 React Native 官方的组件、API 以及第三方或开发者项目中构建的组件，形式为该组件或 API 的 React 类名。import 是 ES6 的语法，这个概念等同于 iOS 或者 Swift 中的 “链接库” 或者 “导入库”。\n\n### 组件类的声明\n\n```\nclass AwesomeProject extends Component {\n  render() {\n    return (\n      ...\n    );\n  }\n}\n```\n\n这部分用于构造组件的状态和具体的展示结构，class 是在 ES6 中被引入的，利用 `class xxx extends Component {...}` 来实例化一个 React Native 组件对象，{ } 中的内容会包含组件的几个重要的生命周期（见下文），这部分是一个组件必不可少的地方，没有这些内容，就无法构成一个组件。\n\n### 组件样式的声明\n\n```\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n```\n\n使用 `StyleSheet.create({...})` 来实例化 React Native 样式对象，{ } 中的内容为 JSON 形式的 React Native 样式，来源于 CSS3，这些声明的样式可以在上面构建组件时（JSX 代码中）使用。\n\n### 其他\n\n```\nAppRegistry.registerComponent('AwesomeProject', () => AwesomeProject);\n```\n\nAppRegistry 定义了 App 的入口，并提供了根组件。这部分只有在作为入口的 js 文件中才会有。\n\n```\nmodule.exports = HelloWorld;\n```\n\n这里导出了 HelloWorld 类，可以在外部 js 文件中引入 HelloWorld 组件。这部分只有在非入口js 文件中才会有。\n\n## 组件的生命周期\n\n一个 React Native 组件的生命周期分为实例化、存在期和销毁期三个阶段，如下图。\n\n第一阶段：实例化期，是组件第一次绘制阶段，如图中的上面的虚线框内，在这个阶段完成了组件的加载和初始化；\n\n第二阶段：存在期，是组件正在运行和交互阶段，如图中的左下的虚线框内，在这个阶段组件可以处理用户交互，或者接收事件更新界面；\n\n第三阶段：销毁期，是组件被卸载消亡的阶段，如图中的右下的虚线框内，在这个阶段做一些组件的清理工作。\n\n![logo](ReactNative入门（1）/component-lifecycle.jpg)\n\n下面具体分析组件生命周期的各个阶段：\n\n### 实例化阶段\n\n实例化期分为5个阶段，每个阶段以一个函数来进行控制：\n\n**getDefaultProps**\n\n在组件创建的时候，会先调用 `getDefaultProps()`。由于这个函数在整个生命周期中只会调用一次，所以通常在这里会初始化组件的一些默认属性，将固定的内容放在这个过程中进行初始化和赋值。\n\n**getInitialState**\n\n在组件被创建后并加载的时候，会先调用 `getInitialState()` 来初始化组件的状态。该函数在整个生命周期中只会调用一次。\n\n**componentWillMount**\n\n在组件初始化后准备加载组件的时候，会先调用 `componentWillMount()`，在第一次绘制 `render()` 之前调用，也是渲染一个组件前最后一次修改 state 的机会。这个函数在整个生命周期中也只被调用一次，可以在这里做一些业务初始化操作，也可以设置组件状态。\n\n**render**\n\n这是一个组件必须有的方法，形式为一个有返回值的函数，会返回一段 JSX 或其他 React 组件来构成 DOM，表示该组件的结构和布局，和 Android 的 XML 布局类似。在 `render()` 函数中，只能通过 this.state 和 this.props 来访问在之前函数中初始化的数据值。\n\n**componentDidMount**\n\n在组件第一次绘制之后，会调用 `componentDidMount()`，表示组件已经加载完成，这个函数在整个生命周期中也只被调用一次。\n\n从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout、setInterval，或者发起网络请求，放在这个函数里进行，来保证不会出现UI上的错误。这个函数之后，就进入了稳定运行状态，等待事件触发。\n\n>注：先调用子组件的 componentDidMount()，然后才调用父组件的。\n\n### 运行阶段\n\n运行期主要是用来处理与用户的交互：\n\n**componentWillReceiveProps**\n\n如果父元素对组件的属性（props）进行了修改，组件收到新的属性时，就会调用 `componentWillReceiveProps(object nextProps)`，参数 nextProps 是即将被设置的属性，可以通过 `this.props` 来获取旧的属性。\n\n在这个回调函数里面，你可以根据属性的变化，通过调用 `this.setState()` 来更新组件状态，这里调用更新状态是安全的，并不会触发额外的 render() 调用。如下：\n\n```\ncomponentWillReceiveProps: function(nextProps) {  \n  this.setState({\n    likesIncreasing: nextProps.likeCount > this.props.likeCount\n  });\n}\n```\n\n**shouldComponentUpdate**\n\n当组件接收到新的属性或者状态改变时，都会触发调用 `boolean shouldComponentUpdate(object nextProps, object nextState)`，参数 nextProps 是即将被设置的属性，同 `componentWillReceiveProps(...)` 一样，nextState 是即将更新的状态值。这个函数返回一个布尔值，来决定是否需要更新组件进行渲染，返回 true 表示需要更新，继续走后面的更新流程。否则不更新，直接进入等待状态。\n\n**componentWillUpdate**\n\n如果组件状态或者属性改变，并且上面的 `shouldComponentUpdate(...)` 返回为 true 时，会在开始渲染组件之前调用 `componentWillUpdate(object nextProps, object nextState)`，参数同 `shouldComponentUpdate(...)` 。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。接着就会调用 render() 来更新界面了。\n\n**componentDidUpdate**\n\n调用了 `render()` 更新完成界面之后，会调用 `componentDidUpdate(object prevProps, object prevState)`，此函数的输入参数变成了 prevProps 和 prevState，因为到这里已经完成了属性和状态的更新了。\n\n### 销毁阶段\n\n**componentWillUnmount**\n\n当组件要被从界面上移除的时候，就会调用 `componentWillUnmount()`，在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求、点击事件Listener等。\n\n## 总结\n\n组件的生命周期分成三个状态：\n\n\tMounting：  已插入真实 DOM\n\tUpdating：  正在被重新渲染\n\tUnmounting：已移出真实 DOM\n\t\nReact 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数：\n\n\tcomponentWillMount()\n\tcomponentDidMount()\n\tcomponentWillUpdate(object nextProps, object nextState)\n\tcomponentDidUpdate(object prevProps, object prevState)\n\tcomponentWillUnmount()\n\n此外，React 还提供两种特殊状态的处理函数：\n\n\tcomponentWillReceiveProps(object nextProps)：组件收到新的参数时调用\n\tshouldComponentUpdate(object nextProps, object nextState)：判断是否重新渲染时调用\n\n两个初始化函数：\n\n\tgetDefaultProps()：进行初始化和赋值\n\tgetInitialState()：初始化组件的状态\n\n渲染函数：\n\n\trender()\n\n\n参考博文：[React Native 中组件的生命周期](http://www.race604.com/react-native-component-lifecycle/)\n\n","slug":"ReactNative入门（1）","published":1,"updated":"2017-10-28T03:38:22.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9aztbp20009xox07fhs9emr","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>作为一个 iOS 原生应用的开发者，刚开始接触 React Native，先来学习下 React Native 中的组件结构和生命周期，理解一个 React Native 组件如何进行展示，如何进行开发。</p>\n<a id=\"more\"></a>\n<h2 id=\"组件的构成\"><a href=\"#组件的构成\" class=\"headerlink\" title=\"组件的构成\"></a>组件的构成</h2><p>在 React Native 中，所有展示的界面，都可以看做是一个组件（Component），每一个组件根据功能和逻辑的复杂程度，又都是由许多小的组件拼成，每个小的组件也都有自己对应的逻辑，不过他们都遵循同样的代码结构。</p>\n<p>先来看一个完整的 js 文件中的代码，然后我们以它为例来分析其中的代码结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  StyleSheet,</div><div class=\"line\">  Text,</div><div class=\"line\">  View</div><div class=\"line\">&#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">class AwesomeProject extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;View style=&#123;&#123;alignItems: &apos;center&apos;&#125;&#125;&gt;</div><div class=\"line\">        &lt;Text style=&#123;styles.welcome&#125;&gt;</div><div class=\"line\">          Welcome to React Native!</div><div class=\"line\">        &lt;/Text&gt;</div><div class=\"line\">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class=\"line\">          To get started, edit index.ios.js</div><div class=\"line\">        &lt;/Text&gt;</div><div class=\"line\">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class=\"line\">          Press Cmd+R to reload,&#123;&apos;\\n&apos;&#125;</div><div class=\"line\">          Cmd+D or shake for dev menu</div><div class=\"line\">        &lt;/Text&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">  container: &#123;</div><div class=\"line\">    flex: 1,</div><div class=\"line\">    justifyContent: &apos;center&apos;,</div><div class=\"line\">    alignItems: &apos;center&apos;,</div><div class=\"line\">    backgroundColor: &apos;#F5FCFF&apos;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  welcome: &#123;</div><div class=\"line\">    fontSize: 20,</div><div class=\"line\">    textAlign: &apos;center&apos;,</div><div class=\"line\">    margin: 10,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  instructions: &#123;</div><div class=\"line\">    textAlign: &apos;center&apos;,</div><div class=\"line\">    color: &apos;#333333&apos;,</div><div class=\"line\">    marginBottom: 5,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(&apos;AwesomeProject&apos;, () =&gt; AwesomeProject);</div></pre></td></tr></table></figure>\n<p>这段代码中组件的代码结构：</p>\n<h3 id=\"包和组件引用\"><a href=\"#包和组件引用\" class=\"headerlink\" title=\"包和组件引用\"></a>包和组件引用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  StyleSheet,</div><div class=\"line\">  Text,</div><div class=\"line\">  View</div><div class=\"line\">&#125; from &apos;react-native&apos;;</div></pre></td></tr></table></figure>\n<p><code>&#39;use strict&#39;</code> 表示开启了 Strict Mode，Strict Mode 使 JavaScript 的错误处理可以有所提高，一些语言缺陷也可以避免。</p>\n<p><code>import {} from &#39;&#39;</code> 表示将 react、react-native 包加载进来，{ } 中的内容是引用来自 React Native 官方的组件、API 以及第三方或开发者项目中构建的组件，形式为该组件或 API 的 React 类名。import 是 ES6 的语法，这个概念等同于 iOS 或者 Swift 中的 “链接库” 或者 “导入库”。</p>\n<h3 id=\"组件类的声明\"><a href=\"#组件类的声明\" class=\"headerlink\" title=\"组件类的声明\"></a>组件类的声明</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">class AwesomeProject extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      ...</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这部分用于构造组件的状态和具体的展示结构，class 是在 ES6 中被引入的，利用 <code>class xxx extends Component {...}</code> 来实例化一个 React Native 组件对象，{ } 中的内容会包含组件的几个重要的生命周期（见下文），这部分是一个组件必不可少的地方，没有这些内容，就无法构成一个组件。</p>\n<h3 id=\"组件样式的声明\"><a href=\"#组件样式的声明\" class=\"headerlink\" title=\"组件样式的声明\"></a>组件样式的声明</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">  container: &#123;</div><div class=\"line\">    flex: 1,</div><div class=\"line\">    justifyContent: &apos;center&apos;,</div><div class=\"line\">    alignItems: &apos;center&apos;,</div><div class=\"line\">    backgroundColor: &apos;#F5FCFF&apos;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  welcome: &#123;</div><div class=\"line\">    fontSize: 20,</div><div class=\"line\">    textAlign: &apos;center&apos;,</div><div class=\"line\">    margin: 10,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  instructions: &#123;</div><div class=\"line\">    textAlign: &apos;center&apos;,</div><div class=\"line\">    color: &apos;#333333&apos;,</div><div class=\"line\">    marginBottom: 5,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>使用 <code>StyleSheet.create({...})</code> 来实例化 React Native 样式对象，{ } 中的内容为 JSON 形式的 React Native 样式，来源于 CSS3，这些声明的样式可以在上面构建组件时（JSX 代码中）使用。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppRegistry.registerComponent(&apos;AwesomeProject&apos;, () =&gt; AwesomeProject);</div></pre></td></tr></table></figure>\n<p>AppRegistry 定义了 App 的入口，并提供了根组件。这部分只有在作为入口的 js 文件中才会有。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = HelloWorld;</div></pre></td></tr></table></figure>\n<p>这里导出了 HelloWorld 类，可以在外部 js 文件中引入 HelloWorld 组件。这部分只有在非入口js 文件中才会有。</p>\n<h2 id=\"组件的生命周期\"><a href=\"#组件的生命周期\" class=\"headerlink\" title=\"组件的生命周期\"></a>组件的生命周期</h2><p>一个 React Native 组件的生命周期分为实例化、存在期和销毁期三个阶段，如下图。</p>\n<p>第一阶段：实例化期，是组件第一次绘制阶段，如图中的上面的虚线框内，在这个阶段完成了组件的加载和初始化；</p>\n<p>第二阶段：存在期，是组件正在运行和交互阶段，如图中的左下的虚线框内，在这个阶段组件可以处理用户交互，或者接收事件更新界面；</p>\n<p>第三阶段：销毁期，是组件被卸载消亡的阶段，如图中的右下的虚线框内，在这个阶段做一些组件的清理工作。</p>\n<p><img src=\"/2016/07/10/ReactNative入门（1）/component-lifecycle.jpg\" alt=\"logo\"></p>\n<p>下面具体分析组件生命周期的各个阶段：</p>\n<h3 id=\"实例化阶段\"><a href=\"#实例化阶段\" class=\"headerlink\" title=\"实例化阶段\"></a>实例化阶段</h3><p>实例化期分为5个阶段，每个阶段以一个函数来进行控制：</p>\n<p><strong>getDefaultProps</strong></p>\n<p>在组件创建的时候，会先调用 <code>getDefaultProps()</code>。由于这个函数在整个生命周期中只会调用一次，所以通常在这里会初始化组件的一些默认属性，将固定的内容放在这个过程中进行初始化和赋值。</p>\n<p><strong>getInitialState</strong></p>\n<p>在组件被创建后并加载的时候，会先调用 <code>getInitialState()</code> 来初始化组件的状态。该函数在整个生命周期中只会调用一次。</p>\n<p><strong>componentWillMount</strong></p>\n<p>在组件初始化后准备加载组件的时候，会先调用 <code>componentWillMount()</code>，在第一次绘制 <code>render()</code> 之前调用，也是渲染一个组件前最后一次修改 state 的机会。这个函数在整个生命周期中也只被调用一次，可以在这里做一些业务初始化操作，也可以设置组件状态。</p>\n<p><strong>render</strong></p>\n<p>这是一个组件必须有的方法，形式为一个有返回值的函数，会返回一段 JSX 或其他 React 组件来构成 DOM，表示该组件的结构和布局，和 Android 的 XML 布局类似。在 <code>render()</code> 函数中，只能通过 this.state 和 this.props 来访问在之前函数中初始化的数据值。</p>\n<p><strong>componentDidMount</strong></p>\n<p>在组件第一次绘制之后，会调用 <code>componentDidMount()</code>，表示组件已经加载完成，这个函数在整个生命周期中也只被调用一次。</p>\n<p>从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout、setInterval，或者发起网络请求，放在这个函数里进行，来保证不会出现UI上的错误。这个函数之后，就进入了稳定运行状态，等待事件触发。</p>\n<blockquote>\n<p>注：先调用子组件的 componentDidMount()，然后才调用父组件的。</p>\n</blockquote>\n<h3 id=\"运行阶段\"><a href=\"#运行阶段\" class=\"headerlink\" title=\"运行阶段\"></a>运行阶段</h3><p>运行期主要是用来处理与用户的交互：</p>\n<p><strong>componentWillReceiveProps</strong></p>\n<p>如果父元素对组件的属性（props）进行了修改，组件收到新的属性时，就会调用 <code>componentWillReceiveProps(object nextProps)</code>，参数 nextProps 是即将被设置的属性，可以通过 <code>this.props</code> 来获取旧的属性。</p>\n<p>在这个回调函数里面，你可以根据属性的变化，通过调用 <code>this.setState()</code> 来更新组件状态，这里调用更新状态是安全的，并不会触发额外的 render() 调用。如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillReceiveProps: function(nextProps) &#123;  </div><div class=\"line\">  this.setState(&#123;</div><div class=\"line\">    likesIncreasing: nextProps.likeCount &gt; this.props.likeCount</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>shouldComponentUpdate</strong></p>\n<p>当组件接收到新的属性或者状态改变时，都会触发调用 <code>boolean shouldComponentUpdate(object nextProps, object nextState)</code>，参数 nextProps 是即将被设置的属性，同 <code>componentWillReceiveProps(...)</code> 一样，nextState 是即将更新的状态值。这个函数返回一个布尔值，来决定是否需要更新组件进行渲染，返回 true 表示需要更新，继续走后面的更新流程。否则不更新，直接进入等待状态。</p>\n<p><strong>componentWillUpdate</strong></p>\n<p>如果组件状态或者属性改变，并且上面的 <code>shouldComponentUpdate(...)</code> 返回为 true 时，会在开始渲染组件之前调用 <code>componentWillUpdate(object nextProps, object nextState)</code>，参数同 <code>shouldComponentUpdate(...)</code> 。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。接着就会调用 render() 来更新界面了。</p>\n<p><strong>componentDidUpdate</strong></p>\n<p>调用了 <code>render()</code> 更新完成界面之后，会调用 <code>componentDidUpdate(object prevProps, object prevState)</code>，此函数的输入参数变成了 prevProps 和 prevState，因为到这里已经完成了属性和状态的更新了。</p>\n<h3 id=\"销毁阶段\"><a href=\"#销毁阶段\" class=\"headerlink\" title=\"销毁阶段\"></a>销毁阶段</h3><p><strong>componentWillUnmount</strong></p>\n<p>当组件要被从界面上移除的时候，就会调用 <code>componentWillUnmount()</code>，在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求、点击事件Listener等。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>组件的生命周期分成三个状态：</p>\n<pre><code>Mounting：  已插入真实 DOM\nUpdating：  正在被重新渲染\nUnmounting：已移出真实 DOM\n</code></pre><p>React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数：</p>\n<pre><code>componentWillMount()\ncomponentDidMount()\ncomponentWillUpdate(object nextProps, object nextState)\ncomponentDidUpdate(object prevProps, object prevState)\ncomponentWillUnmount()\n</code></pre><p>此外，React 还提供两种特殊状态的处理函数：</p>\n<pre><code>componentWillReceiveProps(object nextProps)：组件收到新的参数时调用\nshouldComponentUpdate(object nextProps, object nextState)：判断是否重新渲染时调用\n</code></pre><p>两个初始化函数：</p>\n<pre><code>getDefaultProps()：进行初始化和赋值\ngetInitialState()：初始化组件的状态\n</code></pre><p>渲染函数：</p>\n<pre><code>render()\n</code></pre><p>参考博文：<a href=\"http://www.race604.com/react-native-component-lifecycle/\" target=\"_blank\" rel=\"external\">React Native 中组件的生命周期</a></p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>作为一个 iOS 原生应用的开发者，刚开始接触 React Native，先来学习下 React Native 中的组件结构和生命周期，理解一个 React Native 组件如何进行展示，如何进行开发。</p>","more":"<h2 id=\"组件的构成\"><a href=\"#组件的构成\" class=\"headerlink\" title=\"组件的构成\"></a>组件的构成</h2><p>在 React Native 中，所有展示的界面，都可以看做是一个组件（Component），每一个组件根据功能和逻辑的复杂程度，又都是由许多小的组件拼成，每个小的组件也都有自己对应的逻辑，不过他们都遵循同样的代码结构。</p>\n<p>先来看一个完整的 js 文件中的代码，然后我们以它为例来分析其中的代码结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  StyleSheet,</div><div class=\"line\">  Text,</div><div class=\"line\">  View</div><div class=\"line\">&#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">class AwesomeProject extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;View style=&#123;&#123;alignItems: &apos;center&apos;&#125;&#125;&gt;</div><div class=\"line\">        &lt;Text style=&#123;styles.welcome&#125;&gt;</div><div class=\"line\">          Welcome to React Native!</div><div class=\"line\">        &lt;/Text&gt;</div><div class=\"line\">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class=\"line\">          To get started, edit index.ios.js</div><div class=\"line\">        &lt;/Text&gt;</div><div class=\"line\">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class=\"line\">          Press Cmd+R to reload,&#123;&apos;\\n&apos;&#125;</div><div class=\"line\">          Cmd+D or shake for dev menu</div><div class=\"line\">        &lt;/Text&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">  container: &#123;</div><div class=\"line\">    flex: 1,</div><div class=\"line\">    justifyContent: &apos;center&apos;,</div><div class=\"line\">    alignItems: &apos;center&apos;,</div><div class=\"line\">    backgroundColor: &apos;#F5FCFF&apos;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  welcome: &#123;</div><div class=\"line\">    fontSize: 20,</div><div class=\"line\">    textAlign: &apos;center&apos;,</div><div class=\"line\">    margin: 10,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  instructions: &#123;</div><div class=\"line\">    textAlign: &apos;center&apos;,</div><div class=\"line\">    color: &apos;#333333&apos;,</div><div class=\"line\">    marginBottom: 5,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(&apos;AwesomeProject&apos;, () =&gt; AwesomeProject);</div></pre></td></tr></table></figure>\n<p>这段代码中组件的代码结构：</p>\n<h3 id=\"包和组件引用\"><a href=\"#包和组件引用\" class=\"headerlink\" title=\"包和组件引用\"></a>包和组件引用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  StyleSheet,</div><div class=\"line\">  Text,</div><div class=\"line\">  View</div><div class=\"line\">&#125; from &apos;react-native&apos;;</div></pre></td></tr></table></figure>\n<p><code>&#39;use strict&#39;</code> 表示开启了 Strict Mode，Strict Mode 使 JavaScript 的错误处理可以有所提高，一些语言缺陷也可以避免。</p>\n<p><code>import {} from &#39;&#39;</code> 表示将 react、react-native 包加载进来，{ } 中的内容是引用来自 React Native 官方的组件、API 以及第三方或开发者项目中构建的组件，形式为该组件或 API 的 React 类名。import 是 ES6 的语法，这个概念等同于 iOS 或者 Swift 中的 “链接库” 或者 “导入库”。</p>\n<h3 id=\"组件类的声明\"><a href=\"#组件类的声明\" class=\"headerlink\" title=\"组件类的声明\"></a>组件类的声明</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">class AwesomeProject extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      ...</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这部分用于构造组件的状态和具体的展示结构，class 是在 ES6 中被引入的，利用 <code>class xxx extends Component {...}</code> 来实例化一个 React Native 组件对象，{ } 中的内容会包含组件的几个重要的生命周期（见下文），这部分是一个组件必不可少的地方，没有这些内容，就无法构成一个组件。</p>\n<h3 id=\"组件样式的声明\"><a href=\"#组件样式的声明\" class=\"headerlink\" title=\"组件样式的声明\"></a>组件样式的声明</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">  container: &#123;</div><div class=\"line\">    flex: 1,</div><div class=\"line\">    justifyContent: &apos;center&apos;,</div><div class=\"line\">    alignItems: &apos;center&apos;,</div><div class=\"line\">    backgroundColor: &apos;#F5FCFF&apos;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  welcome: &#123;</div><div class=\"line\">    fontSize: 20,</div><div class=\"line\">    textAlign: &apos;center&apos;,</div><div class=\"line\">    margin: 10,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  instructions: &#123;</div><div class=\"line\">    textAlign: &apos;center&apos;,</div><div class=\"line\">    color: &apos;#333333&apos;,</div><div class=\"line\">    marginBottom: 5,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>使用 <code>StyleSheet.create({...})</code> 来实例化 React Native 样式对象，{ } 中的内容为 JSON 形式的 React Native 样式，来源于 CSS3，这些声明的样式可以在上面构建组件时（JSX 代码中）使用。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AppRegistry.registerComponent(&apos;AwesomeProject&apos;, () =&gt; AwesomeProject);</div></pre></td></tr></table></figure>\n<p>AppRegistry 定义了 App 的入口，并提供了根组件。这部分只有在作为入口的 js 文件中才会有。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = HelloWorld;</div></pre></td></tr></table></figure>\n<p>这里导出了 HelloWorld 类，可以在外部 js 文件中引入 HelloWorld 组件。这部分只有在非入口js 文件中才会有。</p>\n<h2 id=\"组件的生命周期\"><a href=\"#组件的生命周期\" class=\"headerlink\" title=\"组件的生命周期\"></a>组件的生命周期</h2><p>一个 React Native 组件的生命周期分为实例化、存在期和销毁期三个阶段，如下图。</p>\n<p>第一阶段：实例化期，是组件第一次绘制阶段，如图中的上面的虚线框内，在这个阶段完成了组件的加载和初始化；</p>\n<p>第二阶段：存在期，是组件正在运行和交互阶段，如图中的左下的虚线框内，在这个阶段组件可以处理用户交互，或者接收事件更新界面；</p>\n<p>第三阶段：销毁期，是组件被卸载消亡的阶段，如图中的右下的虚线框内，在这个阶段做一些组件的清理工作。</p>\n<p><img src=\"/2016/07/10/ReactNative入门（1）/component-lifecycle.jpg\" alt=\"logo\"></p>\n<p>下面具体分析组件生命周期的各个阶段：</p>\n<h3 id=\"实例化阶段\"><a href=\"#实例化阶段\" class=\"headerlink\" title=\"实例化阶段\"></a>实例化阶段</h3><p>实例化期分为5个阶段，每个阶段以一个函数来进行控制：</p>\n<p><strong>getDefaultProps</strong></p>\n<p>在组件创建的时候，会先调用 <code>getDefaultProps()</code>。由于这个函数在整个生命周期中只会调用一次，所以通常在这里会初始化组件的一些默认属性，将固定的内容放在这个过程中进行初始化和赋值。</p>\n<p><strong>getInitialState</strong></p>\n<p>在组件被创建后并加载的时候，会先调用 <code>getInitialState()</code> 来初始化组件的状态。该函数在整个生命周期中只会调用一次。</p>\n<p><strong>componentWillMount</strong></p>\n<p>在组件初始化后准备加载组件的时候，会先调用 <code>componentWillMount()</code>，在第一次绘制 <code>render()</code> 之前调用，也是渲染一个组件前最后一次修改 state 的机会。这个函数在整个生命周期中也只被调用一次，可以在这里做一些业务初始化操作，也可以设置组件状态。</p>\n<p><strong>render</strong></p>\n<p>这是一个组件必须有的方法，形式为一个有返回值的函数，会返回一段 JSX 或其他 React 组件来构成 DOM，表示该组件的结构和布局，和 Android 的 XML 布局类似。在 <code>render()</code> 函数中，只能通过 this.state 和 this.props 来访问在之前函数中初始化的数据值。</p>\n<p><strong>componentDidMount</strong></p>\n<p>在组件第一次绘制之后，会调用 <code>componentDidMount()</code>，表示组件已经加载完成，这个函数在整个生命周期中也只被调用一次。</p>\n<p>从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout、setInterval，或者发起网络请求，放在这个函数里进行，来保证不会出现UI上的错误。这个函数之后，就进入了稳定运行状态，等待事件触发。</p>\n<blockquote>\n<p>注：先调用子组件的 componentDidMount()，然后才调用父组件的。</p>\n</blockquote>\n<h3 id=\"运行阶段\"><a href=\"#运行阶段\" class=\"headerlink\" title=\"运行阶段\"></a>运行阶段</h3><p>运行期主要是用来处理与用户的交互：</p>\n<p><strong>componentWillReceiveProps</strong></p>\n<p>如果父元素对组件的属性（props）进行了修改，组件收到新的属性时，就会调用 <code>componentWillReceiveProps(object nextProps)</code>，参数 nextProps 是即将被设置的属性，可以通过 <code>this.props</code> 来获取旧的属性。</p>\n<p>在这个回调函数里面，你可以根据属性的变化，通过调用 <code>this.setState()</code> 来更新组件状态，这里调用更新状态是安全的，并不会触发额外的 render() 调用。如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillReceiveProps: function(nextProps) &#123;  </div><div class=\"line\">  this.setState(&#123;</div><div class=\"line\">    likesIncreasing: nextProps.likeCount &gt; this.props.likeCount</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>shouldComponentUpdate</strong></p>\n<p>当组件接收到新的属性或者状态改变时，都会触发调用 <code>boolean shouldComponentUpdate(object nextProps, object nextState)</code>，参数 nextProps 是即将被设置的属性，同 <code>componentWillReceiveProps(...)</code> 一样，nextState 是即将更新的状态值。这个函数返回一个布尔值，来决定是否需要更新组件进行渲染，返回 true 表示需要更新，继续走后面的更新流程。否则不更新，直接进入等待状态。</p>\n<p><strong>componentWillUpdate</strong></p>\n<p>如果组件状态或者属性改变，并且上面的 <code>shouldComponentUpdate(...)</code> 返回为 true 时，会在开始渲染组件之前调用 <code>componentWillUpdate(object nextProps, object nextState)</code>，参数同 <code>shouldComponentUpdate(...)</code> 。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。接着就会调用 render() 来更新界面了。</p>\n<p><strong>componentDidUpdate</strong></p>\n<p>调用了 <code>render()</code> 更新完成界面之后，会调用 <code>componentDidUpdate(object prevProps, object prevState)</code>，此函数的输入参数变成了 prevProps 和 prevState，因为到这里已经完成了属性和状态的更新了。</p>\n<h3 id=\"销毁阶段\"><a href=\"#销毁阶段\" class=\"headerlink\" title=\"销毁阶段\"></a>销毁阶段</h3><p><strong>componentWillUnmount</strong></p>\n<p>当组件要被从界面上移除的时候，就会调用 <code>componentWillUnmount()</code>，在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求、点击事件Listener等。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>组件的生命周期分成三个状态：</p>\n<pre><code>Mounting：  已插入真实 DOM\nUpdating：  正在被重新渲染\nUnmounting：已移出真实 DOM\n</code></pre><p>React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数：</p>\n<pre><code>componentWillMount()\ncomponentDidMount()\ncomponentWillUpdate(object nextProps, object nextState)\ncomponentDidUpdate(object prevProps, object prevState)\ncomponentWillUnmount()\n</code></pre><p>此外，React 还提供两种特殊状态的处理函数：</p>\n<pre><code>componentWillReceiveProps(object nextProps)：组件收到新的参数时调用\nshouldComponentUpdate(object nextProps, object nextState)：判断是否重新渲染时调用\n</code></pre><p>两个初始化函数：</p>\n<pre><code>getDefaultProps()：进行初始化和赋值\ngetInitialState()：初始化组件的状态\n</code></pre><p>渲染函数：</p>\n<pre><code>render()\n</code></pre><p>参考博文：<a href=\"http://www.race604.com/react-native-component-lifecycle/\">React Native 中组件的生命周期</a></p>"},{"title":"ReactNative入门（3）—— ReactNative与原生的交互","date":"2016-12-17T08:03:28.000Z","_content":"\n### 前言\n\n在项目中，通常我们会使用 RN 和原生混合开发的模式，所以这就涉及到一个重要的内容—— RN 和原生之间的数据交互。现在我们来一起看一下该怎样去实现数据交互。交互涉及到两部分内容:1. OC 打开 RN 页面；2. RN 调用 OC 方法；3. OC 调用 RN 方法。\n\n<!--more-->\n\n### iOS 原生页面打开 RN 页面\n\n可以自定义一个 `ReactViewController` 类，在这个控制器中添加一个 `RCTRootView` 作为子 View。这样这个 ViewController 就可以显示一个 RN 页面了，具体实现方法：\n\n```\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view.\n    \n\tNSURL *jsCodeLocation = [NSURL URLWithString:@\"http://localhost:8081/index.ios.bundle?platform=ios&dev=true\"];\n\tRCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation\n                                                      moduleName:@\"test\"\n                                               initialProperties:nil\n                                                   launchOptions:nil];\n\treactView.frame = self.view.bounds;\n\t[self.view addSubView:rootView];\n}\n```\n\n### RN 调用 OC 方法\n\n首先创建一个工具类，来专门处理 RN 和 OC 间的交互，例如 `ReactUtil`，这个类需要实现 `RCTBridgeModule` 协议，`RCTBridgeModule` 是定义好的 protocol，实现该协议的类，会自动注册到 OC 对应的 Bridge 中。\nOC-Bridge 上层负责与 OC 通信，下层负责和 JS-Bridge 通信，而 JS-Bridge 负责和 JS 通信。\n这样通过 OC-Bridge 和 JS-Bridge 就可以实现 JS 和 OC 的相互调用了。\n\nReactUtil 类的具体实现：\n\n```\nRCT_EXPORT_MODULE()\n\nRCT_EXPORT_METHOD(jsInvokeApp:(NSString *)eventName parameter:(NSDictionary *)parameter resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {\n    NSLog(@\"接收到RN传过来的事件名：%@，数据为:%@\", eventName, parameter);\n    \n    //  TODO: 具体业务处理，可根据eventName，parameter等区分\n    BOOL result;\n    if (result) {\n        resolve(@\"\");\n    } else {\n        NSError *error = [NSError errorWithDomain:@\"com.XXX.domain\" code:1 userInfo:nil];\n        reject(@\"code\", @\"message\", error);\n    }\n}\n\n```\n\n所有实现 `RCTBridgeModule` 协议的类都必须显示的 include 宏命令: `RCT_EXPORT_MODULE()`。\n`RCT_EXPORT_MODULE` 的作用是当 OC-Bridge 加载的时候，自动注册一个 Module。这个 Module 可以在 JS-Bridge 中调用。\n`RCT_EXPORT_MODULE` 接受字符串作为其 Module 的名称，如果不设置名称的话默认就使用类名作为 Module 的名称。\n\n最后我们需要在 JS 文件中调用 `ReactUtil` 中的方法即可:\n\n```\nvar { NativeModules } = require('react-native');\nvar ReactUtil = NativeModules.ReactUtil;\n \n//获取Promise对象处理\nasync _updateEvents() {\n    try {\n       var events = await ReactUtil.jsInvokeApp('eventName', {'key':'value'});\n       this.setState({events});\n    } catch(e) {\n       this.setState({events:e.message});\n    }\n}\n```\n\n### OC 调用 RN 方法\n\n在 0.27 版本之前，调用方式是这样的：\n\n```\n@synthesize bridge = _bridge; \n- (void)appInvokeJs:(NSString *)eventName eventBody:(NSDictionary *)eventBody { \n  [_bridge.eventDispatcher sendDeviceEventWithName:eventName body:eventBody];\n}\n```\n\n现在 xcode 里面一直提示这种方式可能要被取代：\n\n`'sendDeviceEventWithName:body:' is deprecated: Subclass RCTEventEmitter instead`\n\n现在可以这样写：修改我们刚才写的 `ReactUtil` 继承自 `RCTEventEmitter`\n\n然后要重写下面这个方法:\n\n```\n// TODO: 所有 app 通知 JS 的方法\n- (NSArray<NSString *> *)supportedEvents {\n  return @[@\"appInvokeJs\"];\n} \n \n```\n\n然后实现你导出的所有方法，里面都使用 sendEventWithName 方法即可\n\n```\n- (void)appInvokeJs:(NSString *)eventName eventBody:(NSDictionary *)eventBody {\n    NSMutableDictionary *body = [[NSMutableDictionary alloc] init];\n    [body setObject:eventName forKey:@\"eventName\"];\n    [body setObject:eventBody forKey:@\"eventBody\"];\n    [self sendEventWithName:@\"appInvokeJs\" body:body];\n}\n```\n\n最后 JS 端调用\n\n```\nimport {\n  ... \n  NativeModules,\n  NativeEventEmitter,  //导入 NativeEventEmitter 模块\n} from 'react-native';\n  \nvar ReactUtil = NativeModules.ReactUtil;\nconst myNativeEvent = new NativeEventEmitter(ReactUtil);  //创建自定义事件接口\n  \n//在组件中使用\ncomponentWillMount() {\n    this.listener = myNativeEvent.addListener('appInvokeJs', this.appInvokeJs.bind(this)); \n}\ncomponentWillUnmount() { \n    this.listener && this.listener.remove();\n    this.listener = null; \n} \n\nappInvokeJs(data) {\n    //接受原生传过来的数据 \n    data = {eventName:,eventBody:}\n    if (data.eventName == 'EventName') {\n       //\n    } else {\n        \n    }  \n}\n```\n\n\n\n\n\n\n\n","source":"_posts/ReactNative入门（3）.md","raw":"---\ntitle: ReactNative入门（3）—— ReactNative与原生的交互\ndate: 2016-12-17 16:03:28\ncategories:\n- 技术\ntags:\n- React Native\n- iOS\n---\n\n### 前言\n\n在项目中，通常我们会使用 RN 和原生混合开发的模式，所以这就涉及到一个重要的内容—— RN 和原生之间的数据交互。现在我们来一起看一下该怎样去实现数据交互。交互涉及到两部分内容:1. OC 打开 RN 页面；2. RN 调用 OC 方法；3. OC 调用 RN 方法。\n\n<!--more-->\n\n### iOS 原生页面打开 RN 页面\n\n可以自定义一个 `ReactViewController` 类，在这个控制器中添加一个 `RCTRootView` 作为子 View。这样这个 ViewController 就可以显示一个 RN 页面了，具体实现方法：\n\n```\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view.\n    \n\tNSURL *jsCodeLocation = [NSURL URLWithString:@\"http://localhost:8081/index.ios.bundle?platform=ios&dev=true\"];\n\tRCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation\n                                                      moduleName:@\"test\"\n                                               initialProperties:nil\n                                                   launchOptions:nil];\n\treactView.frame = self.view.bounds;\n\t[self.view addSubView:rootView];\n}\n```\n\n### RN 调用 OC 方法\n\n首先创建一个工具类，来专门处理 RN 和 OC 间的交互，例如 `ReactUtil`，这个类需要实现 `RCTBridgeModule` 协议，`RCTBridgeModule` 是定义好的 protocol，实现该协议的类，会自动注册到 OC 对应的 Bridge 中。\nOC-Bridge 上层负责与 OC 通信，下层负责和 JS-Bridge 通信，而 JS-Bridge 负责和 JS 通信。\n这样通过 OC-Bridge 和 JS-Bridge 就可以实现 JS 和 OC 的相互调用了。\n\nReactUtil 类的具体实现：\n\n```\nRCT_EXPORT_MODULE()\n\nRCT_EXPORT_METHOD(jsInvokeApp:(NSString *)eventName parameter:(NSDictionary *)parameter resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {\n    NSLog(@\"接收到RN传过来的事件名：%@，数据为:%@\", eventName, parameter);\n    \n    //  TODO: 具体业务处理，可根据eventName，parameter等区分\n    BOOL result;\n    if (result) {\n        resolve(@\"\");\n    } else {\n        NSError *error = [NSError errorWithDomain:@\"com.XXX.domain\" code:1 userInfo:nil];\n        reject(@\"code\", @\"message\", error);\n    }\n}\n\n```\n\n所有实现 `RCTBridgeModule` 协议的类都必须显示的 include 宏命令: `RCT_EXPORT_MODULE()`。\n`RCT_EXPORT_MODULE` 的作用是当 OC-Bridge 加载的时候，自动注册一个 Module。这个 Module 可以在 JS-Bridge 中调用。\n`RCT_EXPORT_MODULE` 接受字符串作为其 Module 的名称，如果不设置名称的话默认就使用类名作为 Module 的名称。\n\n最后我们需要在 JS 文件中调用 `ReactUtil` 中的方法即可:\n\n```\nvar { NativeModules } = require('react-native');\nvar ReactUtil = NativeModules.ReactUtil;\n \n//获取Promise对象处理\nasync _updateEvents() {\n    try {\n       var events = await ReactUtil.jsInvokeApp('eventName', {'key':'value'});\n       this.setState({events});\n    } catch(e) {\n       this.setState({events:e.message});\n    }\n}\n```\n\n### OC 调用 RN 方法\n\n在 0.27 版本之前，调用方式是这样的：\n\n```\n@synthesize bridge = _bridge; \n- (void)appInvokeJs:(NSString *)eventName eventBody:(NSDictionary *)eventBody { \n  [_bridge.eventDispatcher sendDeviceEventWithName:eventName body:eventBody];\n}\n```\n\n现在 xcode 里面一直提示这种方式可能要被取代：\n\n`'sendDeviceEventWithName:body:' is deprecated: Subclass RCTEventEmitter instead`\n\n现在可以这样写：修改我们刚才写的 `ReactUtil` 继承自 `RCTEventEmitter`\n\n然后要重写下面这个方法:\n\n```\n// TODO: 所有 app 通知 JS 的方法\n- (NSArray<NSString *> *)supportedEvents {\n  return @[@\"appInvokeJs\"];\n} \n \n```\n\n然后实现你导出的所有方法，里面都使用 sendEventWithName 方法即可\n\n```\n- (void)appInvokeJs:(NSString *)eventName eventBody:(NSDictionary *)eventBody {\n    NSMutableDictionary *body = [[NSMutableDictionary alloc] init];\n    [body setObject:eventName forKey:@\"eventName\"];\n    [body setObject:eventBody forKey:@\"eventBody\"];\n    [self sendEventWithName:@\"appInvokeJs\" body:body];\n}\n```\n\n最后 JS 端调用\n\n```\nimport {\n  ... \n  NativeModules,\n  NativeEventEmitter,  //导入 NativeEventEmitter 模块\n} from 'react-native';\n  \nvar ReactUtil = NativeModules.ReactUtil;\nconst myNativeEvent = new NativeEventEmitter(ReactUtil);  //创建自定义事件接口\n  \n//在组件中使用\ncomponentWillMount() {\n    this.listener = myNativeEvent.addListener('appInvokeJs', this.appInvokeJs.bind(this)); \n}\ncomponentWillUnmount() { \n    this.listener && this.listener.remove();\n    this.listener = null; \n} \n\nappInvokeJs(data) {\n    //接受原生传过来的数据 \n    data = {eventName:,eventBody:}\n    if (data.eventName == 'EventName') {\n       //\n    } else {\n        \n    }  \n}\n```\n\n\n\n\n\n\n\n","slug":"ReactNative入门（3）","published":1,"updated":"2017-10-28T03:38:22.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9aztbp5000cxox05qo0ll9v","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在项目中，通常我们会使用 RN 和原生混合开发的模式，所以这就涉及到一个重要的内容—— RN 和原生之间的数据交互。现在我们来一起看一下该怎样去实现数据交互。交互涉及到两部分内容:1. OC 打开 RN 页面；2. RN 调用 OC 方法；3. OC 调用 RN 方法。</p>\n<a id=\"more\"></a>\n<h3 id=\"iOS-原生页面打开-RN-页面\"><a href=\"#iOS-原生页面打开-RN-页面\" class=\"headerlink\" title=\"iOS 原生页面打开 RN 页面\"></a>iOS 原生页面打开 RN 页面</h3><p>可以自定义一个 <code>ReactViewController</code> 类，在这个控制器中添加一个 <code>RCTRootView</code> 作为子 View。这样这个 ViewController 就可以显示一个 RN 页面了，具体实现方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    // Do any additional setup after loading the view.</div><div class=\"line\">    </div><div class=\"line\">\tNSURL *jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&quot;];</div><div class=\"line\">\tRCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</div><div class=\"line\">                                                      moduleName:@&quot;test&quot;</div><div class=\"line\">                                               initialProperties:nil</div><div class=\"line\">                                                   launchOptions:nil];</div><div class=\"line\">\treactView.frame = self.view.bounds;</div><div class=\"line\">\t[self.view addSubView:rootView];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"RN-调用-OC-方法\"><a href=\"#RN-调用-OC-方法\" class=\"headerlink\" title=\"RN 调用 OC 方法\"></a>RN 调用 OC 方法</h3><p>首先创建一个工具类，来专门处理 RN 和 OC 间的交互，例如 <code>ReactUtil</code>，这个类需要实现 <code>RCTBridgeModule</code> 协议，<code>RCTBridgeModule</code> 是定义好的 protocol，实现该协议的类，会自动注册到 OC 对应的 Bridge 中。<br>OC-Bridge 上层负责与 OC 通信，下层负责和 JS-Bridge 通信，而 JS-Bridge 负责和 JS 通信。<br>这样通过 OC-Bridge 和 JS-Bridge 就可以实现 JS 和 OC 的相互调用了。</p>\n<p>ReactUtil 类的具体实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">RCT_EXPORT_MODULE()</div><div class=\"line\"></div><div class=\"line\">RCT_EXPORT_METHOD(jsInvokeApp:(NSString *)eventName parameter:(NSDictionary *)parameter resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) &#123;</div><div class=\"line\">    NSLog(@&quot;接收到RN传过来的事件名：%@，数据为:%@&quot;, eventName, parameter);</div><div class=\"line\">    </div><div class=\"line\">    //  TODO: 具体业务处理，可根据eventName，parameter等区分</div><div class=\"line\">    BOOL result;</div><div class=\"line\">    if (result) &#123;</div><div class=\"line\">        resolve(@&quot;&quot;);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        NSError *error = [NSError errorWithDomain:@&quot;com.XXX.domain&quot; code:1 userInfo:nil];</div><div class=\"line\">        reject(@&quot;code&quot;, @&quot;message&quot;, error);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所有实现 <code>RCTBridgeModule</code> 协议的类都必须显示的 include 宏命令: <code>RCT_EXPORT_MODULE()</code>。<br><code>RCT_EXPORT_MODULE</code> 的作用是当 OC-Bridge 加载的时候，自动注册一个 Module。这个 Module 可以在 JS-Bridge 中调用。<br><code>RCT_EXPORT_MODULE</code> 接受字符串作为其 Module 的名称，如果不设置名称的话默认就使用类名作为 Module 的名称。</p>\n<p>最后我们需要在 JS 文件中调用 <code>ReactUtil</code> 中的方法即可:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var &#123; NativeModules &#125; = require(&apos;react-native&apos;);</div><div class=\"line\">var ReactUtil = NativeModules.ReactUtil;</div><div class=\"line\"> </div><div class=\"line\">//获取Promise对象处理</div><div class=\"line\">async _updateEvents() &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">       var events = await ReactUtil.jsInvokeApp(&apos;eventName&apos;, &#123;&apos;key&apos;:&apos;value&apos;&#125;);</div><div class=\"line\">       this.setState(&#123;events&#125;);</div><div class=\"line\">    &#125; catch(e) &#123;</div><div class=\"line\">       this.setState(&#123;events:e.message&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"OC-调用-RN-方法\"><a href=\"#OC-调用-RN-方法\" class=\"headerlink\" title=\"OC 调用 RN 方法\"></a>OC 调用 RN 方法</h3><p>在 0.27 版本之前，调用方式是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@synthesize bridge = _bridge; </div><div class=\"line\">- (void)appInvokeJs:(NSString *)eventName eventBody:(NSDictionary *)eventBody &#123; </div><div class=\"line\">  [_bridge.eventDispatcher sendDeviceEventWithName:eventName body:eventBody];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在 xcode 里面一直提示这种方式可能要被取代：</p>\n<p><code>&#39;sendDeviceEventWithName:body:&#39; is deprecated: Subclass RCTEventEmitter instead</code></p>\n<p>现在可以这样写：修改我们刚才写的 <code>ReactUtil</code> 继承自 <code>RCTEventEmitter</code></p>\n<p>然后要重写下面这个方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// TODO: 所有 app 通知 JS 的方法</div><div class=\"line\">- (NSArray&lt;NSString *&gt; *)supportedEvents &#123;</div><div class=\"line\">  return @[@&quot;appInvokeJs&quot;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后实现你导出的所有方法，里面都使用 sendEventWithName 方法即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)appInvokeJs:(NSString *)eventName eventBody:(NSDictionary *)eventBody &#123;</div><div class=\"line\">    NSMutableDictionary *body = [[NSMutableDictionary alloc] init];</div><div class=\"line\">    [body setObject:eventName forKey:@&quot;eventName&quot;];</div><div class=\"line\">    [body setObject:eventBody forKey:@&quot;eventBody&quot;];</div><div class=\"line\">    [self sendEventWithName:@&quot;appInvokeJs&quot; body:body];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后 JS 端调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123;</div><div class=\"line\">  ... </div><div class=\"line\">  NativeModules,</div><div class=\"line\">  NativeEventEmitter,  //导入 NativeEventEmitter 模块</div><div class=\"line\">&#125; from &apos;react-native&apos;;</div><div class=\"line\">  </div><div class=\"line\">var ReactUtil = NativeModules.ReactUtil;</div><div class=\"line\">const myNativeEvent = new NativeEventEmitter(ReactUtil);  //创建自定义事件接口</div><div class=\"line\">  </div><div class=\"line\">//在组件中使用</div><div class=\"line\">componentWillMount() &#123;</div><div class=\"line\">    this.listener = myNativeEvent.addListener(&apos;appInvokeJs&apos;, this.appInvokeJs.bind(this)); </div><div class=\"line\">&#125;</div><div class=\"line\">componentWillUnmount() &#123; </div><div class=\"line\">    this.listener &amp;&amp; this.listener.remove();</div><div class=\"line\">    this.listener = null; </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">appInvokeJs(data) &#123;</div><div class=\"line\">    //接受原生传过来的数据 </div><div class=\"line\">    data = &#123;eventName:,eventBody:&#125;</div><div class=\"line\">    if (data.eventName == &apos;EventName&apos;) &#123;</div><div class=\"line\">       //</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在项目中，通常我们会使用 RN 和原生混合开发的模式，所以这就涉及到一个重要的内容—— RN 和原生之间的数据交互。现在我们来一起看一下该怎样去实现数据交互。交互涉及到两部分内容:1. OC 打开 RN 页面；2. RN 调用 OC 方法；3. OC 调用 RN 方法。</p>","more":"<h3 id=\"iOS-原生页面打开-RN-页面\"><a href=\"#iOS-原生页面打开-RN-页面\" class=\"headerlink\" title=\"iOS 原生页面打开 RN 页面\"></a>iOS 原生页面打开 RN 页面</h3><p>可以自定义一个 <code>ReactViewController</code> 类，在这个控制器中添加一个 <code>RCTRootView</code> 作为子 View。这样这个 ViewController 就可以显示一个 RN 页面了，具体实现方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    // Do any additional setup after loading the view.</div><div class=\"line\">    </div><div class=\"line\">\tNSURL *jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&quot;];</div><div class=\"line\">\tRCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</div><div class=\"line\">                                                      moduleName:@&quot;test&quot;</div><div class=\"line\">                                               initialProperties:nil</div><div class=\"line\">                                                   launchOptions:nil];</div><div class=\"line\">\treactView.frame = self.view.bounds;</div><div class=\"line\">\t[self.view addSubView:rootView];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"RN-调用-OC-方法\"><a href=\"#RN-调用-OC-方法\" class=\"headerlink\" title=\"RN 调用 OC 方法\"></a>RN 调用 OC 方法</h3><p>首先创建一个工具类，来专门处理 RN 和 OC 间的交互，例如 <code>ReactUtil</code>，这个类需要实现 <code>RCTBridgeModule</code> 协议，<code>RCTBridgeModule</code> 是定义好的 protocol，实现该协议的类，会自动注册到 OC 对应的 Bridge 中。<br>OC-Bridge 上层负责与 OC 通信，下层负责和 JS-Bridge 通信，而 JS-Bridge 负责和 JS 通信。<br>这样通过 OC-Bridge 和 JS-Bridge 就可以实现 JS 和 OC 的相互调用了。</p>\n<p>ReactUtil 类的具体实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">RCT_EXPORT_MODULE()</div><div class=\"line\"></div><div class=\"line\">RCT_EXPORT_METHOD(jsInvokeApp:(NSString *)eventName parameter:(NSDictionary *)parameter resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) &#123;</div><div class=\"line\">    NSLog(@&quot;接收到RN传过来的事件名：%@，数据为:%@&quot;, eventName, parameter);</div><div class=\"line\">    </div><div class=\"line\">    //  TODO: 具体业务处理，可根据eventName，parameter等区分</div><div class=\"line\">    BOOL result;</div><div class=\"line\">    if (result) &#123;</div><div class=\"line\">        resolve(@&quot;&quot;);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        NSError *error = [NSError errorWithDomain:@&quot;com.XXX.domain&quot; code:1 userInfo:nil];</div><div class=\"line\">        reject(@&quot;code&quot;, @&quot;message&quot;, error);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所有实现 <code>RCTBridgeModule</code> 协议的类都必须显示的 include 宏命令: <code>RCT_EXPORT_MODULE()</code>。<br><code>RCT_EXPORT_MODULE</code> 的作用是当 OC-Bridge 加载的时候，自动注册一个 Module。这个 Module 可以在 JS-Bridge 中调用。<br><code>RCT_EXPORT_MODULE</code> 接受字符串作为其 Module 的名称，如果不设置名称的话默认就使用类名作为 Module 的名称。</p>\n<p>最后我们需要在 JS 文件中调用 <code>ReactUtil</code> 中的方法即可:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var &#123; NativeModules &#125; = require(&apos;react-native&apos;);</div><div class=\"line\">var ReactUtil = NativeModules.ReactUtil;</div><div class=\"line\"> </div><div class=\"line\">//获取Promise对象处理</div><div class=\"line\">async _updateEvents() &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">       var events = await ReactUtil.jsInvokeApp(&apos;eventName&apos;, &#123;&apos;key&apos;:&apos;value&apos;&#125;);</div><div class=\"line\">       this.setState(&#123;events&#125;);</div><div class=\"line\">    &#125; catch(e) &#123;</div><div class=\"line\">       this.setState(&#123;events:e.message&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"OC-调用-RN-方法\"><a href=\"#OC-调用-RN-方法\" class=\"headerlink\" title=\"OC 调用 RN 方法\"></a>OC 调用 RN 方法</h3><p>在 0.27 版本之前，调用方式是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@synthesize bridge = _bridge; </div><div class=\"line\">- (void)appInvokeJs:(NSString *)eventName eventBody:(NSDictionary *)eventBody &#123; </div><div class=\"line\">  [_bridge.eventDispatcher sendDeviceEventWithName:eventName body:eventBody];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在 xcode 里面一直提示这种方式可能要被取代：</p>\n<p><code>&#39;sendDeviceEventWithName:body:&#39; is deprecated: Subclass RCTEventEmitter instead</code></p>\n<p>现在可以这样写：修改我们刚才写的 <code>ReactUtil</code> 继承自 <code>RCTEventEmitter</code></p>\n<p>然后要重写下面这个方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// TODO: 所有 app 通知 JS 的方法</div><div class=\"line\">- (NSArray&lt;NSString *&gt; *)supportedEvents &#123;</div><div class=\"line\">  return @[@&quot;appInvokeJs&quot;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后实现你导出的所有方法，里面都使用 sendEventWithName 方法即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)appInvokeJs:(NSString *)eventName eventBody:(NSDictionary *)eventBody &#123;</div><div class=\"line\">    NSMutableDictionary *body = [[NSMutableDictionary alloc] init];</div><div class=\"line\">    [body setObject:eventName forKey:@&quot;eventName&quot;];</div><div class=\"line\">    [body setObject:eventBody forKey:@&quot;eventBody&quot;];</div><div class=\"line\">    [self sendEventWithName:@&quot;appInvokeJs&quot; body:body];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后 JS 端调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123;</div><div class=\"line\">  ... </div><div class=\"line\">  NativeModules,</div><div class=\"line\">  NativeEventEmitter,  //导入 NativeEventEmitter 模块</div><div class=\"line\">&#125; from &apos;react-native&apos;;</div><div class=\"line\">  </div><div class=\"line\">var ReactUtil = NativeModules.ReactUtil;</div><div class=\"line\">const myNativeEvent = new NativeEventEmitter(ReactUtil);  //创建自定义事件接口</div><div class=\"line\">  </div><div class=\"line\">//在组件中使用</div><div class=\"line\">componentWillMount() &#123;</div><div class=\"line\">    this.listener = myNativeEvent.addListener(&apos;appInvokeJs&apos;, this.appInvokeJs.bind(this)); </div><div class=\"line\">&#125;</div><div class=\"line\">componentWillUnmount() &#123; </div><div class=\"line\">    this.listener &amp;&amp; this.listener.remove();</div><div class=\"line\">    this.listener = null; </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">appInvokeJs(data) &#123;</div><div class=\"line\">    //接受原生传过来的数据 </div><div class=\"line\">    data = &#123;eventName:,eventBody:&#125;</div><div class=\"line\">    if (data.eventName == &apos;EventName&apos;) &#123;</div><div class=\"line\">       //</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Hello World","date":"2016-07-07T10:10:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n快速搭建博客框架：https://hexo.io/zh-cn/index.html\n\n### 安装前提\n\n在安装前，您必须检查电脑中是否已安装下列应用程序：\n\n    Homebrew\n    Node.js\n    Git\n\n1.安装 Homebrew\n\n```\n$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n2.安装 Node.js\n\n```\n$ brew install node\n```\n\n3.安装 Git\n一般 Mac 都已安装了 Git，无需自己安装，如需手动安装，执行\n\n```\n$ brew install git\n```\n\n### 安装 Hexo\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n```\n$ npm install -g hexo-cli\n```\n\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n## Hexo Next 主题使用帮助 \n\nhttp://theme-next.iissnan.com/\n\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-07-07 18:10:00\ntags: \n- Hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n快速搭建博客框架：https://hexo.io/zh-cn/index.html\n\n### 安装前提\n\n在安装前，您必须检查电脑中是否已安装下列应用程序：\n\n    Homebrew\n    Node.js\n    Git\n\n1.安装 Homebrew\n\n```\n$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n2.安装 Node.js\n\n```\n$ brew install node\n```\n\n3.安装 Git\n一般 Mac 都已安装了 Git，无需自己安装，如需手动安装，执行\n\n```\n$ brew install git\n```\n\n### 安装 Hexo\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n```\n$ npm install -g hexo-cli\n```\n\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n## Hexo Next 主题使用帮助 \n\nhttp://theme-next.iissnan.com/\n\n\n","slug":"hello-world","published":1,"updated":"2017-10-28T04:16:02.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9aztbp8000gxox09iyg2hfi","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>快速搭建博客框架：<a href=\"https://hexo.io/zh-cn/index.html\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/index.html</a></p>\n<h3 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h3><p>在安装前，您必须检查电脑中是否已安装下列应用程序：</p>\n<pre><code>Homebrew\nNode.js\nGit\n</code></pre><p>1.安装 Homebrew</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>\n<p>2.安装 Node.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install node</div></pre></td></tr></table></figure>\n<p>3.安装 Git<br>一般 Mac 都已安装了 Git，无需自己安装，如需手动安装，执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install git</div></pre></td></tr></table></figure>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n<h2 id=\"Hexo-Next-主题使用帮助\"><a href=\"#Hexo-Next-主题使用帮助\" class=\"headerlink\" title=\"Hexo Next 主题使用帮助\"></a>Hexo Next 主题使用帮助</h2><p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">http://theme-next.iissnan.com/</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>快速搭建博客框架：<a href=\"https://hexo.io/zh-cn/index.html\">https://hexo.io/zh-cn/index.html</a></p>\n<h3 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h3><p>在安装前，您必须检查电脑中是否已安装下列应用程序：</p>\n<pre><code>Homebrew\nNode.js\nGit\n</code></pre><p>1.安装 Homebrew</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>\n<p>2.安装 Node.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install node</div></pre></td></tr></table></figure>\n<p>3.安装 Git<br>一般 Mac 都已安装了 Git，无需自己安装，如需手动安装，执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install git</div></pre></td></tr></table></figure>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n<h2 id=\"Hexo-Next-主题使用帮助\"><a href=\"#Hexo-Next-主题使用帮助\" class=\"headerlink\" title=\"Hexo Next 主题使用帮助\"></a>Hexo Next 主题使用帮助</h2><p><a href=\"http://theme-next.iissnan.com/\">http://theme-next.iissnan.com/</a></p>"},{"title":"fastlane+jenkins实现iOS持续集成","date":"2017-04-08T04:29:31.000Z","_content":"\n# 前言\n\niOS 应用的证书配置、打包和上线，大家都知道，步骤很繁琐，如果纯人工处理的话是非常浪费时间的，因此，我抽空研究了下 fastlane ，fastlane 是用 Ruby 写的一套自动化工具集，用它可以很轻松的完成证书配置，打包发布等工作，配合 jenkins 使用效果更佳。\n\n<!--more-->\n\n# fastlane\n\n![logo](fastlane+jenkins实现iOS持续集成/fastlane-logo.png)\n\n## 1. fastlane 的简介\n\nfastlane是自动化打包和发布 iOS 和 Android 应用的一套工具集，下图是 fastlane 的一些主要的工具[fastlane tools](https://fastlane.tools)，如自动化测试，生成截图，生成证书和签名文件，打包，发布程序等。\n\n![image](fastlane+jenkins实现iOS持续集成/fastlane-intro-tree.png)\n\n\n下面详细讲一下 fastlane 里面的几个主要的工具：\n\n\n| 工具 | 介绍 |\n| --- | --- |\n| [scan](https://github.com/fastlane/fastlane/tree/master/scan) | 自动运行自动化测试工具，并且生成 HTML 报告 |\n| [cert](https://github.com/fastlane/fastlane/tree/master/cert) | 自动创建管理证书 |\n| [sigh](https://github.com/fastlane/fastlane/tree/master/sigh) | 自动创建，更新，下载 Provisioning Profile 文件 |\n| [match](https://github.com/fastlane/fastlane/tree/master/match) | 管理证书和 Provisioning Profile |\n| [pem](https://github.com/fastlane/fastlane/tree/master/pem) | 自动生成，更新 Notification 证书 |\n| [snapshot](https://github.com/fastlane/fastlane/tree/master/snapshot)  | 自动截图 |\n| [deliver](https://github.com/fastlane/fastlane/tree/master/deliver) | 自动上传应用截图，元数据，ipa 文件到 iTunes Connect |\n| [produce](https://github.com/fastlane/fastlane/tree/master/produce) | 如果你的产品还没在 iTunes Connect 或者 Apple Developer Center 创建，produce可以自动帮你完成这些工作  |\n| [gym](https://github.com/fastlane/fastlane/tree/master/gym) | 自动化编译打包工具 |\n\n## 2. fastlane 的安装\n\n1. 确保 Xcode command line 工具是最新版\n\n  `xcode-select --install`\n\n2. 安装fastlane\n\n   官方提供了三种安装方法，gem、brew、直接下载安装\n   \n   简单点，可以直接用 gem 安装：\n   \n   `sudo gem install fastlane -NV`\n   \n   如果安装过程中报错：\n   \n   `ERROR:  While executing gem ... (Errno::EPERM) \n   Operation not permitted - /usr/bin/xxxx`\n   \n   可以执行命令：\n    \n    `sudo gem install -n /usr/local/bin fastlane`\n   \n   安装完成后可以使用 `fastlane -v` 检查是否安装成功，如果输出下面的结果，表示已安装成功，并且显示版本号。\n   \n   `fastlane installation at path:\n/usr/local/lib/ruby/gems/2.4.0/gems/fastlane-2.25.0/bin/fastlane \n----------------------------- fastlane 2.25.0`\n\n## 3. fastlane 的使用\n\n### 3.1 初始化\n    \n在 工程的 .xcodeproj 文件的同级目录下，执行\n\n`fastlane init`\n    \n这里会要求你输入 Apple ID，如果是第一次使用的话，还需要输入密码，fastlane 会自动检测当前项目的 App Name 和 App Identifier，也可以手动输入这些信息，如果你没有在 iTC 或者 ADC 中创建的话，他会询问你是否要帮你自动创建，非常智能。\n    \n执行完毕后，会根据你输入的信息，在当前目录下生成一个文件夹 fastlane，在 fastlane 文件夹下会自动生成两个配置文件 Appfile，Fastfile，我们可以修改这两个文件来完成我们所需要的功能。\n\n如果在 init 的时候选择了在 iTC 中创建 App 的话，fastlane 会自动调用 produce 进行初始化，在 iTC 中成功创建后，fastlane 文件夹里面还会生成一个 Deliverfile 的文件，或者也可以后续手动创建。\n\n### 3.2 fastlane 管理证书 & Provisioning Profile\n\n#### cert\n\n自动生成证书，并下载安装到 keychain 中\n\n#### sigh\n\nprovisioning profile 的生成，管理，下载，签名等\n\n##### 1. 生成\n\n`fastlane sigh --development`\n\n##### 2. 下载\n\n`fastlane sigh download_all`\n\n##### 3. 管理\n\n`fastlane sigh manage`  管理，删除过期的profiles\n`fastlane sigh repair`  修复过期或者无效的profiles\n\n##### 4. 重新签名\n\n`fastlane sigh resign ./path/app.ipa --signing_identity \"iPhone Distribution: Felix Krause\" -p \"my.mobileprovision\"`\n\n#### gem\n\n#### match & Matchfile\n\n##### 1. 初始化 match\n\n新建一个私有的 Git 仓库来存放和管理证书和 Provisioning Profiles。\n\n执行 `fastlane match init`，按提示输入你的 Git 仓库地址，执行完毕后会生成一个 Matchfile 文件，像这样：\n\n```Ruby\ngit_url \"https://github.com/fastlane/fastlane/tree/master/certificates\"\n\napp_identifier \"tools.fastlane.app\"\nusername \"user@fastlane.tools\"\n```\n\n##### 2. 生成和安装\n\n这个证书的仓库可以通过分支来管理不同项目的证书和配置文件，而不需要每个项目都创建一个仓库。\n\n执行 `fastlane match` 可以从 Git 仓库中下载安装证书和 Provisioning Profile 到电脑中，如果 Git 仓库中没有的话，会创建证书和 profiles 文件，并上传到 Git 仓库中，其他人可以安装使用。\n\nGit 仓库中的证书是加密过的，执行 match 时，会要求输入密码，创建证书的时候会用这个密码进行加密，安装证书的时候会用这个密码进行解密后安装。\n\n也可以手动从你的 keychain 中导出证书，然后在你的仓库中，创建 `certs/distribution` 和 `certs/development\n` 目录，分别存放开发和生产证书。\n\n证书加密方法:\n\n`openssl pkcs12 -nocerts -nodes -out key.pem -in certificate.p12`\n`openssl aes-256-cbc -k your_password -in key.pem -out cert_id.p12 -a`\n`openssl aes-256-cbc -k your_password -in certificate.cer -out cert_id.cer -a`\n\n这里的 cert_id 可以通过下面的方法来查找当前账户下所有的证书 ID，然后找出你的证书 ID 就是这里的 cert_id。\n\n```\nrequire 'spaceship'\n\nSpaceship.login('your@apple.id')\nSpaceship.select_team\n\nSpaceship.certificate.all.each do |cert| \n  cert_type = Spaceship::Portal::Certificate::CERTIFICATE_TYPE_IDS[cert.type_display_id].to_s.split(\"::\")[-1]\n  puts \"Cert id: #{cert.id}, name: #{cert.name}, expires: #{cert.expires.strftime(\"%Y-%m-%d\")}, type: #{cert_type}\"\nend\n```\n\n证书加密后存放到相应的目录中，接下来再上传 provisioning profile 文件，可以从 ADC 中下载，然后创建 `profiles/development`，`profiles/adhoc`，`profiles/appstore` 三个目录，分别存放开发，\nAdHoc，生产环境的配置文件。用上面同样的方法执行 openssl 加密\n\n`openssl aes-256-cbc -k your_password -in Development_XXX.mobileprovision -out Development_your.bundle.id.mobileprovision -a`\n\n加密完成后生成三个文件如下：\n\n`profiles/development/Development_your.bundle.id.mobileprovision`\n`profiles/adhoc/AdHoc_your.bundle.id.mobileprovision\nprofiles/appstore`\n`AppStore_your.bundle.id.mobileprovision`\n\n把证书和 profile 上传到你的 Git 仓库中，其他人就可以执行 `fastlane match development` 来安装。\n\n如果你不希望修改证书，可以在执行时在后面加 `--readonly`。\n\n##### 3. 管理\n\n你也可以像这样，在 Fastfile 里写 lane 来执行，如\n\n```Ruby\ndesc \"match\"\n  lane :sn_match do \n    match(git_branch: \"your_branch\", type: \"development\", readonly: true)\n  end\n```\n\n这里可以显示的指定 app_identifier，如\n\n```Ruby\nmatch(git_branch: \"your_branch\", type: \"development\", app_identifier: \"your.bundle.id\", readonly: true)\n```\n\n如果你有多个 Target，如 Watch，Extension。\n\n```Ruby\nmatch(git_branch: \"your_branch\", app_identifier: [\"com.krausefx.app1\", \"com.krausefx.app2\", \"com.krausefx.app3\"], readonly: true)\n```\n\n也可以在 Matchfile 中声明：\n\n```Ruby\ngit_url \"https://github.com/fastlane/fastlane/tree/master/certificates\"\n\napp_identifier [\"com.krausefx.app1\", \"com.krausefx.app2\", \"com.krausefx.app3\"]\n```\n\n你也可以通过 match 来注册新的设备，通过 `force_for_new_devices` 来更新 profiles 到Git 仓库中。\n\n```Ruby\ndesc \"match\"\n  lane :sn_match do \n    register_devices(devices_file: \"./devices.txt\")\n    match(git_branch: \"your_branch\", force_for_new_devices: true)\n  end\n```\n\n`force_for_new_devices` 可以自动进行设备检测，是否距离上次 match 有新的设备加入，并更新你的仓库中的 profile 文件。\n\n### 3.3 fastlane 自动化测试\n\n#### scan & Scanfile\n\nTest 和 UITest\n\n### fastlane 打包\n\n#### Appfile \n    \n[Appfile](https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Appfile.md)，存放了一些 app 本身的信息，如，apple_id, app_identifier, team_id 等等。\n\n默认情况下，Appfile 如下所示：\n\n```Ruby\napp_identifier \"com.mzl.testapp\" # The bundle identifier of your app\napple_id \"mlijin9011@163.com\"  # Your Apple email address\n\n# You can uncomment the lines below and add your own \n# team selection in case you're in multiple teams\n# team_name \"Team Name\"\n# team_id \"Q2CBPJ58CA\"\n\n# To select a team for iTunes Connect use\n# itc_team_name \"Company Name\"\n# itc_team_id \"18742801\"\n```\n\n如果你的 iTunes Connect 和 Apple Developer Portal 有不同的证书，请使用以下代码：\n\n```Ruby\napp_identifier \"com.mzl.testapp\"       # The bundle identifier of your app\n\napple_dev_portal_id \"portal@company.com\"  # Apple Developer Account\nitunes_connect_id \"tunes@company.com\"     # iTunes Connect Account\n\nteam_id \"Q2CBPJ58CA\" # Developer Portal Team ID\nitc_team_id \"18742801\" # iTunes Connect Team ID\n\n```\n\n如果你的项目在每个环境（测试版，Store版，企业版）中的 bundle id 不同的话，则可以使用 for_platform 或 for_lane 模块声明定义。\n\n\n```Ruby\napp_identifier \"com.mzl.testapp\"\napple_id \"mlijin9011@163.com\"\nteam_id \"Q2CBPJ58CC\"\n\nfor_platform :ios do\n  team_id '123' # for all iOS related things\n  for_lane :build_inhouse do\n    app_identifier 'com.mzl.testapp.inhouse'\n  end\nend\n\n```\n\n如果你想从你的 Fastfile 中访问这些值的话，可以在 Fastfile 中这样写\n\n\n```Ruby\nidentifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)\nteam_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)\n```\n\n#### Fastfile\n\n[Fastfile](https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md) 是最重要的一个文件，主要是些 lane 的集合，在这里可以编写和定制我们的自动化脚本，所有的流程控制功能都写在这个文件里面，利用 lane 来完成我们的自动化需求。\n\nFastfile 中可以同时支持不同的平台，iOS，macOS，Android，针对不同的平台，可以自定义自己的脚本，像这样：\n\n```Ruby\nfastlane_version \"2.14.2\"\ndefault_platform :ios\n\nbefore_all do\n  puts \"This block is executed before every action of all platforms\"\nend\n\nplatform :ios do\n  before_all do\n    cocoapods\n  end\n\n  desc \"build beta\"\n  lane :beta do\n    gym\n    hockey\n  end\n\n  after_all do\n    puts \"Finished iOS related work\"\n  end\nend\n\nplatform :mac do\n  lane :beta do\n    xcodebuild\n    hockey\n  end\nend\n\nlane :test do\n  puts \"this lane is not platform specific\"\n  xctool\nend\n\nafter_all do\n  puts \"Executed after every lane of both Mac and iPhone\"\n  slack\nend\n\nerror do |lane, exception|\n  puts \"Executed when every lane of both Mac and iPhone has error\"\n  slack\nend\n\n```\n\nfastlane_version：指定fastlane使用的最小版本 \ndefault_platform：指定当前默认的平台，可以选择 ios/android/mac\nbefore_all：是在执行每一个 lane 之前都会调用这部分，所以如果有一些前提性的操作，可以写在这里，比如 cocoapods，match 等。最外面的 before_all 表示所有平台的都会执行，写在 platform ios 里面的 before_all 是只有执行 ios 平台的lane 才会执行到的。\nafter_all：同理，是在每个 lane 执行完成之后都会执行这部分的内容\nerror：每个 lane 执行出错就会执行这部分的内容\ndesc：对 lane 的描述，fastlane 会自动将 desc 的内容生成说明文档\nlane：任务，执行的时候使用 fastlane [ios] lane名称，如上可以这样用：`fastlane ios beta`\n\nfastlane 提供了很多 [action](https://docs.fastlane.tools/actions) 或者 plugin 可以在 Fastfile 的 lane 里面调用，如上面提到的 match，sigh，gym，deliver 等，还有插件 cocoapods 等。\n\n贴一段我项目中使用的 Fastfile 的一部分看下：\n\n```Ruby\nfastlane_version \"2.23.0\"\n\ndefault_platform :ios\n\nPROJECT_FILE_PATH = 'MyProject.xcodeproj'\nOUTPUT_PATH = 'build/'\nAPP_NAME = 'MyProject'\nSCHEME_NAME = 'MyProject'\nPLIST_FILE_PATH = 'MyProject/Info.plist'\n\nINHOUSE_IDENTIFIER = 'com.bundle.id.inhouse'\nAPPSTORE_IDENTIFIER = 'com.bundle.id'\n\n# 上传 ipa 包的平台，可以用 蒲公英，Bugly 等替代\nOTA_SERVER_URL = 'http://ota.client.xxx.xxx.cn/ios/upload'\n\n# 更新bundle id信息，修改app identifier\ndef update_bundle_id(app_id)\n  say 'update bundle id'\n  update_app_identifier(xcodeproj: PROJECT_FILE_PATH,\n                        plist_path: PLIST_FILE_PATH,\n                        app_identifier: app_id)\nend\n\n# 修改build号\ndef update_build_version(options)\n  say 'update build version'\n\n  buildVersion = options[:build]\n  set_info_plist_value(path: PLIST_FILE_PATH,\n                       key: \"ProjectBuildVersion\",\n                       value: buildVersion)\nend\n\n# 修改bundle号\ndef update_bundle_version(typePrefix,options)\n  say 'update bundle version'\n\n  bundleVersion = options[:build] + \"#{typePrefix}\"\n  set_info_plist_value(path: PLIST_FILE_PATH,\n                       key: \"CFBundleVersion\",\n                       value: bundleVersion)\nend\n\n# 打包\ndef generate_ipa(configuration,exportMethod,options)\n  say 'generate ipa'\n\n  fullVersion = get_version_number + \"_\" + options[:build]\n  outputName = \"#{APP_NAME}_V#{fullVersion}_#{configuration}\"\n  outputPath = \"#{OUTPUT_PATH}#{outputName}/\"\n\n  gym(\n    scheme: \"#{SCHEME_NAME}\",\n    clean: true,\n    output_directory: \"#{outputPath}\",\n    output_name: \"#{outputName}.ipa\",\n    configuration: \"#{configuration}\",\n    include_symbols: \"true\",\n    # archive_path: \"#{outputPath}\",\n    # 指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, development, 和developer-id\n    export_method: \"#{exportMethod}\"\n  )\n\n  upload_ota(\"../#{outputPath}\", outputName, configuration)\nend\n\n# 上传 OTA\ndef upload_ota(output_path, app_name, configuration)\n  say 'upload ipa to ota'\n\n  # 99-AppStore包, 0-正式包, 1-开发临时测试包, 2-第三方渠道包, 3-每日构建包\n  # 默认为1\n  force_bundle_id = APPSTORE_IDENTIFIER\n  type = 1\n  if configuration == \"Inhouse\"\n    force_bundle_id = INHOUSE_IDENTIFIER\n    type = 2\n  elsif configuration == \"AdHoc\"\n    type = 0\n  elsif configuration == \"Release\"\n    type = 99\n  end\n  sh \"curl -# -S -F 'pkg_file=@#{output_path}#{app_name}.ipa' -F 'dsym_file=@#{output_path}#{app_name}.app.dSYM.zip' -F 'version=#{app_name}' -F 'description=#{app_name}' -F 'app_bundle_id=#{APPSTORE_IDENTIFIER}' -F 'pkg_type=#{type}' -F 'force_bundle_id=#{force_bundle_id}' #{OTA_SERVER_URL}\"\nend\n\nplatform :ios do\n  before_all do\n    # ENV[\"SLACK_URL\"] = \"https://hooks.slack.com/services/...\"\n    # cocoapods\n    puts File.absolute_path(\".\")\n  end\n\n  desc \"更新build号\"\n  lane :buildVersion do |options|\n    update_build_version(options)\n  end \n\n  desc \"更新Debug版bundle号\"\n  lane :debugBundleVersion do |options|\n    update_bundle_version(\".Debug\",options)\n  end \n\n  desc \"更新AppStore版bundle号\"\n  lane :storeBundleVersion do |options|\n    update_bundle_version(\"\",options)\n  end   \n\n  desc \"打Debug包\"\n  lane :build_debug do |options|\n    buildVersion options\n    generate_ipa(\"Debug\",\"development\",options)\n  end\n\n  desc \"打Inhouse包\"\n  lane :build_inhouse do |options|\n    buildVersion options\n    update_bundle_id(\"#{INHOUSE_IDENTIFIER}\")\n    generate_ipa(\"Inhouse\",\"enterprise\",options)\n    # 还原\n    update_bundle_id(\"#{APPSTORE_IDENTIFIER}\")\n  end\n\n  desc \"打Adhoc包\"\n  lane :build_adhoc do |options|\n    buildVersion options\n    generate_ipa(\"AdHoc\",\"ad-hoc\",options)\n  end\n\n  desc \"打Alpha包\"\n  lane :build_alpha do |options|\n    development options\n    inhouse options\n    adhoc options\n  end\n\n  desc \"打AppStore包\"\n  lane :build_release do |options|\n    buildVersion options\n    storeBundleVersion options\n    update_bundle_id(\"#{APPSTORE_IDENTIFIER}\")\n    generate_ipa(\"Release\",\"app-store\",options)\n  end\n\n  desc \"match\"\n  lane :sn_match do \n    # 这两行可以注册新设备，并且自动更新仓库下的profiles文件\n    # register_devices(devices_file: \"./devices.txt\")\n    # match(git_branch: \"branch\", type: \"development\", force_for_new_devices: true)\n    match(git_branch: \"branch\", readonly: true)\n  end\n\n  after_all do |lane|\n\n    # slack(\n    #   message: \"Successfully deployed new App Update.\"\n    # )\n  end\n\n  error do |lane, exception|\n    # slack(\n    #   message: exception.message,\n    #   success: false\n    # )\n  end\nend\n\n\n# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md\n# All available actions: https://docs.fastlane.tools/actions\n\n# fastlane reports which actions are used\n# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer\n\n```\n\n### 3.4 fastlane 发布 \n\n#### deliver & Deliverfile\n\n[Deliverfile](https://github.com/fastlane/fastlane/blob/master/deliver/Deliverfile.md) 主要是用于发布上传时的配置文件。\n\n前面介绍了，如果在 `fastlane init` 的时候选择了在 iTunes Connect 创建 App，那么 fastlane 会调用 produce 进行初始化，同时会执行 `deliver init`，执行完毕后会创建一个 Deliverfile 文件，如果没有在初始化的时候选择执行 produce 流程当然 deliver 也不会执行，可以手动执行 `fastlane deliver init` 创建。\n\n执行时，会自动登录你在 Appfile 中设置的 itunes_connect_id，根据 Appfile 中的 app_identifier，会为你下载当前 iTC 中的截图，元数据等等。执行完成后会生成\n一个 Deliverfile 文件，/metadata 和 /screenshots 文件夹。\n\n本地修改 Deliverfile，元数据，或者截图文件，执行 `fastlane deliver` 后，可以上传到 iTunes Connect 上。\n\n如果你想把你本地的 ipa 文件上传到 iTunes Connect 上，可以执行：\n\n`fastlane deliver --ipa \"App.ipa\" --submit_for_review`\n\n如果你之前上传过 ipa 包，想选择一个用来提交审核，可以执行：\n\n`fastlane deliver submit_build --build_number xxxx`\n\n这里 xxxx 是你想选择的 build number。或者，可以直接选择最新的：\n\n`fastlane deliver submit_build --latest`\n\n在 Fastfile 里可以这样写：\n\n\n```\ndeliver(app_version: ENV[\"app_versionName\"],\n        ipa: \"#{ipa_path}\",\n        submit_for_review: false\n       )\n```\n\n\n# 参考文章\n\n> [官方文档](https://github.com/fastlane/fastlane)\n> [Simplify your life with fastlane match](http://macoscope.com/blog/simplify-your-life-with-fastlane-match/#migration)\n\n\n\n\n\n\n","source":"_posts/fastlane+jenkins实现iOS持续集成.md","raw":"---\ntitle: fastlane+jenkins实现iOS持续集成\ndate: 2017-04-08 12:29:31\ncategories:\n- 技术\ntags:\n- iOS\n- fastlane\n- jenkins\n---\n\n# 前言\n\niOS 应用的证书配置、打包和上线，大家都知道，步骤很繁琐，如果纯人工处理的话是非常浪费时间的，因此，我抽空研究了下 fastlane ，fastlane 是用 Ruby 写的一套自动化工具集，用它可以很轻松的完成证书配置，打包发布等工作，配合 jenkins 使用效果更佳。\n\n<!--more-->\n\n# fastlane\n\n![logo](fastlane+jenkins实现iOS持续集成/fastlane-logo.png)\n\n## 1. fastlane 的简介\n\nfastlane是自动化打包和发布 iOS 和 Android 应用的一套工具集，下图是 fastlane 的一些主要的工具[fastlane tools](https://fastlane.tools)，如自动化测试，生成截图，生成证书和签名文件，打包，发布程序等。\n\n![image](fastlane+jenkins实现iOS持续集成/fastlane-intro-tree.png)\n\n\n下面详细讲一下 fastlane 里面的几个主要的工具：\n\n\n| 工具 | 介绍 |\n| --- | --- |\n| [scan](https://github.com/fastlane/fastlane/tree/master/scan) | 自动运行自动化测试工具，并且生成 HTML 报告 |\n| [cert](https://github.com/fastlane/fastlane/tree/master/cert) | 自动创建管理证书 |\n| [sigh](https://github.com/fastlane/fastlane/tree/master/sigh) | 自动创建，更新，下载 Provisioning Profile 文件 |\n| [match](https://github.com/fastlane/fastlane/tree/master/match) | 管理证书和 Provisioning Profile |\n| [pem](https://github.com/fastlane/fastlane/tree/master/pem) | 自动生成，更新 Notification 证书 |\n| [snapshot](https://github.com/fastlane/fastlane/tree/master/snapshot)  | 自动截图 |\n| [deliver](https://github.com/fastlane/fastlane/tree/master/deliver) | 自动上传应用截图，元数据，ipa 文件到 iTunes Connect |\n| [produce](https://github.com/fastlane/fastlane/tree/master/produce) | 如果你的产品还没在 iTunes Connect 或者 Apple Developer Center 创建，produce可以自动帮你完成这些工作  |\n| [gym](https://github.com/fastlane/fastlane/tree/master/gym) | 自动化编译打包工具 |\n\n## 2. fastlane 的安装\n\n1. 确保 Xcode command line 工具是最新版\n\n  `xcode-select --install`\n\n2. 安装fastlane\n\n   官方提供了三种安装方法，gem、brew、直接下载安装\n   \n   简单点，可以直接用 gem 安装：\n   \n   `sudo gem install fastlane -NV`\n   \n   如果安装过程中报错：\n   \n   `ERROR:  While executing gem ... (Errno::EPERM) \n   Operation not permitted - /usr/bin/xxxx`\n   \n   可以执行命令：\n    \n    `sudo gem install -n /usr/local/bin fastlane`\n   \n   安装完成后可以使用 `fastlane -v` 检查是否安装成功，如果输出下面的结果，表示已安装成功，并且显示版本号。\n   \n   `fastlane installation at path:\n/usr/local/lib/ruby/gems/2.4.0/gems/fastlane-2.25.0/bin/fastlane \n----------------------------- fastlane 2.25.0`\n\n## 3. fastlane 的使用\n\n### 3.1 初始化\n    \n在 工程的 .xcodeproj 文件的同级目录下，执行\n\n`fastlane init`\n    \n这里会要求你输入 Apple ID，如果是第一次使用的话，还需要输入密码，fastlane 会自动检测当前项目的 App Name 和 App Identifier，也可以手动输入这些信息，如果你没有在 iTC 或者 ADC 中创建的话，他会询问你是否要帮你自动创建，非常智能。\n    \n执行完毕后，会根据你输入的信息，在当前目录下生成一个文件夹 fastlane，在 fastlane 文件夹下会自动生成两个配置文件 Appfile，Fastfile，我们可以修改这两个文件来完成我们所需要的功能。\n\n如果在 init 的时候选择了在 iTC 中创建 App 的话，fastlane 会自动调用 produce 进行初始化，在 iTC 中成功创建后，fastlane 文件夹里面还会生成一个 Deliverfile 的文件，或者也可以后续手动创建。\n\n### 3.2 fastlane 管理证书 & Provisioning Profile\n\n#### cert\n\n自动生成证书，并下载安装到 keychain 中\n\n#### sigh\n\nprovisioning profile 的生成，管理，下载，签名等\n\n##### 1. 生成\n\n`fastlane sigh --development`\n\n##### 2. 下载\n\n`fastlane sigh download_all`\n\n##### 3. 管理\n\n`fastlane sigh manage`  管理，删除过期的profiles\n`fastlane sigh repair`  修复过期或者无效的profiles\n\n##### 4. 重新签名\n\n`fastlane sigh resign ./path/app.ipa --signing_identity \"iPhone Distribution: Felix Krause\" -p \"my.mobileprovision\"`\n\n#### gem\n\n#### match & Matchfile\n\n##### 1. 初始化 match\n\n新建一个私有的 Git 仓库来存放和管理证书和 Provisioning Profiles。\n\n执行 `fastlane match init`，按提示输入你的 Git 仓库地址，执行完毕后会生成一个 Matchfile 文件，像这样：\n\n```Ruby\ngit_url \"https://github.com/fastlane/fastlane/tree/master/certificates\"\n\napp_identifier \"tools.fastlane.app\"\nusername \"user@fastlane.tools\"\n```\n\n##### 2. 生成和安装\n\n这个证书的仓库可以通过分支来管理不同项目的证书和配置文件，而不需要每个项目都创建一个仓库。\n\n执行 `fastlane match` 可以从 Git 仓库中下载安装证书和 Provisioning Profile 到电脑中，如果 Git 仓库中没有的话，会创建证书和 profiles 文件，并上传到 Git 仓库中，其他人可以安装使用。\n\nGit 仓库中的证书是加密过的，执行 match 时，会要求输入密码，创建证书的时候会用这个密码进行加密，安装证书的时候会用这个密码进行解密后安装。\n\n也可以手动从你的 keychain 中导出证书，然后在你的仓库中，创建 `certs/distribution` 和 `certs/development\n` 目录，分别存放开发和生产证书。\n\n证书加密方法:\n\n`openssl pkcs12 -nocerts -nodes -out key.pem -in certificate.p12`\n`openssl aes-256-cbc -k your_password -in key.pem -out cert_id.p12 -a`\n`openssl aes-256-cbc -k your_password -in certificate.cer -out cert_id.cer -a`\n\n这里的 cert_id 可以通过下面的方法来查找当前账户下所有的证书 ID，然后找出你的证书 ID 就是这里的 cert_id。\n\n```\nrequire 'spaceship'\n\nSpaceship.login('your@apple.id')\nSpaceship.select_team\n\nSpaceship.certificate.all.each do |cert| \n  cert_type = Spaceship::Portal::Certificate::CERTIFICATE_TYPE_IDS[cert.type_display_id].to_s.split(\"::\")[-1]\n  puts \"Cert id: #{cert.id}, name: #{cert.name}, expires: #{cert.expires.strftime(\"%Y-%m-%d\")}, type: #{cert_type}\"\nend\n```\n\n证书加密后存放到相应的目录中，接下来再上传 provisioning profile 文件，可以从 ADC 中下载，然后创建 `profiles/development`，`profiles/adhoc`，`profiles/appstore` 三个目录，分别存放开发，\nAdHoc，生产环境的配置文件。用上面同样的方法执行 openssl 加密\n\n`openssl aes-256-cbc -k your_password -in Development_XXX.mobileprovision -out Development_your.bundle.id.mobileprovision -a`\n\n加密完成后生成三个文件如下：\n\n`profiles/development/Development_your.bundle.id.mobileprovision`\n`profiles/adhoc/AdHoc_your.bundle.id.mobileprovision\nprofiles/appstore`\n`AppStore_your.bundle.id.mobileprovision`\n\n把证书和 profile 上传到你的 Git 仓库中，其他人就可以执行 `fastlane match development` 来安装。\n\n如果你不希望修改证书，可以在执行时在后面加 `--readonly`。\n\n##### 3. 管理\n\n你也可以像这样，在 Fastfile 里写 lane 来执行，如\n\n```Ruby\ndesc \"match\"\n  lane :sn_match do \n    match(git_branch: \"your_branch\", type: \"development\", readonly: true)\n  end\n```\n\n这里可以显示的指定 app_identifier，如\n\n```Ruby\nmatch(git_branch: \"your_branch\", type: \"development\", app_identifier: \"your.bundle.id\", readonly: true)\n```\n\n如果你有多个 Target，如 Watch，Extension。\n\n```Ruby\nmatch(git_branch: \"your_branch\", app_identifier: [\"com.krausefx.app1\", \"com.krausefx.app2\", \"com.krausefx.app3\"], readonly: true)\n```\n\n也可以在 Matchfile 中声明：\n\n```Ruby\ngit_url \"https://github.com/fastlane/fastlane/tree/master/certificates\"\n\napp_identifier [\"com.krausefx.app1\", \"com.krausefx.app2\", \"com.krausefx.app3\"]\n```\n\n你也可以通过 match 来注册新的设备，通过 `force_for_new_devices` 来更新 profiles 到Git 仓库中。\n\n```Ruby\ndesc \"match\"\n  lane :sn_match do \n    register_devices(devices_file: \"./devices.txt\")\n    match(git_branch: \"your_branch\", force_for_new_devices: true)\n  end\n```\n\n`force_for_new_devices` 可以自动进行设备检测，是否距离上次 match 有新的设备加入，并更新你的仓库中的 profile 文件。\n\n### 3.3 fastlane 自动化测试\n\n#### scan & Scanfile\n\nTest 和 UITest\n\n### fastlane 打包\n\n#### Appfile \n    \n[Appfile](https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Appfile.md)，存放了一些 app 本身的信息，如，apple_id, app_identifier, team_id 等等。\n\n默认情况下，Appfile 如下所示：\n\n```Ruby\napp_identifier \"com.mzl.testapp\" # The bundle identifier of your app\napple_id \"mlijin9011@163.com\"  # Your Apple email address\n\n# You can uncomment the lines below and add your own \n# team selection in case you're in multiple teams\n# team_name \"Team Name\"\n# team_id \"Q2CBPJ58CA\"\n\n# To select a team for iTunes Connect use\n# itc_team_name \"Company Name\"\n# itc_team_id \"18742801\"\n```\n\n如果你的 iTunes Connect 和 Apple Developer Portal 有不同的证书，请使用以下代码：\n\n```Ruby\napp_identifier \"com.mzl.testapp\"       # The bundle identifier of your app\n\napple_dev_portal_id \"portal@company.com\"  # Apple Developer Account\nitunes_connect_id \"tunes@company.com\"     # iTunes Connect Account\n\nteam_id \"Q2CBPJ58CA\" # Developer Portal Team ID\nitc_team_id \"18742801\" # iTunes Connect Team ID\n\n```\n\n如果你的项目在每个环境（测试版，Store版，企业版）中的 bundle id 不同的话，则可以使用 for_platform 或 for_lane 模块声明定义。\n\n\n```Ruby\napp_identifier \"com.mzl.testapp\"\napple_id \"mlijin9011@163.com\"\nteam_id \"Q2CBPJ58CC\"\n\nfor_platform :ios do\n  team_id '123' # for all iOS related things\n  for_lane :build_inhouse do\n    app_identifier 'com.mzl.testapp.inhouse'\n  end\nend\n\n```\n\n如果你想从你的 Fastfile 中访问这些值的话，可以在 Fastfile 中这样写\n\n\n```Ruby\nidentifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)\nteam_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)\n```\n\n#### Fastfile\n\n[Fastfile](https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md) 是最重要的一个文件，主要是些 lane 的集合，在这里可以编写和定制我们的自动化脚本，所有的流程控制功能都写在这个文件里面，利用 lane 来完成我们的自动化需求。\n\nFastfile 中可以同时支持不同的平台，iOS，macOS，Android，针对不同的平台，可以自定义自己的脚本，像这样：\n\n```Ruby\nfastlane_version \"2.14.2\"\ndefault_platform :ios\n\nbefore_all do\n  puts \"This block is executed before every action of all platforms\"\nend\n\nplatform :ios do\n  before_all do\n    cocoapods\n  end\n\n  desc \"build beta\"\n  lane :beta do\n    gym\n    hockey\n  end\n\n  after_all do\n    puts \"Finished iOS related work\"\n  end\nend\n\nplatform :mac do\n  lane :beta do\n    xcodebuild\n    hockey\n  end\nend\n\nlane :test do\n  puts \"this lane is not platform specific\"\n  xctool\nend\n\nafter_all do\n  puts \"Executed after every lane of both Mac and iPhone\"\n  slack\nend\n\nerror do |lane, exception|\n  puts \"Executed when every lane of both Mac and iPhone has error\"\n  slack\nend\n\n```\n\nfastlane_version：指定fastlane使用的最小版本 \ndefault_platform：指定当前默认的平台，可以选择 ios/android/mac\nbefore_all：是在执行每一个 lane 之前都会调用这部分，所以如果有一些前提性的操作，可以写在这里，比如 cocoapods，match 等。最外面的 before_all 表示所有平台的都会执行，写在 platform ios 里面的 before_all 是只有执行 ios 平台的lane 才会执行到的。\nafter_all：同理，是在每个 lane 执行完成之后都会执行这部分的内容\nerror：每个 lane 执行出错就会执行这部分的内容\ndesc：对 lane 的描述，fastlane 会自动将 desc 的内容生成说明文档\nlane：任务，执行的时候使用 fastlane [ios] lane名称，如上可以这样用：`fastlane ios beta`\n\nfastlane 提供了很多 [action](https://docs.fastlane.tools/actions) 或者 plugin 可以在 Fastfile 的 lane 里面调用，如上面提到的 match，sigh，gym，deliver 等，还有插件 cocoapods 等。\n\n贴一段我项目中使用的 Fastfile 的一部分看下：\n\n```Ruby\nfastlane_version \"2.23.0\"\n\ndefault_platform :ios\n\nPROJECT_FILE_PATH = 'MyProject.xcodeproj'\nOUTPUT_PATH = 'build/'\nAPP_NAME = 'MyProject'\nSCHEME_NAME = 'MyProject'\nPLIST_FILE_PATH = 'MyProject/Info.plist'\n\nINHOUSE_IDENTIFIER = 'com.bundle.id.inhouse'\nAPPSTORE_IDENTIFIER = 'com.bundle.id'\n\n# 上传 ipa 包的平台，可以用 蒲公英，Bugly 等替代\nOTA_SERVER_URL = 'http://ota.client.xxx.xxx.cn/ios/upload'\n\n# 更新bundle id信息，修改app identifier\ndef update_bundle_id(app_id)\n  say 'update bundle id'\n  update_app_identifier(xcodeproj: PROJECT_FILE_PATH,\n                        plist_path: PLIST_FILE_PATH,\n                        app_identifier: app_id)\nend\n\n# 修改build号\ndef update_build_version(options)\n  say 'update build version'\n\n  buildVersion = options[:build]\n  set_info_plist_value(path: PLIST_FILE_PATH,\n                       key: \"ProjectBuildVersion\",\n                       value: buildVersion)\nend\n\n# 修改bundle号\ndef update_bundle_version(typePrefix,options)\n  say 'update bundle version'\n\n  bundleVersion = options[:build] + \"#{typePrefix}\"\n  set_info_plist_value(path: PLIST_FILE_PATH,\n                       key: \"CFBundleVersion\",\n                       value: bundleVersion)\nend\n\n# 打包\ndef generate_ipa(configuration,exportMethod,options)\n  say 'generate ipa'\n\n  fullVersion = get_version_number + \"_\" + options[:build]\n  outputName = \"#{APP_NAME}_V#{fullVersion}_#{configuration}\"\n  outputPath = \"#{OUTPUT_PATH}#{outputName}/\"\n\n  gym(\n    scheme: \"#{SCHEME_NAME}\",\n    clean: true,\n    output_directory: \"#{outputPath}\",\n    output_name: \"#{outputName}.ipa\",\n    configuration: \"#{configuration}\",\n    include_symbols: \"true\",\n    # archive_path: \"#{outputPath}\",\n    # 指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, development, 和developer-id\n    export_method: \"#{exportMethod}\"\n  )\n\n  upload_ota(\"../#{outputPath}\", outputName, configuration)\nend\n\n# 上传 OTA\ndef upload_ota(output_path, app_name, configuration)\n  say 'upload ipa to ota'\n\n  # 99-AppStore包, 0-正式包, 1-开发临时测试包, 2-第三方渠道包, 3-每日构建包\n  # 默认为1\n  force_bundle_id = APPSTORE_IDENTIFIER\n  type = 1\n  if configuration == \"Inhouse\"\n    force_bundle_id = INHOUSE_IDENTIFIER\n    type = 2\n  elsif configuration == \"AdHoc\"\n    type = 0\n  elsif configuration == \"Release\"\n    type = 99\n  end\n  sh \"curl -# -S -F 'pkg_file=@#{output_path}#{app_name}.ipa' -F 'dsym_file=@#{output_path}#{app_name}.app.dSYM.zip' -F 'version=#{app_name}' -F 'description=#{app_name}' -F 'app_bundle_id=#{APPSTORE_IDENTIFIER}' -F 'pkg_type=#{type}' -F 'force_bundle_id=#{force_bundle_id}' #{OTA_SERVER_URL}\"\nend\n\nplatform :ios do\n  before_all do\n    # ENV[\"SLACK_URL\"] = \"https://hooks.slack.com/services/...\"\n    # cocoapods\n    puts File.absolute_path(\".\")\n  end\n\n  desc \"更新build号\"\n  lane :buildVersion do |options|\n    update_build_version(options)\n  end \n\n  desc \"更新Debug版bundle号\"\n  lane :debugBundleVersion do |options|\n    update_bundle_version(\".Debug\",options)\n  end \n\n  desc \"更新AppStore版bundle号\"\n  lane :storeBundleVersion do |options|\n    update_bundle_version(\"\",options)\n  end   \n\n  desc \"打Debug包\"\n  lane :build_debug do |options|\n    buildVersion options\n    generate_ipa(\"Debug\",\"development\",options)\n  end\n\n  desc \"打Inhouse包\"\n  lane :build_inhouse do |options|\n    buildVersion options\n    update_bundle_id(\"#{INHOUSE_IDENTIFIER}\")\n    generate_ipa(\"Inhouse\",\"enterprise\",options)\n    # 还原\n    update_bundle_id(\"#{APPSTORE_IDENTIFIER}\")\n  end\n\n  desc \"打Adhoc包\"\n  lane :build_adhoc do |options|\n    buildVersion options\n    generate_ipa(\"AdHoc\",\"ad-hoc\",options)\n  end\n\n  desc \"打Alpha包\"\n  lane :build_alpha do |options|\n    development options\n    inhouse options\n    adhoc options\n  end\n\n  desc \"打AppStore包\"\n  lane :build_release do |options|\n    buildVersion options\n    storeBundleVersion options\n    update_bundle_id(\"#{APPSTORE_IDENTIFIER}\")\n    generate_ipa(\"Release\",\"app-store\",options)\n  end\n\n  desc \"match\"\n  lane :sn_match do \n    # 这两行可以注册新设备，并且自动更新仓库下的profiles文件\n    # register_devices(devices_file: \"./devices.txt\")\n    # match(git_branch: \"branch\", type: \"development\", force_for_new_devices: true)\n    match(git_branch: \"branch\", readonly: true)\n  end\n\n  after_all do |lane|\n\n    # slack(\n    #   message: \"Successfully deployed new App Update.\"\n    # )\n  end\n\n  error do |lane, exception|\n    # slack(\n    #   message: exception.message,\n    #   success: false\n    # )\n  end\nend\n\n\n# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md\n# All available actions: https://docs.fastlane.tools/actions\n\n# fastlane reports which actions are used\n# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer\n\n```\n\n### 3.4 fastlane 发布 \n\n#### deliver & Deliverfile\n\n[Deliverfile](https://github.com/fastlane/fastlane/blob/master/deliver/Deliverfile.md) 主要是用于发布上传时的配置文件。\n\n前面介绍了，如果在 `fastlane init` 的时候选择了在 iTunes Connect 创建 App，那么 fastlane 会调用 produce 进行初始化，同时会执行 `deliver init`，执行完毕后会创建一个 Deliverfile 文件，如果没有在初始化的时候选择执行 produce 流程当然 deliver 也不会执行，可以手动执行 `fastlane deliver init` 创建。\n\n执行时，会自动登录你在 Appfile 中设置的 itunes_connect_id，根据 Appfile 中的 app_identifier，会为你下载当前 iTC 中的截图，元数据等等。执行完成后会生成\n一个 Deliverfile 文件，/metadata 和 /screenshots 文件夹。\n\n本地修改 Deliverfile，元数据，或者截图文件，执行 `fastlane deliver` 后，可以上传到 iTunes Connect 上。\n\n如果你想把你本地的 ipa 文件上传到 iTunes Connect 上，可以执行：\n\n`fastlane deliver --ipa \"App.ipa\" --submit_for_review`\n\n如果你之前上传过 ipa 包，想选择一个用来提交审核，可以执行：\n\n`fastlane deliver submit_build --build_number xxxx`\n\n这里 xxxx 是你想选择的 build number。或者，可以直接选择最新的：\n\n`fastlane deliver submit_build --latest`\n\n在 Fastfile 里可以这样写：\n\n\n```\ndeliver(app_version: ENV[\"app_versionName\"],\n        ipa: \"#{ipa_path}\",\n        submit_for_review: false\n       )\n```\n\n\n# 参考文章\n\n> [官方文档](https://github.com/fastlane/fastlane)\n> [Simplify your life with fastlane match](http://macoscope.com/blog/simplify-your-life-with-fastlane-match/#migration)\n\n\n\n\n\n\n","slug":"fastlane+jenkins实现iOS持续集成","published":1,"updated":"2017-10-28T03:38:22.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9aztbpc000jxox0wtzgf0be","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>iOS 应用的证书配置、打包和上线，大家都知道，步骤很繁琐，如果纯人工处理的话是非常浪费时间的，因此，我抽空研究了下 fastlane ，fastlane 是用 Ruby 写的一套自动化工具集，用它可以很轻松的完成证书配置，打包发布等工作，配合 jenkins 使用效果更佳。</p>\n<a id=\"more\"></a>\n<h1 id=\"fastlane\"><a href=\"#fastlane\" class=\"headerlink\" title=\"fastlane\"></a>fastlane</h1><p><img src=\"/2017/04/08/fastlane+jenkins实现iOS持续集成/fastlane-logo.png\" alt=\"logo\"></p>\n<h2 id=\"1-fastlane-的简介\"><a href=\"#1-fastlane-的简介\" class=\"headerlink\" title=\"1. fastlane 的简介\"></a>1. fastlane 的简介</h2><p>fastlane是自动化打包和发布 iOS 和 Android 应用的一套工具集，下图是 fastlane 的一些主要的工具<a href=\"https://fastlane.tools\" target=\"_blank\" rel=\"external\">fastlane tools</a>，如自动化测试，生成截图，生成证书和签名文件，打包，发布程序等。</p>\n<p><img src=\"/2017/04/08/fastlane+jenkins实现iOS持续集成/fastlane-intro-tree.png\" alt=\"image\"></p>\n<p>下面详细讲一下 fastlane 里面的几个主要的工具：</p>\n<table>\n<thead>\n<tr>\n<th>工具</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/scan\" target=\"_blank\" rel=\"external\">scan</a></td>\n<td>自动运行自动化测试工具，并且生成 HTML 报告</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/cert\" target=\"_blank\" rel=\"external\">cert</a></td>\n<td>自动创建管理证书</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/sigh\" target=\"_blank\" rel=\"external\">sigh</a></td>\n<td>自动创建，更新，下载 Provisioning Profile 文件</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/match\" target=\"_blank\" rel=\"external\">match</a></td>\n<td>管理证书和 Provisioning Profile</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/pem\" target=\"_blank\" rel=\"external\">pem</a></td>\n<td>自动生成，更新 Notification 证书</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/snapshot\" target=\"_blank\" rel=\"external\">snapshot</a></td>\n<td>自动截图</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/deliver\" target=\"_blank\" rel=\"external\">deliver</a></td>\n<td>自动上传应用截图，元数据，ipa 文件到 iTunes Connect</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/produce\" target=\"_blank\" rel=\"external\">produce</a></td>\n<td>如果你的产品还没在 iTunes Connect 或者 Apple Developer Center 创建，produce可以自动帮你完成这些工作</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/gym\" target=\"_blank\" rel=\"external\">gym</a></td>\n<td>自动化编译打包工具</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-fastlane-的安装\"><a href=\"#2-fastlane-的安装\" class=\"headerlink\" title=\"2. fastlane 的安装\"></a>2. fastlane 的安装</h2><ol>\n<li><p>确保 Xcode command line 工具是最新版</p>\n<p><code>xcode-select --install</code></p>\n</li>\n<li><p>安装fastlane</p>\n<p>官方提供了三种安装方法，gem、brew、直接下载安装</p>\n<p>简单点，可以直接用 gem 安装：</p>\n<p><code>sudo gem install fastlane -NV</code></p>\n<p>如果安装过程中报错：</p>\n<p><code>ERROR:  While executing gem ... (Errno::EPERM) \nOperation not permitted - /usr/bin/xxxx</code></p>\n<p>可以执行命令：</p>\n<p> <code>sudo gem install -n /usr/local/bin fastlane</code></p>\n<p>安装完成后可以使用 <code>fastlane -v</code> 检查是否安装成功，如果输出下面的结果，表示已安装成功，并且显示版本号。</p>\n<p><code>fastlane installation at path:\n/usr/local/lib/ruby/gems/2.4.0/gems/fastlane-2.25.0/bin/fastlane \n----------------------------- fastlane 2.25.0</code></p>\n</li>\n</ol>\n<h2 id=\"3-fastlane-的使用\"><a href=\"#3-fastlane-的使用\" class=\"headerlink\" title=\"3. fastlane 的使用\"></a>3. fastlane 的使用</h2><h3 id=\"3-1-初始化\"><a href=\"#3-1-初始化\" class=\"headerlink\" title=\"3.1 初始化\"></a>3.1 初始化</h3><p>在 工程的 .xcodeproj 文件的同级目录下，执行</p>\n<p><code>fastlane init</code></p>\n<p>这里会要求你输入 Apple ID，如果是第一次使用的话，还需要输入密码，fastlane 会自动检测当前项目的 App Name 和 App Identifier，也可以手动输入这些信息，如果你没有在 iTC 或者 ADC 中创建的话，他会询问你是否要帮你自动创建，非常智能。</p>\n<p>执行完毕后，会根据你输入的信息，在当前目录下生成一个文件夹 fastlane，在 fastlane 文件夹下会自动生成两个配置文件 Appfile，Fastfile，我们可以修改这两个文件来完成我们所需要的功能。</p>\n<p>如果在 init 的时候选择了在 iTC 中创建 App 的话，fastlane 会自动调用 produce 进行初始化，在 iTC 中成功创建后，fastlane 文件夹里面还会生成一个 Deliverfile 的文件，或者也可以后续手动创建。</p>\n<h3 id=\"3-2-fastlane-管理证书-amp-Provisioning-Profile\"><a href=\"#3-2-fastlane-管理证书-amp-Provisioning-Profile\" class=\"headerlink\" title=\"3.2 fastlane 管理证书 &amp; Provisioning Profile\"></a>3.2 fastlane 管理证书 &amp; Provisioning Profile</h3><h4 id=\"cert\"><a href=\"#cert\" class=\"headerlink\" title=\"cert\"></a>cert</h4><p>自动生成证书，并下载安装到 keychain 中</p>\n<h4 id=\"sigh\"><a href=\"#sigh\" class=\"headerlink\" title=\"sigh\"></a>sigh</h4><p>provisioning profile 的生成，管理，下载，签名等</p>\n<h5 id=\"1-生成\"><a href=\"#1-生成\" class=\"headerlink\" title=\"1. 生成\"></a>1. 生成</h5><p><code>fastlane sigh --development</code></p>\n<h5 id=\"2-下载\"><a href=\"#2-下载\" class=\"headerlink\" title=\"2. 下载\"></a>2. 下载</h5><p><code>fastlane sigh download_all</code></p>\n<h5 id=\"3-管理\"><a href=\"#3-管理\" class=\"headerlink\" title=\"3. 管理\"></a>3. 管理</h5><p><code>fastlane sigh manage</code>  管理，删除过期的profiles<br><code>fastlane sigh repair</code>  修复过期或者无效的profiles</p>\n<h5 id=\"4-重新签名\"><a href=\"#4-重新签名\" class=\"headerlink\" title=\"4. 重新签名\"></a>4. 重新签名</h5><p><code>fastlane sigh resign ./path/app.ipa --signing_identity &quot;iPhone Distribution: Felix Krause&quot; -p &quot;my.mobileprovision&quot;</code></p>\n<h4 id=\"gem\"><a href=\"#gem\" class=\"headerlink\" title=\"gem\"></a>gem</h4><h4 id=\"match-amp-Matchfile\"><a href=\"#match-amp-Matchfile\" class=\"headerlink\" title=\"match &amp; Matchfile\"></a>match &amp; Matchfile</h4><h5 id=\"1-初始化-match\"><a href=\"#1-初始化-match\" class=\"headerlink\" title=\"1. 初始化 match\"></a>1. 初始化 match</h5><p>新建一个私有的 Git 仓库来存放和管理证书和 Provisioning Profiles。</p>\n<p>执行 <code>fastlane match init</code>，按提示输入你的 Git 仓库地址，执行完毕后会生成一个 Matchfile 文件，像这样：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git_url <span class=\"string\">\"https://github.com/fastlane/fastlane/tree/master/certificates\"</span></div><div class=\"line\"></div><div class=\"line\">app_identifier <span class=\"string\">\"tools.fastlane.app\"</span></div><div class=\"line\">username <span class=\"string\">\"user@fastlane.tools\"</span></div></pre></td></tr></table></figure>\n<h5 id=\"2-生成和安装\"><a href=\"#2-生成和安装\" class=\"headerlink\" title=\"2. 生成和安装\"></a>2. 生成和安装</h5><p>这个证书的仓库可以通过分支来管理不同项目的证书和配置文件，而不需要每个项目都创建一个仓库。</p>\n<p>执行 <code>fastlane match</code> 可以从 Git 仓库中下载安装证书和 Provisioning Profile 到电脑中，如果 Git 仓库中没有的话，会创建证书和 profiles 文件，并上传到 Git 仓库中，其他人可以安装使用。</p>\n<p>Git 仓库中的证书是加密过的，执行 match 时，会要求输入密码，创建证书的时候会用这个密码进行加密，安装证书的时候会用这个密码进行解密后安装。</p>\n<p>也可以手动从你的 keychain 中导出证书，然后在你的仓库中，创建 <code>certs/distribution</code> 和 <code>certs/development</code> 目录，分别存放开发和生产证书。</p>\n<p>证书加密方法:</p>\n<p><code>openssl pkcs12 -nocerts -nodes -out key.pem -in certificate.p12</code><br><code>openssl aes-256-cbc -k your_password -in key.pem -out cert_id.p12 -a</code><br><code>openssl aes-256-cbc -k your_password -in certificate.cer -out cert_id.cer -a</code></p>\n<p>这里的 cert_id 可以通过下面的方法来查找当前账户下所有的证书 ID，然后找出你的证书 ID 就是这里的 cert_id。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">require &apos;spaceship&apos;</div><div class=\"line\"></div><div class=\"line\">Spaceship.login(&apos;your@apple.id&apos;)</div><div class=\"line\">Spaceship.select_team</div><div class=\"line\"></div><div class=\"line\">Spaceship.certificate.all.each do |cert| </div><div class=\"line\">  cert_type = Spaceship::Portal::Certificate::CERTIFICATE_TYPE_IDS[cert.type_display_id].to_s.split(&quot;::&quot;)[-1]</div><div class=\"line\">  puts &quot;Cert id: #&#123;cert.id&#125;, name: #&#123;cert.name&#125;, expires: #&#123;cert.expires.strftime(&quot;%Y-%m-%d&quot;)&#125;, type: #&#123;cert_type&#125;&quot;</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>证书加密后存放到相应的目录中，接下来再上传 provisioning profile 文件，可以从 ADC 中下载，然后创建 <code>profiles/development</code>，<code>profiles/adhoc</code>，<code>profiles/appstore</code> 三个目录，分别存放开发，<br>AdHoc，生产环境的配置文件。用上面同样的方法执行 openssl 加密</p>\n<p><code>openssl aes-256-cbc -k your_password -in Development_XXX.mobileprovision -out Development_your.bundle.id.mobileprovision -a</code></p>\n<p>加密完成后生成三个文件如下：</p>\n<p><code>profiles/development/Development_your.bundle.id.mobileprovision</code><br><code>profiles/adhoc/AdHoc_your.bundle.id.mobileprovision\nprofiles/appstore</code><br><code>AppStore_your.bundle.id.mobileprovision</code></p>\n<p>把证书和 profile 上传到你的 Git 仓库中，其他人就可以执行 <code>fastlane match development</code> 来安装。</p>\n<p>如果你不希望修改证书，可以在执行时在后面加 <code>--readonly</code>。</p>\n<h5 id=\"3-管理-1\"><a href=\"#3-管理-1\" class=\"headerlink\" title=\"3. 管理\"></a>3. 管理</h5><p>你也可以像这样，在 Fastfile 里写 lane 来执行，如</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">desc <span class=\"string\">\"match\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:sn_match</span> <span class=\"keyword\">do</span> </div><div class=\"line\">    match(<span class=\"symbol\">git_branch:</span> <span class=\"string\">\"your_branch\"</span>, <span class=\"symbol\">type:</span> <span class=\"string\">\"development\"</span>, <span class=\"symbol\">readonly:</span> <span class=\"literal\">true</span>)</div><div class=\"line\">  <span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>这里可以显示的指定 app_identifier，如</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">match(<span class=\"symbol\">git_branch:</span> <span class=\"string\">\"your_branch\"</span>, <span class=\"symbol\">type:</span> <span class=\"string\">\"development\"</span>, <span class=\"symbol\">app_identifier:</span> <span class=\"string\">\"your.bundle.id\"</span>, <span class=\"symbol\">readonly:</span> <span class=\"literal\">true</span>)</div></pre></td></tr></table></figure>\n<p>如果你有多个 Target，如 Watch，Extension。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">match(<span class=\"symbol\">git_branch:</span> <span class=\"string\">\"your_branch\"</span>, <span class=\"symbol\">app_identifier:</span> [<span class=\"string\">\"com.krausefx.app1\"</span>, <span class=\"string\">\"com.krausefx.app2\"</span>, <span class=\"string\">\"com.krausefx.app3\"</span>], <span class=\"symbol\">readonly:</span> <span class=\"literal\">true</span>)</div></pre></td></tr></table></figure>\n<p>也可以在 Matchfile 中声明：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git_url <span class=\"string\">\"https://github.com/fastlane/fastlane/tree/master/certificates\"</span></div><div class=\"line\"></div><div class=\"line\">app_identifier [<span class=\"string\">\"com.krausefx.app1\"</span>, <span class=\"string\">\"com.krausefx.app2\"</span>, <span class=\"string\">\"com.krausefx.app3\"</span>]</div></pre></td></tr></table></figure>\n<p>你也可以通过 match 来注册新的设备，通过 <code>force_for_new_devices</code> 来更新 profiles 到Git 仓库中。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">desc <span class=\"string\">\"match\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:sn_match</span> <span class=\"keyword\">do</span> </div><div class=\"line\">    register_devices(<span class=\"symbol\">devices_file:</span> <span class=\"string\">\"./devices.txt\"</span>)</div><div class=\"line\">    match(<span class=\"symbol\">git_branch:</span> <span class=\"string\">\"your_branch\"</span>, <span class=\"symbol\">force_for_new_devices:</span> <span class=\"literal\">true</span>)</div><div class=\"line\">  <span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p><code>force_for_new_devices</code> 可以自动进行设备检测，是否距离上次 match 有新的设备加入，并更新你的仓库中的 profile 文件。</p>\n<h3 id=\"3-3-fastlane-自动化测试\"><a href=\"#3-3-fastlane-自动化测试\" class=\"headerlink\" title=\"3.3 fastlane 自动化测试\"></a>3.3 fastlane 自动化测试</h3><h4 id=\"scan-amp-Scanfile\"><a href=\"#scan-amp-Scanfile\" class=\"headerlink\" title=\"scan &amp; Scanfile\"></a>scan &amp; Scanfile</h4><p>Test 和 UITest</p>\n<h3 id=\"fastlane-打包\"><a href=\"#fastlane-打包\" class=\"headerlink\" title=\"fastlane 打包\"></a>fastlane 打包</h3><h4 id=\"Appfile\"><a href=\"#Appfile\" class=\"headerlink\" title=\"Appfile\"></a>Appfile</h4><p><a href=\"https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Appfile.md\" target=\"_blank\" rel=\"external\">Appfile</a>，存放了一些 app 本身的信息，如，apple_id, app_identifier, team_id 等等。</p>\n<p>默认情况下，Appfile 如下所示：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">app_identifier <span class=\"string\">\"com.mzl.testapp\"</span> <span class=\"comment\"># The bundle identifier of your app</span></div><div class=\"line\">apple_id <span class=\"string\">\"mlijin9011@163.com\"</span>  <span class=\"comment\"># Your Apple email address</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># You can uncomment the lines below and add your own </span></div><div class=\"line\"><span class=\"comment\"># team selection in case you're in multiple teams</span></div><div class=\"line\"><span class=\"comment\"># team_name \"Team Name\"</span></div><div class=\"line\"><span class=\"comment\"># team_id \"Q2CBPJ58CA\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># To select a team for iTunes Connect use</span></div><div class=\"line\"><span class=\"comment\"># itc_team_name \"Company Name\"</span></div><div class=\"line\"><span class=\"comment\"># itc_team_id \"18742801\"</span></div></pre></td></tr></table></figure>\n<p>如果你的 iTunes Connect 和 Apple Developer Portal 有不同的证书，请使用以下代码：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">app_identifier <span class=\"string\">\"com.mzl.testapp\"</span>       <span class=\"comment\"># The bundle identifier of your app</span></div><div class=\"line\"></div><div class=\"line\">apple_dev_portal_id <span class=\"string\">\"portal@company.com\"</span>  <span class=\"comment\"># Apple Developer Account</span></div><div class=\"line\">itunes_connect_id <span class=\"string\">\"tunes@company.com\"</span>     <span class=\"comment\"># iTunes Connect Account</span></div><div class=\"line\"></div><div class=\"line\">team_id <span class=\"string\">\"Q2CBPJ58CA\"</span> <span class=\"comment\"># Developer Portal Team ID</span></div><div class=\"line\">itc_team_id <span class=\"string\">\"18742801\"</span> <span class=\"comment\"># iTunes Connect Team ID</span></div></pre></td></tr></table></figure>\n<p>如果你的项目在每个环境（测试版，Store版，企业版）中的 bundle id 不同的话，则可以使用 for_platform 或 for_lane 模块声明定义。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">app_identifier <span class=\"string\">\"com.mzl.testapp\"</span></div><div class=\"line\">apple_id <span class=\"string\">\"mlijin9011@163.com\"</span></div><div class=\"line\">team_id <span class=\"string\">\"Q2CBPJ58CC\"</span></div><div class=\"line\"></div><div class=\"line\">for_platform <span class=\"symbol\">:ios</span> <span class=\"keyword\">do</span></div><div class=\"line\">  team_id <span class=\"string\">'123'</span> <span class=\"comment\"># for all iOS related things</span></div><div class=\"line\">  for_lane <span class=\"symbol\">:build_inhouse</span> <span class=\"keyword\">do</span></div><div class=\"line\">    app_identifier <span class=\"string\">'com.mzl.testapp.inhouse'</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>如果你想从你的 Fastfile 中访问这些值的话，可以在 Fastfile 中这样写</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">identifier = CredentialsManager::AppfileConfig.try_fetch_value(<span class=\"symbol\">:app_identifier</span>)</div><div class=\"line\">team_id = CredentialsManager::AppfileConfig.try_fetch_value(<span class=\"symbol\">:team_id</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"Fastfile\"><a href=\"#Fastfile\" class=\"headerlink\" title=\"Fastfile\"></a>Fastfile</h4><p><a href=\"https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md\" target=\"_blank\" rel=\"external\">Fastfile</a> 是最重要的一个文件，主要是些 lane 的集合，在这里可以编写和定制我们的自动化脚本，所有的流程控制功能都写在这个文件里面，利用 lane 来完成我们的自动化需求。</p>\n<p>Fastfile 中可以同时支持不同的平台，iOS，macOS，Android，针对不同的平台，可以自定义自己的脚本，像这样：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastlane_version <span class=\"string\">\"2.14.2\"</span></div><div class=\"line\">default_platform <span class=\"symbol\">:ios</span></div><div class=\"line\"></div><div class=\"line\">before_all <span class=\"keyword\">do</span></div><div class=\"line\">  puts <span class=\"string\">\"This block is executed before every action of all platforms\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">platform <span class=\"symbol\">:ios</span> <span class=\"keyword\">do</span></div><div class=\"line\">  before_all <span class=\"keyword\">do</span></div><div class=\"line\">    cocoapods</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"build beta\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:beta</span> <span class=\"keyword\">do</span></div><div class=\"line\">    gym</div><div class=\"line\">    hockey</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  after_all <span class=\"keyword\">do</span></div><div class=\"line\">    puts <span class=\"string\">\"Finished iOS related work\"</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">platform <span class=\"symbol\">:mac</span> <span class=\"keyword\">do</span></div><div class=\"line\">  lane <span class=\"symbol\">:beta</span> <span class=\"keyword\">do</span></div><div class=\"line\">    xcodebuild</div><div class=\"line\">    hockey</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">lane <span class=\"symbol\">:test</span> <span class=\"keyword\">do</span></div><div class=\"line\">  puts <span class=\"string\">\"this lane is not platform specific\"</span></div><div class=\"line\">  xctool</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">after_all <span class=\"keyword\">do</span></div><div class=\"line\">  puts <span class=\"string\">\"Executed after every lane of both Mac and iPhone\"</span></div><div class=\"line\">  slack</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">error <span class=\"keyword\">do</span> <span class=\"params\">|lane, exception|</span></div><div class=\"line\">  puts <span class=\"string\">\"Executed when every lane of both Mac and iPhone has error\"</span></div><div class=\"line\">  slack</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>fastlane_version：指定fastlane使用的最小版本<br>default_platform：指定当前默认的平台，可以选择 ios/android/mac<br>before_all：是在执行每一个 lane 之前都会调用这部分，所以如果有一些前提性的操作，可以写在这里，比如 cocoapods，match 等。最外面的 before_all 表示所有平台的都会执行，写在 platform ios 里面的 before_all 是只有执行 ios 平台的lane 才会执行到的。<br>after_all：同理，是在每个 lane 执行完成之后都会执行这部分的内容<br>error：每个 lane 执行出错就会执行这部分的内容<br>desc：对 lane 的描述，fastlane 会自动将 desc 的内容生成说明文档<br>lane：任务，执行的时候使用 fastlane [ios] lane名称，如上可以这样用：<code>fastlane ios beta</code></p>\n<p>fastlane 提供了很多 <a href=\"https://docs.fastlane.tools/actions\" target=\"_blank\" rel=\"external\">action</a> 或者 plugin 可以在 Fastfile 的 lane 里面调用，如上面提到的 match，sigh，gym，deliver 等，还有插件 cocoapods 等。</p>\n<p>贴一段我项目中使用的 Fastfile 的一部分看下：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastlane_version <span class=\"string\">\"2.23.0\"</span></div><div class=\"line\"></div><div class=\"line\">default_platform <span class=\"symbol\">:ios</span></div><div class=\"line\"></div><div class=\"line\">PROJECT_FILE_PATH = <span class=\"string\">'MyProject.xcodeproj'</span></div><div class=\"line\">OUTPUT_PATH = <span class=\"string\">'build/'</span></div><div class=\"line\">APP_NAME = <span class=\"string\">'MyProject'</span></div><div class=\"line\">SCHEME_NAME = <span class=\"string\">'MyProject'</span></div><div class=\"line\">PLIST_FILE_PATH = <span class=\"string\">'MyProject/Info.plist'</span></div><div class=\"line\"></div><div class=\"line\">INHOUSE_IDENTIFIER = <span class=\"string\">'com.bundle.id.inhouse'</span></div><div class=\"line\">APPSTORE_IDENTIFIER = <span class=\"string\">'com.bundle.id'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 上传 ipa 包的平台，可以用 蒲公英，Bugly 等替代</span></div><div class=\"line\">OTA_SERVER_URL = <span class=\"string\">'http://ota.client.xxx.xxx.cn/ios/upload'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 更新bundle id信息，修改app identifier</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_bundle_id</span><span class=\"params\">(app_id)</span></span></div><div class=\"line\">  say <span class=\"string\">'update bundle id'</span></div><div class=\"line\">  update_app_identifier(<span class=\"symbol\">xcodeproj:</span> PROJECT_FILE_PATH,</div><div class=\"line\">                        <span class=\"symbol\">plist_path:</span> PLIST_FILE_PATH,</div><div class=\"line\">                        <span class=\"symbol\">app_identifier:</span> app_id)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 修改build号</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_build_version</span><span class=\"params\">(options)</span></span></div><div class=\"line\">  say <span class=\"string\">'update build version'</span></div><div class=\"line\"></div><div class=\"line\">  buildVersion = options[<span class=\"symbol\">:build</span>]</div><div class=\"line\">  set_info_plist_value(<span class=\"symbol\">path:</span> PLIST_FILE_PATH,</div><div class=\"line\">                       <span class=\"symbol\">key:</span> <span class=\"string\">\"ProjectBuildVersion\"</span>,</div><div class=\"line\">                       <span class=\"symbol\">value:</span> buildVersion)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 修改bundle号</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_bundle_version</span><span class=\"params\">(typePrefix,options)</span></span></div><div class=\"line\">  say <span class=\"string\">'update bundle version'</span></div><div class=\"line\"></div><div class=\"line\">  bundleVersion = options[<span class=\"symbol\">:build</span>] + <span class=\"string\">\"<span class=\"subst\">#&#123;typePrefix&#125;</span>\"</span></div><div class=\"line\">  set_info_plist_value(<span class=\"symbol\">path:</span> PLIST_FILE_PATH,</div><div class=\"line\">                       <span class=\"symbol\">key:</span> <span class=\"string\">\"CFBundleVersion\"</span>,</div><div class=\"line\">                       <span class=\"symbol\">value:</span> bundleVersion)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 打包</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generate_ipa</span><span class=\"params\">(configuration,exportMethod,options)</span></span></div><div class=\"line\">  say <span class=\"string\">'generate ipa'</span></div><div class=\"line\"></div><div class=\"line\">  fullVersion = get_version_number + <span class=\"string\">\"_\"</span> + options[<span class=\"symbol\">:build</span>]</div><div class=\"line\">  outputName = <span class=\"string\">\"<span class=\"subst\">#&#123;APP_NAME&#125;</span>_V<span class=\"subst\">#&#123;fullVersion&#125;</span>_<span class=\"subst\">#&#123;configuration&#125;</span>\"</span></div><div class=\"line\">  outputPath = <span class=\"string\">\"<span class=\"subst\">#&#123;OUTPUT_PATH&#125;</span><span class=\"subst\">#&#123;outputName&#125;</span>/\"</span></div><div class=\"line\"></div><div class=\"line\">  gym(</div><div class=\"line\">    <span class=\"symbol\">scheme:</span> <span class=\"string\">\"<span class=\"subst\">#&#123;SCHEME_NAME&#125;</span>\"</span>,</div><div class=\"line\">    <span class=\"symbol\">clean:</span> <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"symbol\">output_directory:</span> <span class=\"string\">\"<span class=\"subst\">#&#123;outputPath&#125;</span>\"</span>,</div><div class=\"line\">    <span class=\"symbol\">output_name:</span> <span class=\"string\">\"<span class=\"subst\">#&#123;outputName&#125;</span>.ipa\"</span>,</div><div class=\"line\">    <span class=\"symbol\">configuration:</span> <span class=\"string\">\"<span class=\"subst\">#&#123;configuration&#125;</span>\"</span>,</div><div class=\"line\">    <span class=\"symbol\">include_symbols:</span> <span class=\"string\">\"true\"</span>,</div><div class=\"line\">    <span class=\"comment\"># archive_path: \"#&#123;outputPath&#125;\",</span></div><div class=\"line\">    <span class=\"comment\"># 指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, development, 和developer-id</span></div><div class=\"line\">    <span class=\"symbol\">export_method:</span> <span class=\"string\">\"<span class=\"subst\">#&#123;exportMethod&#125;</span>\"</span></div><div class=\"line\">  )</div><div class=\"line\"></div><div class=\"line\">  upload_ota(<span class=\"string\">\"../<span class=\"subst\">#&#123;outputPath&#125;</span>\"</span>, outputName, configuration)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 上传 OTA</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upload_ota</span><span class=\"params\">(output_path, app_name, configuration)</span></span></div><div class=\"line\">  say <span class=\"string\">'upload ipa to ota'</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># 99-AppStore包, 0-正式包, 1-开发临时测试包, 2-第三方渠道包, 3-每日构建包</span></div><div class=\"line\">  <span class=\"comment\"># 默认为1</span></div><div class=\"line\">  force_bundle_id = APPSTORE_IDENTIFIER</div><div class=\"line\">  type = <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">if</span> configuration == <span class=\"string\">\"Inhouse\"</span></div><div class=\"line\">    force_bundle_id = INHOUSE_IDENTIFIER</div><div class=\"line\">    type = <span class=\"number\">2</span></div><div class=\"line\">  <span class=\"keyword\">elsif</span> configuration == <span class=\"string\">\"AdHoc\"</span></div><div class=\"line\">    type = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">elsif</span> configuration == <span class=\"string\">\"Release\"</span></div><div class=\"line\">    type = <span class=\"number\">99</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  sh <span class=\"string\">\"curl -# -S -F 'pkg_file=@<span class=\"subst\">#&#123;output_path&#125;</span><span class=\"subst\">#&#123;app_name&#125;</span>.ipa' -F 'dsym_file=@<span class=\"subst\">#&#123;output_path&#125;</span><span class=\"subst\">#&#123;app_name&#125;</span>.app.dSYM.zip' -F 'version=<span class=\"subst\">#&#123;app_name&#125;</span>' -F 'description=<span class=\"subst\">#&#123;app_name&#125;</span>' -F 'app_bundle_id=<span class=\"subst\">#&#123;APPSTORE_IDENTIFIER&#125;</span>' -F 'pkg_type=<span class=\"subst\">#&#123;type&#125;</span>' -F 'force_bundle_id=<span class=\"subst\">#&#123;force_bundle_id&#125;</span>' <span class=\"subst\">#&#123;OTA_SERVER_URL&#125;</span>\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">platform <span class=\"symbol\">:ios</span> <span class=\"keyword\">do</span></div><div class=\"line\">  before_all <span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"comment\"># ENV[\"SLACK_URL\"] = \"https://hooks.slack.com/services/...\"</span></div><div class=\"line\">    <span class=\"comment\"># cocoapods</span></div><div class=\"line\">    puts File.absolute_path(<span class=\"string\">\".\"</span>)</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"更新build号\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:buildVersion</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    update_build_version(options)</div><div class=\"line\">  <span class=\"keyword\">end</span> </div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"更新Debug版bundle号\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:debugBundleVersion</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    update_bundle_version(<span class=\"string\">\".Debug\"</span>,options)</div><div class=\"line\">  <span class=\"keyword\">end</span> </div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"更新AppStore版bundle号\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:storeBundleVersion</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    update_bundle_version(<span class=\"string\">\"\"</span>,options)</div><div class=\"line\">  <span class=\"keyword\">end</span>   </div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"打Debug包\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:build_debug</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    buildVersion options</div><div class=\"line\">    generate_ipa(<span class=\"string\">\"Debug\"</span>,<span class=\"string\">\"development\"</span>,options)</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"打Inhouse包\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:build_inhouse</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    buildVersion options</div><div class=\"line\">    update_bundle_id(<span class=\"string\">\"<span class=\"subst\">#&#123;INHOUSE_IDENTIFIER&#125;</span>\"</span>)</div><div class=\"line\">    generate_ipa(<span class=\"string\">\"Inhouse\"</span>,<span class=\"string\">\"enterprise\"</span>,options)</div><div class=\"line\">    <span class=\"comment\"># 还原</span></div><div class=\"line\">    update_bundle_id(<span class=\"string\">\"<span class=\"subst\">#&#123;APPSTORE_IDENTIFIER&#125;</span>\"</span>)</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"打Adhoc包\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:build_adhoc</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    buildVersion options</div><div class=\"line\">    generate_ipa(<span class=\"string\">\"AdHoc\"</span>,<span class=\"string\">\"ad-hoc\"</span>,options)</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"打Alpha包\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:build_alpha</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    development options</div><div class=\"line\">    inhouse options</div><div class=\"line\">    adhoc options</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"打AppStore包\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:build_release</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    buildVersion options</div><div class=\"line\">    storeBundleVersion options</div><div class=\"line\">    update_bundle_id(<span class=\"string\">\"<span class=\"subst\">#&#123;APPSTORE_IDENTIFIER&#125;</span>\"</span>)</div><div class=\"line\">    generate_ipa(<span class=\"string\">\"Release\"</span>,<span class=\"string\">\"app-store\"</span>,options)</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"match\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:sn_match</span> <span class=\"keyword\">do</span> </div><div class=\"line\">    <span class=\"comment\"># 这两行可以注册新设备，并且自动更新仓库下的profiles文件</span></div><div class=\"line\">    <span class=\"comment\"># register_devices(devices_file: \"./devices.txt\")</span></div><div class=\"line\">    <span class=\"comment\"># match(git_branch: \"branch\", type: \"development\", force_for_new_devices: true)</span></div><div class=\"line\">    match(<span class=\"symbol\">git_branch:</span> <span class=\"string\">\"branch\"</span>, <span class=\"symbol\">readonly:</span> <span class=\"literal\">true</span>)</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  after_all <span class=\"keyword\">do</span> <span class=\"params\">|lane|</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># slack(</span></div><div class=\"line\">    <span class=\"comment\">#   message: \"Successfully deployed new App Update.\"</span></div><div class=\"line\">    <span class=\"comment\"># )</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  error <span class=\"keyword\">do</span> <span class=\"params\">|lane, exception|</span></div><div class=\"line\">    <span class=\"comment\"># slack(</span></div><div class=\"line\">    <span class=\"comment\">#   message: exception.message,</span></div><div class=\"line\">    <span class=\"comment\">#   success: false</span></div><div class=\"line\">    <span class=\"comment\"># )</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md</span></div><div class=\"line\"><span class=\"comment\"># All available actions: https://docs.fastlane.tools/actions</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># fastlane reports which actions are used</span></div><div class=\"line\"><span class=\"comment\"># No personal data is recorded. Learn more at https://github.com/fastlane/enhancer</span></div></pre></td></tr></table></figure>\n<h3 id=\"3-4-fastlane-发布\"><a href=\"#3-4-fastlane-发布\" class=\"headerlink\" title=\"3.4 fastlane 发布\"></a>3.4 fastlane 发布</h3><h4 id=\"deliver-amp-Deliverfile\"><a href=\"#deliver-amp-Deliverfile\" class=\"headerlink\" title=\"deliver &amp; Deliverfile\"></a>deliver &amp; Deliverfile</h4><p><a href=\"https://github.com/fastlane/fastlane/blob/master/deliver/Deliverfile.md\" target=\"_blank\" rel=\"external\">Deliverfile</a> 主要是用于发布上传时的配置文件。</p>\n<p>前面介绍了，如果在 <code>fastlane init</code> 的时候选择了在 iTunes Connect 创建 App，那么 fastlane 会调用 produce 进行初始化，同时会执行 <code>deliver init</code>，执行完毕后会创建一个 Deliverfile 文件，如果没有在初始化的时候选择执行 produce 流程当然 deliver 也不会执行，可以手动执行 <code>fastlane deliver init</code> 创建。</p>\n<p>执行时，会自动登录你在 Appfile 中设置的 itunes_connect_id，根据 Appfile 中的 app_identifier，会为你下载当前 iTC 中的截图，元数据等等。执行完成后会生成<br>一个 Deliverfile 文件，/metadata 和 /screenshots 文件夹。</p>\n<p>本地修改 Deliverfile，元数据，或者截图文件，执行 <code>fastlane deliver</code> 后，可以上传到 iTunes Connect 上。</p>\n<p>如果你想把你本地的 ipa 文件上传到 iTunes Connect 上，可以执行：</p>\n<p><code>fastlane deliver --ipa &quot;App.ipa&quot; --submit_for_review</code></p>\n<p>如果你之前上传过 ipa 包，想选择一个用来提交审核，可以执行：</p>\n<p><code>fastlane deliver submit_build --build_number xxxx</code></p>\n<p>这里 xxxx 是你想选择的 build number。或者，可以直接选择最新的：</p>\n<p><code>fastlane deliver submit_build --latest</code></p>\n<p>在 Fastfile 里可以这样写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deliver(app_version: ENV[&quot;app_versionName&quot;],</div><div class=\"line\">        ipa: &quot;#&#123;ipa_path&#125;&quot;,</div><div class=\"line\">        submit_for_review: false</div><div class=\"line\">       )</div></pre></td></tr></table></figure>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><blockquote>\n<p><a href=\"https://github.com/fastlane/fastlane\" target=\"_blank\" rel=\"external\">官方文档</a><br><a href=\"http://macoscope.com/blog/simplify-your-life-with-fastlane-match/#migration\" target=\"_blank\" rel=\"external\">Simplify your life with fastlane match</a></p>\n</blockquote>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>iOS 应用的证书配置、打包和上线，大家都知道，步骤很繁琐，如果纯人工处理的话是非常浪费时间的，因此，我抽空研究了下 fastlane ，fastlane 是用 Ruby 写的一套自动化工具集，用它可以很轻松的完成证书配置，打包发布等工作，配合 jenkins 使用效果更佳。</p>","more":"<h1 id=\"fastlane\"><a href=\"#fastlane\" class=\"headerlink\" title=\"fastlane\"></a>fastlane</h1><p><img src=\"/2017/04/08/fastlane+jenkins实现iOS持续集成/fastlane-logo.png\" alt=\"logo\"></p>\n<h2 id=\"1-fastlane-的简介\"><a href=\"#1-fastlane-的简介\" class=\"headerlink\" title=\"1. fastlane 的简介\"></a>1. fastlane 的简介</h2><p>fastlane是自动化打包和发布 iOS 和 Android 应用的一套工具集，下图是 fastlane 的一些主要的工具<a href=\"https://fastlane.tools\">fastlane tools</a>，如自动化测试，生成截图，生成证书和签名文件，打包，发布程序等。</p>\n<p><img src=\"/2017/04/08/fastlane+jenkins实现iOS持续集成/fastlane-intro-tree.png\" alt=\"image\"></p>\n<p>下面详细讲一下 fastlane 里面的几个主要的工具：</p>\n<table>\n<thead>\n<tr>\n<th>工具</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/scan\">scan</a></td>\n<td>自动运行自动化测试工具，并且生成 HTML 报告</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/cert\">cert</a></td>\n<td>自动创建管理证书</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/sigh\">sigh</a></td>\n<td>自动创建，更新，下载 Provisioning Profile 文件</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/match\">match</a></td>\n<td>管理证书和 Provisioning Profile</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/pem\">pem</a></td>\n<td>自动生成，更新 Notification 证书</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/snapshot\">snapshot</a></td>\n<td>自动截图</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/deliver\">deliver</a></td>\n<td>自动上传应用截图，元数据，ipa 文件到 iTunes Connect</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/produce\">produce</a></td>\n<td>如果你的产品还没在 iTunes Connect 或者 Apple Developer Center 创建，produce可以自动帮你完成这些工作</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fastlane/fastlane/tree/master/gym\">gym</a></td>\n<td>自动化编译打包工具</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-fastlane-的安装\"><a href=\"#2-fastlane-的安装\" class=\"headerlink\" title=\"2. fastlane 的安装\"></a>2. fastlane 的安装</h2><ol>\n<li><p>确保 Xcode command line 工具是最新版</p>\n<p><code>xcode-select --install</code></p>\n</li>\n<li><p>安装fastlane</p>\n<p>官方提供了三种安装方法，gem、brew、直接下载安装</p>\n<p>简单点，可以直接用 gem 安装：</p>\n<p><code>sudo gem install fastlane -NV</code></p>\n<p>如果安装过程中报错：</p>\n<p><code>ERROR:  While executing gem ... (Errno::EPERM) \nOperation not permitted - /usr/bin/xxxx</code></p>\n<p>可以执行命令：</p>\n<p> <code>sudo gem install -n /usr/local/bin fastlane</code></p>\n<p>安装完成后可以使用 <code>fastlane -v</code> 检查是否安装成功，如果输出下面的结果，表示已安装成功，并且显示版本号。</p>\n<p><code>fastlane installation at path:\n/usr/local/lib/ruby/gems/2.4.0/gems/fastlane-2.25.0/bin/fastlane \n----------------------------- fastlane 2.25.0</code></p>\n</li>\n</ol>\n<h2 id=\"3-fastlane-的使用\"><a href=\"#3-fastlane-的使用\" class=\"headerlink\" title=\"3. fastlane 的使用\"></a>3. fastlane 的使用</h2><h3 id=\"3-1-初始化\"><a href=\"#3-1-初始化\" class=\"headerlink\" title=\"3.1 初始化\"></a>3.1 初始化</h3><p>在 工程的 .xcodeproj 文件的同级目录下，执行</p>\n<p><code>fastlane init</code></p>\n<p>这里会要求你输入 Apple ID，如果是第一次使用的话，还需要输入密码，fastlane 会自动检测当前项目的 App Name 和 App Identifier，也可以手动输入这些信息，如果你没有在 iTC 或者 ADC 中创建的话，他会询问你是否要帮你自动创建，非常智能。</p>\n<p>执行完毕后，会根据你输入的信息，在当前目录下生成一个文件夹 fastlane，在 fastlane 文件夹下会自动生成两个配置文件 Appfile，Fastfile，我们可以修改这两个文件来完成我们所需要的功能。</p>\n<p>如果在 init 的时候选择了在 iTC 中创建 App 的话，fastlane 会自动调用 produce 进行初始化，在 iTC 中成功创建后，fastlane 文件夹里面还会生成一个 Deliverfile 的文件，或者也可以后续手动创建。</p>\n<h3 id=\"3-2-fastlane-管理证书-amp-Provisioning-Profile\"><a href=\"#3-2-fastlane-管理证书-amp-Provisioning-Profile\" class=\"headerlink\" title=\"3.2 fastlane 管理证书 &amp; Provisioning Profile\"></a>3.2 fastlane 管理证书 &amp; Provisioning Profile</h3><h4 id=\"cert\"><a href=\"#cert\" class=\"headerlink\" title=\"cert\"></a>cert</h4><p>自动生成证书，并下载安装到 keychain 中</p>\n<h4 id=\"sigh\"><a href=\"#sigh\" class=\"headerlink\" title=\"sigh\"></a>sigh</h4><p>provisioning profile 的生成，管理，下载，签名等</p>\n<h5 id=\"1-生成\"><a href=\"#1-生成\" class=\"headerlink\" title=\"1. 生成\"></a>1. 生成</h5><p><code>fastlane sigh --development</code></p>\n<h5 id=\"2-下载\"><a href=\"#2-下载\" class=\"headerlink\" title=\"2. 下载\"></a>2. 下载</h5><p><code>fastlane sigh download_all</code></p>\n<h5 id=\"3-管理\"><a href=\"#3-管理\" class=\"headerlink\" title=\"3. 管理\"></a>3. 管理</h5><p><code>fastlane sigh manage</code>  管理，删除过期的profiles<br><code>fastlane sigh repair</code>  修复过期或者无效的profiles</p>\n<h5 id=\"4-重新签名\"><a href=\"#4-重新签名\" class=\"headerlink\" title=\"4. 重新签名\"></a>4. 重新签名</h5><p><code>fastlane sigh resign ./path/app.ipa --signing_identity &quot;iPhone Distribution: Felix Krause&quot; -p &quot;my.mobileprovision&quot;</code></p>\n<h4 id=\"gem\"><a href=\"#gem\" class=\"headerlink\" title=\"gem\"></a>gem</h4><h4 id=\"match-amp-Matchfile\"><a href=\"#match-amp-Matchfile\" class=\"headerlink\" title=\"match &amp; Matchfile\"></a>match &amp; Matchfile</h4><h5 id=\"1-初始化-match\"><a href=\"#1-初始化-match\" class=\"headerlink\" title=\"1. 初始化 match\"></a>1. 初始化 match</h5><p>新建一个私有的 Git 仓库来存放和管理证书和 Provisioning Profiles。</p>\n<p>执行 <code>fastlane match init</code>，按提示输入你的 Git 仓库地址，执行完毕后会生成一个 Matchfile 文件，像这样：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git_url <span class=\"string\">\"https://github.com/fastlane/fastlane/tree/master/certificates\"</span></div><div class=\"line\"></div><div class=\"line\">app_identifier <span class=\"string\">\"tools.fastlane.app\"</span></div><div class=\"line\">username <span class=\"string\">\"user@fastlane.tools\"</span></div></pre></td></tr></table></figure>\n<h5 id=\"2-生成和安装\"><a href=\"#2-生成和安装\" class=\"headerlink\" title=\"2. 生成和安装\"></a>2. 生成和安装</h5><p>这个证书的仓库可以通过分支来管理不同项目的证书和配置文件，而不需要每个项目都创建一个仓库。</p>\n<p>执行 <code>fastlane match</code> 可以从 Git 仓库中下载安装证书和 Provisioning Profile 到电脑中，如果 Git 仓库中没有的话，会创建证书和 profiles 文件，并上传到 Git 仓库中，其他人可以安装使用。</p>\n<p>Git 仓库中的证书是加密过的，执行 match 时，会要求输入密码，创建证书的时候会用这个密码进行加密，安装证书的时候会用这个密码进行解密后安装。</p>\n<p>也可以手动从你的 keychain 中导出证书，然后在你的仓库中，创建 <code>certs/distribution</code> 和 <code>certs/development</code> 目录，分别存放开发和生产证书。</p>\n<p>证书加密方法:</p>\n<p><code>openssl pkcs12 -nocerts -nodes -out key.pem -in certificate.p12</code><br><code>openssl aes-256-cbc -k your_password -in key.pem -out cert_id.p12 -a</code><br><code>openssl aes-256-cbc -k your_password -in certificate.cer -out cert_id.cer -a</code></p>\n<p>这里的 cert_id 可以通过下面的方法来查找当前账户下所有的证书 ID，然后找出你的证书 ID 就是这里的 cert_id。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">require &apos;spaceship&apos;</div><div class=\"line\"></div><div class=\"line\">Spaceship.login(&apos;your@apple.id&apos;)</div><div class=\"line\">Spaceship.select_team</div><div class=\"line\"></div><div class=\"line\">Spaceship.certificate.all.each do |cert| </div><div class=\"line\">  cert_type = Spaceship::Portal::Certificate::CERTIFICATE_TYPE_IDS[cert.type_display_id].to_s.split(&quot;::&quot;)[-1]</div><div class=\"line\">  puts &quot;Cert id: #&#123;cert.id&#125;, name: #&#123;cert.name&#125;, expires: #&#123;cert.expires.strftime(&quot;%Y-%m-%d&quot;)&#125;, type: #&#123;cert_type&#125;&quot;</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>证书加密后存放到相应的目录中，接下来再上传 provisioning profile 文件，可以从 ADC 中下载，然后创建 <code>profiles/development</code>，<code>profiles/adhoc</code>，<code>profiles/appstore</code> 三个目录，分别存放开发，<br>AdHoc，生产环境的配置文件。用上面同样的方法执行 openssl 加密</p>\n<p><code>openssl aes-256-cbc -k your_password -in Development_XXX.mobileprovision -out Development_your.bundle.id.mobileprovision -a</code></p>\n<p>加密完成后生成三个文件如下：</p>\n<p><code>profiles/development/Development_your.bundle.id.mobileprovision</code><br><code>profiles/adhoc/AdHoc_your.bundle.id.mobileprovision\nprofiles/appstore</code><br><code>AppStore_your.bundle.id.mobileprovision</code></p>\n<p>把证书和 profile 上传到你的 Git 仓库中，其他人就可以执行 <code>fastlane match development</code> 来安装。</p>\n<p>如果你不希望修改证书，可以在执行时在后面加 <code>--readonly</code>。</p>\n<h5 id=\"3-管理-1\"><a href=\"#3-管理-1\" class=\"headerlink\" title=\"3. 管理\"></a>3. 管理</h5><p>你也可以像这样，在 Fastfile 里写 lane 来执行，如</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">desc <span class=\"string\">\"match\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:sn_match</span> <span class=\"keyword\">do</span> </div><div class=\"line\">    match(<span class=\"symbol\">git_branch:</span> <span class=\"string\">\"your_branch\"</span>, <span class=\"symbol\">type:</span> <span class=\"string\">\"development\"</span>, <span class=\"symbol\">readonly:</span> <span class=\"literal\">true</span>)</div><div class=\"line\">  <span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>这里可以显示的指定 app_identifier，如</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">match(<span class=\"symbol\">git_branch:</span> <span class=\"string\">\"your_branch\"</span>, <span class=\"symbol\">type:</span> <span class=\"string\">\"development\"</span>, <span class=\"symbol\">app_identifier:</span> <span class=\"string\">\"your.bundle.id\"</span>, <span class=\"symbol\">readonly:</span> <span class=\"literal\">true</span>)</div></pre></td></tr></table></figure>\n<p>如果你有多个 Target，如 Watch，Extension。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">match(<span class=\"symbol\">git_branch:</span> <span class=\"string\">\"your_branch\"</span>, <span class=\"symbol\">app_identifier:</span> [<span class=\"string\">\"com.krausefx.app1\"</span>, <span class=\"string\">\"com.krausefx.app2\"</span>, <span class=\"string\">\"com.krausefx.app3\"</span>], <span class=\"symbol\">readonly:</span> <span class=\"literal\">true</span>)</div></pre></td></tr></table></figure>\n<p>也可以在 Matchfile 中声明：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git_url <span class=\"string\">\"https://github.com/fastlane/fastlane/tree/master/certificates\"</span></div><div class=\"line\"></div><div class=\"line\">app_identifier [<span class=\"string\">\"com.krausefx.app1\"</span>, <span class=\"string\">\"com.krausefx.app2\"</span>, <span class=\"string\">\"com.krausefx.app3\"</span>]</div></pre></td></tr></table></figure>\n<p>你也可以通过 match 来注册新的设备，通过 <code>force_for_new_devices</code> 来更新 profiles 到Git 仓库中。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">desc <span class=\"string\">\"match\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:sn_match</span> <span class=\"keyword\">do</span> </div><div class=\"line\">    register_devices(<span class=\"symbol\">devices_file:</span> <span class=\"string\">\"./devices.txt\"</span>)</div><div class=\"line\">    match(<span class=\"symbol\">git_branch:</span> <span class=\"string\">\"your_branch\"</span>, <span class=\"symbol\">force_for_new_devices:</span> <span class=\"literal\">true</span>)</div><div class=\"line\">  <span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p><code>force_for_new_devices</code> 可以自动进行设备检测，是否距离上次 match 有新的设备加入，并更新你的仓库中的 profile 文件。</p>\n<h3 id=\"3-3-fastlane-自动化测试\"><a href=\"#3-3-fastlane-自动化测试\" class=\"headerlink\" title=\"3.3 fastlane 自动化测试\"></a>3.3 fastlane 自动化测试</h3><h4 id=\"scan-amp-Scanfile\"><a href=\"#scan-amp-Scanfile\" class=\"headerlink\" title=\"scan &amp; Scanfile\"></a>scan &amp; Scanfile</h4><p>Test 和 UITest</p>\n<h3 id=\"fastlane-打包\"><a href=\"#fastlane-打包\" class=\"headerlink\" title=\"fastlane 打包\"></a>fastlane 打包</h3><h4 id=\"Appfile\"><a href=\"#Appfile\" class=\"headerlink\" title=\"Appfile\"></a>Appfile</h4><p><a href=\"https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Appfile.md\">Appfile</a>，存放了一些 app 本身的信息，如，apple_id, app_identifier, team_id 等等。</p>\n<p>默认情况下，Appfile 如下所示：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">app_identifier <span class=\"string\">\"com.mzl.testapp\"</span> <span class=\"comment\"># The bundle identifier of your app</span></div><div class=\"line\">apple_id <span class=\"string\">\"mlijin9011@163.com\"</span>  <span class=\"comment\"># Your Apple email address</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># You can uncomment the lines below and add your own </span></div><div class=\"line\"><span class=\"comment\"># team selection in case you're in multiple teams</span></div><div class=\"line\"><span class=\"comment\"># team_name \"Team Name\"</span></div><div class=\"line\"><span class=\"comment\"># team_id \"Q2CBPJ58CA\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># To select a team for iTunes Connect use</span></div><div class=\"line\"><span class=\"comment\"># itc_team_name \"Company Name\"</span></div><div class=\"line\"><span class=\"comment\"># itc_team_id \"18742801\"</span></div></pre></td></tr></table></figure>\n<p>如果你的 iTunes Connect 和 Apple Developer Portal 有不同的证书，请使用以下代码：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">app_identifier <span class=\"string\">\"com.mzl.testapp\"</span>       <span class=\"comment\"># The bundle identifier of your app</span></div><div class=\"line\"></div><div class=\"line\">apple_dev_portal_id <span class=\"string\">\"portal@company.com\"</span>  <span class=\"comment\"># Apple Developer Account</span></div><div class=\"line\">itunes_connect_id <span class=\"string\">\"tunes@company.com\"</span>     <span class=\"comment\"># iTunes Connect Account</span></div><div class=\"line\"></div><div class=\"line\">team_id <span class=\"string\">\"Q2CBPJ58CA\"</span> <span class=\"comment\"># Developer Portal Team ID</span></div><div class=\"line\">itc_team_id <span class=\"string\">\"18742801\"</span> <span class=\"comment\"># iTunes Connect Team ID</span></div></pre></td></tr></table></figure>\n<p>如果你的项目在每个环境（测试版，Store版，企业版）中的 bundle id 不同的话，则可以使用 for_platform 或 for_lane 模块声明定义。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">app_identifier <span class=\"string\">\"com.mzl.testapp\"</span></div><div class=\"line\">apple_id <span class=\"string\">\"mlijin9011@163.com\"</span></div><div class=\"line\">team_id <span class=\"string\">\"Q2CBPJ58CC\"</span></div><div class=\"line\"></div><div class=\"line\">for_platform <span class=\"symbol\">:ios</span> <span class=\"keyword\">do</span></div><div class=\"line\">  team_id <span class=\"string\">'123'</span> <span class=\"comment\"># for all iOS related things</span></div><div class=\"line\">  for_lane <span class=\"symbol\">:build_inhouse</span> <span class=\"keyword\">do</span></div><div class=\"line\">    app_identifier <span class=\"string\">'com.mzl.testapp.inhouse'</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>如果你想从你的 Fastfile 中访问这些值的话，可以在 Fastfile 中这样写</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">identifier = CredentialsManager::AppfileConfig.try_fetch_value(<span class=\"symbol\">:app_identifier</span>)</div><div class=\"line\">team_id = CredentialsManager::AppfileConfig.try_fetch_value(<span class=\"symbol\">:team_id</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"Fastfile\"><a href=\"#Fastfile\" class=\"headerlink\" title=\"Fastfile\"></a>Fastfile</h4><p><a href=\"https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md\">Fastfile</a> 是最重要的一个文件，主要是些 lane 的集合，在这里可以编写和定制我们的自动化脚本，所有的流程控制功能都写在这个文件里面，利用 lane 来完成我们的自动化需求。</p>\n<p>Fastfile 中可以同时支持不同的平台，iOS，macOS，Android，针对不同的平台，可以自定义自己的脚本，像这样：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastlane_version <span class=\"string\">\"2.14.2\"</span></div><div class=\"line\">default_platform <span class=\"symbol\">:ios</span></div><div class=\"line\"></div><div class=\"line\">before_all <span class=\"keyword\">do</span></div><div class=\"line\">  puts <span class=\"string\">\"This block is executed before every action of all platforms\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">platform <span class=\"symbol\">:ios</span> <span class=\"keyword\">do</span></div><div class=\"line\">  before_all <span class=\"keyword\">do</span></div><div class=\"line\">    cocoapods</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"build beta\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:beta</span> <span class=\"keyword\">do</span></div><div class=\"line\">    gym</div><div class=\"line\">    hockey</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  after_all <span class=\"keyword\">do</span></div><div class=\"line\">    puts <span class=\"string\">\"Finished iOS related work\"</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">platform <span class=\"symbol\">:mac</span> <span class=\"keyword\">do</span></div><div class=\"line\">  lane <span class=\"symbol\">:beta</span> <span class=\"keyword\">do</span></div><div class=\"line\">    xcodebuild</div><div class=\"line\">    hockey</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">lane <span class=\"symbol\">:test</span> <span class=\"keyword\">do</span></div><div class=\"line\">  puts <span class=\"string\">\"this lane is not platform specific\"</span></div><div class=\"line\">  xctool</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">after_all <span class=\"keyword\">do</span></div><div class=\"line\">  puts <span class=\"string\">\"Executed after every lane of both Mac and iPhone\"</span></div><div class=\"line\">  slack</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">error <span class=\"keyword\">do</span> <span class=\"params\">|lane, exception|</span></div><div class=\"line\">  puts <span class=\"string\">\"Executed when every lane of both Mac and iPhone has error\"</span></div><div class=\"line\">  slack</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>fastlane_version：指定fastlane使用的最小版本<br>default_platform：指定当前默认的平台，可以选择 ios/android/mac<br>before_all：是在执行每一个 lane 之前都会调用这部分，所以如果有一些前提性的操作，可以写在这里，比如 cocoapods，match 等。最外面的 before_all 表示所有平台的都会执行，写在 platform ios 里面的 before_all 是只有执行 ios 平台的lane 才会执行到的。<br>after_all：同理，是在每个 lane 执行完成之后都会执行这部分的内容<br>error：每个 lane 执行出错就会执行这部分的内容<br>desc：对 lane 的描述，fastlane 会自动将 desc 的内容生成说明文档<br>lane：任务，执行的时候使用 fastlane [ios] lane名称，如上可以这样用：<code>fastlane ios beta</code></p>\n<p>fastlane 提供了很多 <a href=\"https://docs.fastlane.tools/actions\">action</a> 或者 plugin 可以在 Fastfile 的 lane 里面调用，如上面提到的 match，sigh，gym，deliver 等，还有插件 cocoapods 等。</p>\n<p>贴一段我项目中使用的 Fastfile 的一部分看下：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div></pre></td><td class=\"code\"><pre><div class=\"line\">fastlane_version <span class=\"string\">\"2.23.0\"</span></div><div class=\"line\"></div><div class=\"line\">default_platform <span class=\"symbol\">:ios</span></div><div class=\"line\"></div><div class=\"line\">PROJECT_FILE_PATH = <span class=\"string\">'MyProject.xcodeproj'</span></div><div class=\"line\">OUTPUT_PATH = <span class=\"string\">'build/'</span></div><div class=\"line\">APP_NAME = <span class=\"string\">'MyProject'</span></div><div class=\"line\">SCHEME_NAME = <span class=\"string\">'MyProject'</span></div><div class=\"line\">PLIST_FILE_PATH = <span class=\"string\">'MyProject/Info.plist'</span></div><div class=\"line\"></div><div class=\"line\">INHOUSE_IDENTIFIER = <span class=\"string\">'com.bundle.id.inhouse'</span></div><div class=\"line\">APPSTORE_IDENTIFIER = <span class=\"string\">'com.bundle.id'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 上传 ipa 包的平台，可以用 蒲公英，Bugly 等替代</span></div><div class=\"line\">OTA_SERVER_URL = <span class=\"string\">'http://ota.client.xxx.xxx.cn/ios/upload'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 更新bundle id信息，修改app identifier</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_bundle_id</span><span class=\"params\">(app_id)</span></span></div><div class=\"line\">  say <span class=\"string\">'update bundle id'</span></div><div class=\"line\">  update_app_identifier(<span class=\"symbol\">xcodeproj:</span> PROJECT_FILE_PATH,</div><div class=\"line\">                        <span class=\"symbol\">plist_path:</span> PLIST_FILE_PATH,</div><div class=\"line\">                        <span class=\"symbol\">app_identifier:</span> app_id)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 修改build号</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_build_version</span><span class=\"params\">(options)</span></span></div><div class=\"line\">  say <span class=\"string\">'update build version'</span></div><div class=\"line\"></div><div class=\"line\">  buildVersion = options[<span class=\"symbol\">:build</span>]</div><div class=\"line\">  set_info_plist_value(<span class=\"symbol\">path:</span> PLIST_FILE_PATH,</div><div class=\"line\">                       <span class=\"symbol\">key:</span> <span class=\"string\">\"ProjectBuildVersion\"</span>,</div><div class=\"line\">                       <span class=\"symbol\">value:</span> buildVersion)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 修改bundle号</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_bundle_version</span><span class=\"params\">(typePrefix,options)</span></span></div><div class=\"line\">  say <span class=\"string\">'update bundle version'</span></div><div class=\"line\"></div><div class=\"line\">  bundleVersion = options[<span class=\"symbol\">:build</span>] + <span class=\"string\">\"<span class=\"subst\">#&#123;typePrefix&#125;</span>\"</span></div><div class=\"line\">  set_info_plist_value(<span class=\"symbol\">path:</span> PLIST_FILE_PATH,</div><div class=\"line\">                       <span class=\"symbol\">key:</span> <span class=\"string\">\"CFBundleVersion\"</span>,</div><div class=\"line\">                       <span class=\"symbol\">value:</span> bundleVersion)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 打包</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generate_ipa</span><span class=\"params\">(configuration,exportMethod,options)</span></span></div><div class=\"line\">  say <span class=\"string\">'generate ipa'</span></div><div class=\"line\"></div><div class=\"line\">  fullVersion = get_version_number + <span class=\"string\">\"_\"</span> + options[<span class=\"symbol\">:build</span>]</div><div class=\"line\">  outputName = <span class=\"string\">\"<span class=\"subst\">#&#123;APP_NAME&#125;</span>_V<span class=\"subst\">#&#123;fullVersion&#125;</span>_<span class=\"subst\">#&#123;configuration&#125;</span>\"</span></div><div class=\"line\">  outputPath = <span class=\"string\">\"<span class=\"subst\">#&#123;OUTPUT_PATH&#125;</span><span class=\"subst\">#&#123;outputName&#125;</span>/\"</span></div><div class=\"line\"></div><div class=\"line\">  gym(</div><div class=\"line\">    <span class=\"symbol\">scheme:</span> <span class=\"string\">\"<span class=\"subst\">#&#123;SCHEME_NAME&#125;</span>\"</span>,</div><div class=\"line\">    <span class=\"symbol\">clean:</span> <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"symbol\">output_directory:</span> <span class=\"string\">\"<span class=\"subst\">#&#123;outputPath&#125;</span>\"</span>,</div><div class=\"line\">    <span class=\"symbol\">output_name:</span> <span class=\"string\">\"<span class=\"subst\">#&#123;outputName&#125;</span>.ipa\"</span>,</div><div class=\"line\">    <span class=\"symbol\">configuration:</span> <span class=\"string\">\"<span class=\"subst\">#&#123;configuration&#125;</span>\"</span>,</div><div class=\"line\">    <span class=\"symbol\">include_symbols:</span> <span class=\"string\">\"true\"</span>,</div><div class=\"line\">    <span class=\"comment\"># archive_path: \"#&#123;outputPath&#125;\",</span></div><div class=\"line\">    <span class=\"comment\"># 指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, development, 和developer-id</span></div><div class=\"line\">    <span class=\"symbol\">export_method:</span> <span class=\"string\">\"<span class=\"subst\">#&#123;exportMethod&#125;</span>\"</span></div><div class=\"line\">  )</div><div class=\"line\"></div><div class=\"line\">  upload_ota(<span class=\"string\">\"../<span class=\"subst\">#&#123;outputPath&#125;</span>\"</span>, outputName, configuration)</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 上传 OTA</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upload_ota</span><span class=\"params\">(output_path, app_name, configuration)</span></span></div><div class=\"line\">  say <span class=\"string\">'upload ipa to ota'</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># 99-AppStore包, 0-正式包, 1-开发临时测试包, 2-第三方渠道包, 3-每日构建包</span></div><div class=\"line\">  <span class=\"comment\"># 默认为1</span></div><div class=\"line\">  force_bundle_id = APPSTORE_IDENTIFIER</div><div class=\"line\">  type = <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">if</span> configuration == <span class=\"string\">\"Inhouse\"</span></div><div class=\"line\">    force_bundle_id = INHOUSE_IDENTIFIER</div><div class=\"line\">    type = <span class=\"number\">2</span></div><div class=\"line\">  <span class=\"keyword\">elsif</span> configuration == <span class=\"string\">\"AdHoc\"</span></div><div class=\"line\">    type = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">elsif</span> configuration == <span class=\"string\">\"Release\"</span></div><div class=\"line\">    type = <span class=\"number\">99</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  sh <span class=\"string\">\"curl -# -S -F 'pkg_file=@<span class=\"subst\">#&#123;output_path&#125;</span><span class=\"subst\">#&#123;app_name&#125;</span>.ipa' -F 'dsym_file=@<span class=\"subst\">#&#123;output_path&#125;</span><span class=\"subst\">#&#123;app_name&#125;</span>.app.dSYM.zip' -F 'version=<span class=\"subst\">#&#123;app_name&#125;</span>' -F 'description=<span class=\"subst\">#&#123;app_name&#125;</span>' -F 'app_bundle_id=<span class=\"subst\">#&#123;APPSTORE_IDENTIFIER&#125;</span>' -F 'pkg_type=<span class=\"subst\">#&#123;type&#125;</span>' -F 'force_bundle_id=<span class=\"subst\">#&#123;force_bundle_id&#125;</span>' <span class=\"subst\">#&#123;OTA_SERVER_URL&#125;</span>\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">platform <span class=\"symbol\">:ios</span> <span class=\"keyword\">do</span></div><div class=\"line\">  before_all <span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"comment\"># ENV[\"SLACK_URL\"] = \"https://hooks.slack.com/services/...\"</span></div><div class=\"line\">    <span class=\"comment\"># cocoapods</span></div><div class=\"line\">    puts File.absolute_path(<span class=\"string\">\".\"</span>)</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"更新build号\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:buildVersion</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    update_build_version(options)</div><div class=\"line\">  <span class=\"keyword\">end</span> </div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"更新Debug版bundle号\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:debugBundleVersion</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    update_bundle_version(<span class=\"string\">\".Debug\"</span>,options)</div><div class=\"line\">  <span class=\"keyword\">end</span> </div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"更新AppStore版bundle号\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:storeBundleVersion</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    update_bundle_version(<span class=\"string\">\"\"</span>,options)</div><div class=\"line\">  <span class=\"keyword\">end</span>   </div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"打Debug包\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:build_debug</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    buildVersion options</div><div class=\"line\">    generate_ipa(<span class=\"string\">\"Debug\"</span>,<span class=\"string\">\"development\"</span>,options)</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"打Inhouse包\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:build_inhouse</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    buildVersion options</div><div class=\"line\">    update_bundle_id(<span class=\"string\">\"<span class=\"subst\">#&#123;INHOUSE_IDENTIFIER&#125;</span>\"</span>)</div><div class=\"line\">    generate_ipa(<span class=\"string\">\"Inhouse\"</span>,<span class=\"string\">\"enterprise\"</span>,options)</div><div class=\"line\">    <span class=\"comment\"># 还原</span></div><div class=\"line\">    update_bundle_id(<span class=\"string\">\"<span class=\"subst\">#&#123;APPSTORE_IDENTIFIER&#125;</span>\"</span>)</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"打Adhoc包\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:build_adhoc</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    buildVersion options</div><div class=\"line\">    generate_ipa(<span class=\"string\">\"AdHoc\"</span>,<span class=\"string\">\"ad-hoc\"</span>,options)</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"打Alpha包\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:build_alpha</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    development options</div><div class=\"line\">    inhouse options</div><div class=\"line\">    adhoc options</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"打AppStore包\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:build_release</span> <span class=\"keyword\">do</span> <span class=\"params\">|options|</span></div><div class=\"line\">    buildVersion options</div><div class=\"line\">    storeBundleVersion options</div><div class=\"line\">    update_bundle_id(<span class=\"string\">\"<span class=\"subst\">#&#123;APPSTORE_IDENTIFIER&#125;</span>\"</span>)</div><div class=\"line\">    generate_ipa(<span class=\"string\">\"Release\"</span>,<span class=\"string\">\"app-store\"</span>,options)</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  desc <span class=\"string\">\"match\"</span></div><div class=\"line\">  lane <span class=\"symbol\">:sn_match</span> <span class=\"keyword\">do</span> </div><div class=\"line\">    <span class=\"comment\"># 这两行可以注册新设备，并且自动更新仓库下的profiles文件</span></div><div class=\"line\">    <span class=\"comment\"># register_devices(devices_file: \"./devices.txt\")</span></div><div class=\"line\">    <span class=\"comment\"># match(git_branch: \"branch\", type: \"development\", force_for_new_devices: true)</span></div><div class=\"line\">    match(<span class=\"symbol\">git_branch:</span> <span class=\"string\">\"branch\"</span>, <span class=\"symbol\">readonly:</span> <span class=\"literal\">true</span>)</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  after_all <span class=\"keyword\">do</span> <span class=\"params\">|lane|</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># slack(</span></div><div class=\"line\">    <span class=\"comment\">#   message: \"Successfully deployed new App Update.\"</span></div><div class=\"line\">    <span class=\"comment\"># )</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  error <span class=\"keyword\">do</span> <span class=\"params\">|lane, exception|</span></div><div class=\"line\">    <span class=\"comment\"># slack(</span></div><div class=\"line\">    <span class=\"comment\">#   message: exception.message,</span></div><div class=\"line\">    <span class=\"comment\">#   success: false</span></div><div class=\"line\">    <span class=\"comment\"># )</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md</span></div><div class=\"line\"><span class=\"comment\"># All available actions: https://docs.fastlane.tools/actions</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># fastlane reports which actions are used</span></div><div class=\"line\"><span class=\"comment\"># No personal data is recorded. Learn more at https://github.com/fastlane/enhancer</span></div></pre></td></tr></table></figure>\n<h3 id=\"3-4-fastlane-发布\"><a href=\"#3-4-fastlane-发布\" class=\"headerlink\" title=\"3.4 fastlane 发布\"></a>3.4 fastlane 发布</h3><h4 id=\"deliver-amp-Deliverfile\"><a href=\"#deliver-amp-Deliverfile\" class=\"headerlink\" title=\"deliver &amp; Deliverfile\"></a>deliver &amp; Deliverfile</h4><p><a href=\"https://github.com/fastlane/fastlane/blob/master/deliver/Deliverfile.md\">Deliverfile</a> 主要是用于发布上传时的配置文件。</p>\n<p>前面介绍了，如果在 <code>fastlane init</code> 的时候选择了在 iTunes Connect 创建 App，那么 fastlane 会调用 produce 进行初始化，同时会执行 <code>deliver init</code>，执行完毕后会创建一个 Deliverfile 文件，如果没有在初始化的时候选择执行 produce 流程当然 deliver 也不会执行，可以手动执行 <code>fastlane deliver init</code> 创建。</p>\n<p>执行时，会自动登录你在 Appfile 中设置的 itunes_connect_id，根据 Appfile 中的 app_identifier，会为你下载当前 iTC 中的截图，元数据等等。执行完成后会生成<br>一个 Deliverfile 文件，/metadata 和 /screenshots 文件夹。</p>\n<p>本地修改 Deliverfile，元数据，或者截图文件，执行 <code>fastlane deliver</code> 后，可以上传到 iTunes Connect 上。</p>\n<p>如果你想把你本地的 ipa 文件上传到 iTunes Connect 上，可以执行：</p>\n<p><code>fastlane deliver --ipa &quot;App.ipa&quot; --submit_for_review</code></p>\n<p>如果你之前上传过 ipa 包，想选择一个用来提交审核，可以执行：</p>\n<p><code>fastlane deliver submit_build --build_number xxxx</code></p>\n<p>这里 xxxx 是你想选择的 build number。或者，可以直接选择最新的：</p>\n<p><code>fastlane deliver submit_build --latest</code></p>\n<p>在 Fastfile 里可以这样写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deliver(app_version: ENV[&quot;app_versionName&quot;],</div><div class=\"line\">        ipa: &quot;#&#123;ipa_path&#125;&quot;,</div><div class=\"line\">        submit_for_review: false</div><div class=\"line\">       )</div></pre></td></tr></table></figure>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><blockquote>\n<p><a href=\"https://github.com/fastlane/fastlane\">官方文档</a><br><a href=\"http://macoscope.com/blog/simplify-your-life-with-fastlane-match/#migration\">Simplify your life with fastlane match</a></p>\n</blockquote>"},{"title":"iOS9下Safari和app间cookie互通","date":"2016-08-13T08:10:02.000Z","_content":"\n## 前言\n\n现在项目有一个需求，比如某新闻业务，当用户还没有下载 app 时，在手机上的 Safari 中浏览了一篇新闻，然后在浏览器中点击“在 app 中查看”，会自动跳转到 AppStore 中下载 app，此时用户可能希望在下载完 app 后能够继续刚才在 Safari 中的浏览内容和一些用户行为。但是用户被引导下载后，并不会希望需要重新回到浏览器，重新再由浏览器发起一个拉起 app 的操作来实现在 app 中的继续浏览，而是更希望在下载后，直接点击 AppStore 中的打开，或者手动打开 app 后，就能够继续刚才的浏览，这就需要在 Safari 和 app 间形成一种数据的互通。\n\n<!--more-->\n\n大概有这么两种方案可以实现这个功能：\n\n一是当用户在 Safari 中浏览新闻内容时，上传用户行为和用户数据到我们服务器中，以一个唯一标识来标识这个设备的数据，这个数据会有一定的时效性，在这个时效性内下载并打开 app，我们会当做用户是希望能够继续延续刚才的浏览。当用户下载 app 打开后，用唯一标识从服务器请求用户行为数据，通过这个数据来打开相应的浏览内容，这样就实现了上面所说的功能。\n\n二是当用户在 Safari 中浏览新闻内容时，保存用户行为数据到 Safari 中的 cookie 里，当用户下载并打开 app 后，我们去读取 Safari 中的 cookie，通过 cookie 内容来打开相应的浏览内容。\n\n第一种方式，能够唯一标识设备的这个值要具备苛刻的条件，想找到其实很不容易，而且可能还会有一定的误伤几率，所以我们选择了第二种方式。\n\n## Cookie 互通\n\niOS 系统中每个 app 都有自己的沙盒，无法跨越沙盒去访问数据，但是在 iOS9 以后，苹果提供了一个 API：`APISFSafariViewController`，它跟系统的 Safari 同属于一个 app，所以通过它可以读到 Safari 中的 cookie，那么我们可以在我们的 app 中打开这个 `APISFSafariViewController`，这样就可以拿到系统 Safari 中保存的 cookie 数据了。但是这个 cookie 内容只是在 `APISFSafariViewController` 中打开的 wap 页面可以读到，在 app 内是读不到的，可以通过 URL Scheme（OpenUrl）的方式，把这个 cookie 内容传递到 app 中，这样就可以实现我们上面的需求了。\n\n具体的实现思路如下：\n\n用户通过 Safari 浏览 wap1 页面，wap1 页面把用户行为数据写到 cookie 中，当用户通过引导下载 app 后，第一次打开 app 时，在 app 内打开 `APISFSafariViewController`，打开一个 wap2 页面，在这个 wap2 页面先取到刚才 wap1 页面保存的 cookie 数据，然后在 wap2 中通过 openUrl 的方式，把这个 cookie 数据传递到 app 中，然后通过这个 cookie 数据来实现延续阅读的功能。\n\n在这里，wap1 页面是我们正常的一个 html 页面，里面只是加一个写用户行为数据到 Safari 中的cookie 的操作，这个 cookie 的域采用我们约定好的值，即只有在这个域下的 html 才能读取到这个 cookie。wap2 页面是一个专门用来静默的获取 wap1 的 cookie 值的页面，并且可以静默的通过 openUrl 的方式把 cookie 回传给 app。\n\n可能你会觉得在程序启动后，弹出一个 Safari 页面有点不妥，那么我们可以把这个 `APISFSafariViewController` 设置为纯透明，这样用户就感觉不到了，然后这个纯透明的 Safari 再通过 openUrl 的方式呼起我们要延续阅读的页面，如果不需要延续阅读，那么就设定一个时间值，在这个时间值后，把这个纯透明的 Safari 隐藏。\n\n## 总结\n\n前提：safari中打开h5页面，在app中还原\n\nhtml1 页面写 cookie 到 safari，app启动后打开一个透明的safari页面，这个safari页面请求另外一个与 html1 同域名的 html2,\nhtml2 读取到 html1 存的 cookie 后，通过 scheme 的方式，在app中打开相对应的页面，完成场景还原\n\n## 后期补充\n\n上述使用 `APISFSafariViewController` 这种获取 cookie 的方式，SafariViewController 始终是隐藏的，而 iOS 10 以后这是苹果命令禁止的：\n\n> SafariViewContoller must be used to visibly present information to users; the controller may not be hidden or obscured by other views or layers. Additionally, an app may not use SafariViewController to track users without their knowledge and consent.\n> \n\n所以这种方式，目前仅能支持 iOS 9 ，iOS 10 以上需要再找别的途径。\n\n参考博文：[iOS app与浏览器 跨域互通](http://www.jianshu.com/p/1a46187141fc)\n\n\n","source":"_posts/iOS9下Safari和app间cookie互通.md","raw":"---\ntitle: iOS9下Safari和app间cookie互通\ndate: 2016-08-13 16:10:02\ncategories:\n- 技术\ntags:\n- iOS\n---\n\n## 前言\n\n现在项目有一个需求，比如某新闻业务，当用户还没有下载 app 时，在手机上的 Safari 中浏览了一篇新闻，然后在浏览器中点击“在 app 中查看”，会自动跳转到 AppStore 中下载 app，此时用户可能希望在下载完 app 后能够继续刚才在 Safari 中的浏览内容和一些用户行为。但是用户被引导下载后，并不会希望需要重新回到浏览器，重新再由浏览器发起一个拉起 app 的操作来实现在 app 中的继续浏览，而是更希望在下载后，直接点击 AppStore 中的打开，或者手动打开 app 后，就能够继续刚才的浏览，这就需要在 Safari 和 app 间形成一种数据的互通。\n\n<!--more-->\n\n大概有这么两种方案可以实现这个功能：\n\n一是当用户在 Safari 中浏览新闻内容时，上传用户行为和用户数据到我们服务器中，以一个唯一标识来标识这个设备的数据，这个数据会有一定的时效性，在这个时效性内下载并打开 app，我们会当做用户是希望能够继续延续刚才的浏览。当用户下载 app 打开后，用唯一标识从服务器请求用户行为数据，通过这个数据来打开相应的浏览内容，这样就实现了上面所说的功能。\n\n二是当用户在 Safari 中浏览新闻内容时，保存用户行为数据到 Safari 中的 cookie 里，当用户下载并打开 app 后，我们去读取 Safari 中的 cookie，通过 cookie 内容来打开相应的浏览内容。\n\n第一种方式，能够唯一标识设备的这个值要具备苛刻的条件，想找到其实很不容易，而且可能还会有一定的误伤几率，所以我们选择了第二种方式。\n\n## Cookie 互通\n\niOS 系统中每个 app 都有自己的沙盒，无法跨越沙盒去访问数据，但是在 iOS9 以后，苹果提供了一个 API：`APISFSafariViewController`，它跟系统的 Safari 同属于一个 app，所以通过它可以读到 Safari 中的 cookie，那么我们可以在我们的 app 中打开这个 `APISFSafariViewController`，这样就可以拿到系统 Safari 中保存的 cookie 数据了。但是这个 cookie 内容只是在 `APISFSafariViewController` 中打开的 wap 页面可以读到，在 app 内是读不到的，可以通过 URL Scheme（OpenUrl）的方式，把这个 cookie 内容传递到 app 中，这样就可以实现我们上面的需求了。\n\n具体的实现思路如下：\n\n用户通过 Safari 浏览 wap1 页面，wap1 页面把用户行为数据写到 cookie 中，当用户通过引导下载 app 后，第一次打开 app 时，在 app 内打开 `APISFSafariViewController`，打开一个 wap2 页面，在这个 wap2 页面先取到刚才 wap1 页面保存的 cookie 数据，然后在 wap2 中通过 openUrl 的方式，把这个 cookie 数据传递到 app 中，然后通过这个 cookie 数据来实现延续阅读的功能。\n\n在这里，wap1 页面是我们正常的一个 html 页面，里面只是加一个写用户行为数据到 Safari 中的cookie 的操作，这个 cookie 的域采用我们约定好的值，即只有在这个域下的 html 才能读取到这个 cookie。wap2 页面是一个专门用来静默的获取 wap1 的 cookie 值的页面，并且可以静默的通过 openUrl 的方式把 cookie 回传给 app。\n\n可能你会觉得在程序启动后，弹出一个 Safari 页面有点不妥，那么我们可以把这个 `APISFSafariViewController` 设置为纯透明，这样用户就感觉不到了，然后这个纯透明的 Safari 再通过 openUrl 的方式呼起我们要延续阅读的页面，如果不需要延续阅读，那么就设定一个时间值，在这个时间值后，把这个纯透明的 Safari 隐藏。\n\n## 总结\n\n前提：safari中打开h5页面，在app中还原\n\nhtml1 页面写 cookie 到 safari，app启动后打开一个透明的safari页面，这个safari页面请求另外一个与 html1 同域名的 html2,\nhtml2 读取到 html1 存的 cookie 后，通过 scheme 的方式，在app中打开相对应的页面，完成场景还原\n\n## 后期补充\n\n上述使用 `APISFSafariViewController` 这种获取 cookie 的方式，SafariViewController 始终是隐藏的，而 iOS 10 以后这是苹果命令禁止的：\n\n> SafariViewContoller must be used to visibly present information to users; the controller may not be hidden or obscured by other views or layers. Additionally, an app may not use SafariViewController to track users without their knowledge and consent.\n> \n\n所以这种方式，目前仅能支持 iOS 9 ，iOS 10 以上需要再找别的途径。\n\n参考博文：[iOS app与浏览器 跨域互通](http://www.jianshu.com/p/1a46187141fc)\n\n\n","slug":"iOS9下Safari和app间cookie互通","published":1,"updated":"2017-10-28T03:38:22.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9aztbpe000nxox00v2p8vvy","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>现在项目有一个需求，比如某新闻业务，当用户还没有下载 app 时，在手机上的 Safari 中浏览了一篇新闻，然后在浏览器中点击“在 app 中查看”，会自动跳转到 AppStore 中下载 app，此时用户可能希望在下载完 app 后能够继续刚才在 Safari 中的浏览内容和一些用户行为。但是用户被引导下载后，并不会希望需要重新回到浏览器，重新再由浏览器发起一个拉起 app 的操作来实现在 app 中的继续浏览，而是更希望在下载后，直接点击 AppStore 中的打开，或者手动打开 app 后，就能够继续刚才的浏览，这就需要在 Safari 和 app 间形成一种数据的互通。</p>\n<a id=\"more\"></a>\n<p>大概有这么两种方案可以实现这个功能：</p>\n<p>一是当用户在 Safari 中浏览新闻内容时，上传用户行为和用户数据到我们服务器中，以一个唯一标识来标识这个设备的数据，这个数据会有一定的时效性，在这个时效性内下载并打开 app，我们会当做用户是希望能够继续延续刚才的浏览。当用户下载 app 打开后，用唯一标识从服务器请求用户行为数据，通过这个数据来打开相应的浏览内容，这样就实现了上面所说的功能。</p>\n<p>二是当用户在 Safari 中浏览新闻内容时，保存用户行为数据到 Safari 中的 cookie 里，当用户下载并打开 app 后，我们去读取 Safari 中的 cookie，通过 cookie 内容来打开相应的浏览内容。</p>\n<p>第一种方式，能够唯一标识设备的这个值要具备苛刻的条件，想找到其实很不容易，而且可能还会有一定的误伤几率，所以我们选择了第二种方式。</p>\n<h2 id=\"Cookie-互通\"><a href=\"#Cookie-互通\" class=\"headerlink\" title=\"Cookie 互通\"></a>Cookie 互通</h2><p>iOS 系统中每个 app 都有自己的沙盒，无法跨越沙盒去访问数据，但是在 iOS9 以后，苹果提供了一个 API：<code>APISFSafariViewController</code>，它跟系统的 Safari 同属于一个 app，所以通过它可以读到 Safari 中的 cookie，那么我们可以在我们的 app 中打开这个 <code>APISFSafariViewController</code>，这样就可以拿到系统 Safari 中保存的 cookie 数据了。但是这个 cookie 内容只是在 <code>APISFSafariViewController</code> 中打开的 wap 页面可以读到，在 app 内是读不到的，可以通过 URL Scheme（OpenUrl）的方式，把这个 cookie 内容传递到 app 中，这样就可以实现我们上面的需求了。</p>\n<p>具体的实现思路如下：</p>\n<p>用户通过 Safari 浏览 wap1 页面，wap1 页面把用户行为数据写到 cookie 中，当用户通过引导下载 app 后，第一次打开 app 时，在 app 内打开 <code>APISFSafariViewController</code>，打开一个 wap2 页面，在这个 wap2 页面先取到刚才 wap1 页面保存的 cookie 数据，然后在 wap2 中通过 openUrl 的方式，把这个 cookie 数据传递到 app 中，然后通过这个 cookie 数据来实现延续阅读的功能。</p>\n<p>在这里，wap1 页面是我们正常的一个 html 页面，里面只是加一个写用户行为数据到 Safari 中的cookie 的操作，这个 cookie 的域采用我们约定好的值，即只有在这个域下的 html 才能读取到这个 cookie。wap2 页面是一个专门用来静默的获取 wap1 的 cookie 值的页面，并且可以静默的通过 openUrl 的方式把 cookie 回传给 app。</p>\n<p>可能你会觉得在程序启动后，弹出一个 Safari 页面有点不妥，那么我们可以把这个 <code>APISFSafariViewController</code> 设置为纯透明，这样用户就感觉不到了，然后这个纯透明的 Safari 再通过 openUrl 的方式呼起我们要延续阅读的页面，如果不需要延续阅读，那么就设定一个时间值，在这个时间值后，把这个纯透明的 Safari 隐藏。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>前提：safari中打开h5页面，在app中还原</p>\n<p>html1 页面写 cookie 到 safari，app启动后打开一个透明的safari页面，这个safari页面请求另外一个与 html1 同域名的 html2,<br>html2 读取到 html1 存的 cookie 后，通过 scheme 的方式，在app中打开相对应的页面，完成场景还原</p>\n<h2 id=\"后期补充\"><a href=\"#后期补充\" class=\"headerlink\" title=\"后期补充\"></a>后期补充</h2><p>上述使用 <code>APISFSafariViewController</code> 这种获取 cookie 的方式，SafariViewController 始终是隐藏的，而 iOS 10 以后这是苹果命令禁止的：</p>\n<blockquote>\n<p>SafariViewContoller must be used to visibly present information to users; the controller may not be hidden or obscured by other views or layers. Additionally, an app may not use SafariViewController to track users without their knowledge and consent.</p>\n</blockquote>\n<p>所以这种方式，目前仅能支持 iOS 9 ，iOS 10 以上需要再找别的途径。</p>\n<p>参考博文：<a href=\"http://www.jianshu.com/p/1a46187141fc\" target=\"_blank\" rel=\"external\">iOS app与浏览器 跨域互通</a></p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>现在项目有一个需求，比如某新闻业务，当用户还没有下载 app 时，在手机上的 Safari 中浏览了一篇新闻，然后在浏览器中点击“在 app 中查看”，会自动跳转到 AppStore 中下载 app，此时用户可能希望在下载完 app 后能够继续刚才在 Safari 中的浏览内容和一些用户行为。但是用户被引导下载后，并不会希望需要重新回到浏览器，重新再由浏览器发起一个拉起 app 的操作来实现在 app 中的继续浏览，而是更希望在下载后，直接点击 AppStore 中的打开，或者手动打开 app 后，就能够继续刚才的浏览，这就需要在 Safari 和 app 间形成一种数据的互通。</p>","more":"<p>大概有这么两种方案可以实现这个功能：</p>\n<p>一是当用户在 Safari 中浏览新闻内容时，上传用户行为和用户数据到我们服务器中，以一个唯一标识来标识这个设备的数据，这个数据会有一定的时效性，在这个时效性内下载并打开 app，我们会当做用户是希望能够继续延续刚才的浏览。当用户下载 app 打开后，用唯一标识从服务器请求用户行为数据，通过这个数据来打开相应的浏览内容，这样就实现了上面所说的功能。</p>\n<p>二是当用户在 Safari 中浏览新闻内容时，保存用户行为数据到 Safari 中的 cookie 里，当用户下载并打开 app 后，我们去读取 Safari 中的 cookie，通过 cookie 内容来打开相应的浏览内容。</p>\n<p>第一种方式，能够唯一标识设备的这个值要具备苛刻的条件，想找到其实很不容易，而且可能还会有一定的误伤几率，所以我们选择了第二种方式。</p>\n<h2 id=\"Cookie-互通\"><a href=\"#Cookie-互通\" class=\"headerlink\" title=\"Cookie 互通\"></a>Cookie 互通</h2><p>iOS 系统中每个 app 都有自己的沙盒，无法跨越沙盒去访问数据，但是在 iOS9 以后，苹果提供了一个 API：<code>APISFSafariViewController</code>，它跟系统的 Safari 同属于一个 app，所以通过它可以读到 Safari 中的 cookie，那么我们可以在我们的 app 中打开这个 <code>APISFSafariViewController</code>，这样就可以拿到系统 Safari 中保存的 cookie 数据了。但是这个 cookie 内容只是在 <code>APISFSafariViewController</code> 中打开的 wap 页面可以读到，在 app 内是读不到的，可以通过 URL Scheme（OpenUrl）的方式，把这个 cookie 内容传递到 app 中，这样就可以实现我们上面的需求了。</p>\n<p>具体的实现思路如下：</p>\n<p>用户通过 Safari 浏览 wap1 页面，wap1 页面把用户行为数据写到 cookie 中，当用户通过引导下载 app 后，第一次打开 app 时，在 app 内打开 <code>APISFSafariViewController</code>，打开一个 wap2 页面，在这个 wap2 页面先取到刚才 wap1 页面保存的 cookie 数据，然后在 wap2 中通过 openUrl 的方式，把这个 cookie 数据传递到 app 中，然后通过这个 cookie 数据来实现延续阅读的功能。</p>\n<p>在这里，wap1 页面是我们正常的一个 html 页面，里面只是加一个写用户行为数据到 Safari 中的cookie 的操作，这个 cookie 的域采用我们约定好的值，即只有在这个域下的 html 才能读取到这个 cookie。wap2 页面是一个专门用来静默的获取 wap1 的 cookie 值的页面，并且可以静默的通过 openUrl 的方式把 cookie 回传给 app。</p>\n<p>可能你会觉得在程序启动后，弹出一个 Safari 页面有点不妥，那么我们可以把这个 <code>APISFSafariViewController</code> 设置为纯透明，这样用户就感觉不到了，然后这个纯透明的 Safari 再通过 openUrl 的方式呼起我们要延续阅读的页面，如果不需要延续阅读，那么就设定一个时间值，在这个时间值后，把这个纯透明的 Safari 隐藏。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>前提：safari中打开h5页面，在app中还原</p>\n<p>html1 页面写 cookie 到 safari，app启动后打开一个透明的safari页面，这个safari页面请求另外一个与 html1 同域名的 html2,<br>html2 读取到 html1 存的 cookie 后，通过 scheme 的方式，在app中打开相对应的页面，完成场景还原</p>\n<h2 id=\"后期补充\"><a href=\"#后期补充\" class=\"headerlink\" title=\"后期补充\"></a>后期补充</h2><p>上述使用 <code>APISFSafariViewController</code> 这种获取 cookie 的方式，SafariViewController 始终是隐藏的，而 iOS 10 以后这是苹果命令禁止的：</p>\n<blockquote>\n<p>SafariViewContoller must be used to visibly present information to users; the controller may not be hidden or obscured by other views or layers. Additionally, an app may not use SafariViewController to track users without their knowledge and consent.</p>\n</blockquote>\n<p>所以这种方式，目前仅能支持 iOS 9 ，iOS 10 以上需要再找别的途径。</p>\n<p>参考博文：<a href=\"http://www.jianshu.com/p/1a46187141fc\">iOS app与浏览器 跨域互通</a></p>"},{"title":"iOSAppIcon添加打包标识","date":"2017-08-17T09:04:18.000Z","_content":"\n# 前言\n\niOS 分支开发迭代过程中，测试经常需要装不同分支不同版本的包，有时候测试发现了 BUG 后，会突然忘了自己下的是 CI 上的哪一个包？这时候，我们可以把打包的 build 信息打印在 AppIcon 上，这样只需要根据 Icon 上的 build 信息就一目了然了。\n\n<!--more-->\n\n# ImageMagick\n\n使用 ImageMagick 可以创建、编辑、合成或转换图片。它可以读和写各种格式的图像（超过 200 种格式）包括 PNG、JPEG、JPEG - 2000、GIF、TIFF、DPX、EXR、WebP、Postscript、PDF、SVG。ImageMagick 可以调整、翻转、镜像、旋转、扭曲、剪切和转换图像、图像色彩调整，适用于各种特殊效果,或绘制文本、线、多边形、椭圆和贝塞尔曲线。\n\n通过 shell command 就可以轻易使用以上功能。\n\n# Build Phases\n\nBuild Phases 代表着将代码构建为一个可执行文件的规则。它描述了 build 过程中必须执行的不同任务。\n\n## 定制Build Phases\n\n你可以在 build phases 中添加运行自定义脚本，就像 CocoaPods 使用的一样，来做额外的工作。当然也可以添加一些资源的拷贝任务，当你需要将某些确定的资源拷贝到制定的 target 目录中，这非常有用。\n另外你可以通过定制 build phase 来添加带有水印(包括版本号和commit hash)的 app icon。只需要在 build phase 中添加一个 Run Script.\n\n在工程 `Target` -> `Build Phases` 中新建一个 `Run Script`，我们可以给它起名 `Add BuildInfo on Icon`。\n\n![image](iOS-AppIcon添加打包标识/buildPhases_Shell.png)\n\n\n创建脚本 draw_icon_buildinfo.sh\n\n## 写加水印的脚本\n\n1.判断执行 Build 的机器是否安装了 ImageMagic\n\n```\nconvertPath=`which convert`\n# 判断 convertPath 文件是否存在\nif [ ! -f ${convertPath}]; then\necho \"==============\nWARNING: 你需要先安装 ImageMagick！！！！:\nbrew install imagemagick\n==============\"\nexit 0;\nfi\n```\n\n2.判断 Release 包不执行以下操作\n\n```\nif [ ${CONFIGURATION} = \"Release\" ]; then\nexit 0;\nfi\n```\n\n3.获取 commit、branch、version 等信息\n\n```\nversion=`/usr/libexec/PlistBuddy -c \"Print CFBundleShortVersionString\" \"${CONFIGURATION_BUILD_DIR}/${INFOPLIST_PATH}\"`\nbuild_num=`/usr/libexec/PlistBuddy -c \"Print SinaNewsBuildVersion\" \"${CONFIGURATION_BUILD_DIR}/${INFOPLIST_PATH}\"`\nif [[ ${build_num} == \"\" ]]; then\n    build_num=`date +\"%Y%m%d%H%M\"`\n    echo \"Use Xcode building, build time ${build_num}\"\nfi\ncommit=`git rev-parse --short HEAD`\nbranch=$(git rev-parse --abbrev-ref HEAD)\ncaption=\"${version}\\n${build_num}\\n${branch}\"\necho \"caption : ${caption}\"\n```\n\n4.找Icon图片\n\n在编译后的 info.plist 中，可以看到：\n![image](iOS-AppIcon添加打包标识/infoPlist_Icon1.png)\n![image](iOS-AppIcon添加打包标识/infoPlist_Icon2.png)\n\n通过脚本输出的结果为：\n\n```\n/usr/libexec/PlistBuddy -c \"Print CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles\" \"${CONFIGURATION_BUILD_DIR}/${INFOPLIST_PATH}\"\n```\n\n```\nArray {\n    AppIcon20x20\n    AppIcon29x29\n    AppIcon40x40\n    AppIcon60x60\n}\n```\n所以真实的 icon 个数为:\n\n```\nreal_icon_index=$((${icon_count} - 2))\n```\n\n根据数量循环，对找到的每个 Icon 执行加水印的操作：\n\n```\ni=0\nwhile [  $i -lt $real_icon_index ]; do\n  icon=`/usr/libexec/PlistBuddy -c \"Print CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles:$i\" \"${CONFIGURATION_BUILD_DIR}/${INFOPLIST_PATH}\"`\n\n  echo \"icon: ${icon}\"\n\n  if [[ $icon == *.png ]] || [[ $icon == *.PNG ]]\n  then\n    processIcon $icon\n  else\n    processIcon \"${icon}.png\"\n    processIcon \"${icon}@2x.png\"\n    processIcon \"${icon}@3x.png\"\n\n    processIcon \"${icon}~ipad.png\"\n    processIcon \"${icon}@2x~ipad.png\"\n  fi\n  let i=i+1\ndone\n```\n\n5.对找到的图片 Icon 加水印处理\n\n```\nfunction processIcon() {\n    base_file=$1\n\n    cd \"${CONFIGURATION_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\"\n    base_path=`find . -name ${base_file}`\n\n    real_path=$( abspath \"${base_path}\" )\n    echo \"base path ${real_path}\"\n\n    # 验证存在性\n    if [[ ! -f ${base_path} || -z ${base_path} ]]; then\n      return;\n    fi\n\n    # TODO: if they are the same we need to fix it by introducing temp\n    target_file=`basename $base_path`\n    target_path=\"${CONFIGURATION_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/${target_file}\"\n\n    base_tmp_normalizedFileName=\"${base_file%.*}-normalized.${base_file##*.}\"\n    base_tmp_path=`dirname $base_path`\n    base_tmp_normalizedFilePath=\"${base_tmp_path}/${base_tmp_normalizedFileName}\"\n\n    stored_original_file=\"${base_tmp_normalizedFilePath}-tmp\"\n    if [[ -f ${stored_original_file} ]]; then\n      echo \"found previous file at path ${stored_original_file}, using it as base\"\n      mv \"${stored_original_file}\" \"${base_path}\"\n    fi\n\n    if [ $CONFIGURATION = \"Release\" ]; then\n      cp \"${base_path}\" \"$target_path\"\n      return 0;\n    fi\n\n    echo \"Reverting optimized PNG to normal\"\n    # Normalize\n    echo \"xcrun -sdk iphoneos pngcrush -revert-iphone-optimizations -q ${base_path} ${base_tmp_normalizedFilePath}\"\n    xcrun -sdk iphoneos pngcrush -revert-iphone-optimizations -q \"${base_path}\" \"${base_tmp_normalizedFilePath}\"\n\n    # move original pngcrush png to tmp file\n    echo \"moving pngcrushed png file at ${base_path} to ${stored_original_file}\"\n    #rm \"$base_path\"\n    mv \"$base_path\" \"${stored_original_file}\"\n\n    # Rename normalized png's filename to original one\n    echo \"Moving normalized png file to original one ${base_tmp_normalizedFilePath} to ${base_path}\"\n    mv \"${base_tmp_normalizedFilePath}\" \"${base_path}\"\n\n    width=`identify -format %w ${base_path}`\n    height=`identify -format %h ${base_path}`\n    band_height=$((($height * 47) / 100))\n    band_position=$(($height - $band_height))\n    text_position=$(($band_position - 3))\n    point_size=$(((13 * $width) / 100))\n\n    echo \"Image dimensions ($width x $height) - band height $band_height @ $band_position - point size $point_size\"\n\n    #\n    # 添加高斯模糊，在模糊图上添加文字\n    #\n    convert ${base_path} -blur 10x8 /tmp/blurred.png\n    convert /tmp/blurred.png -gamma 0 -fill white -draw \"rectangle 0,$band_position,$width,$height\" /tmp/mask.png\n    convert -size ${width}x${band_height} xc:none -fill 'rgba(0,0,0,0.2)' -draw \"rectangle 0,0,$width,$band_height\" /tmp/labels-base.png\n    convert -background none -size ${width}x${band_height} -pointsize $point_size -fill black -gravity center -gravity South caption:\"$caption\" /tmp/labels.png\n\n    convert ${base_path} /tmp/blurred.png /tmp/mask.png -composite /tmp/temp.png\n\n    rm /tmp/blurred.png\n    rm /tmp/mask.png\n\n    #\n    # 合成最后的图片\n    #\n    filename=New${base_file}\n    convert /tmp/temp.png /tmp/labels-base.png -geometry +0+$band_position -composite /tmp/labels.png -geometry +0+$text_position -geometry +${w}-${h} -composite \"${target_path}\"\n    \n    # 只写文字在Icon上\n    # convert -background none -fill black -pointsize $point_size -gravity south caption:\"$caption\" ${base_path} +swap -composite \"${target_path}\"\n\n    # 清除文件\n    rm /tmp/temp.png\n    rm /tmp/labels-base.png\n    rm /tmp/labels.png\n\n    echo \"Overlayed ${target_path}\"\n}\n```\n\n这要就完成了在 AppIcon 上添加 build 信息的处理。\n\n# 参考\n> [iOS——写一个快速定位问题的脚本](http://zhoulingyu.com/2017/04/04/iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC/#more)\n> [iOS探索：iOS程序的Build过程](http://beyondvincent.com/2013/11/21/2013-11-23-123-build-process/)\n\n","source":"_posts/iOS-AppIcon添加打包标识.md","raw":"---\ntitle: iOSAppIcon添加打包标识\ndate: 2017-08-17 17:04:18\ncategories:\n- 技术\ntags:\n- iOS\n---\n\n# 前言\n\niOS 分支开发迭代过程中，测试经常需要装不同分支不同版本的包，有时候测试发现了 BUG 后，会突然忘了自己下的是 CI 上的哪一个包？这时候，我们可以把打包的 build 信息打印在 AppIcon 上，这样只需要根据 Icon 上的 build 信息就一目了然了。\n\n<!--more-->\n\n# ImageMagick\n\n使用 ImageMagick 可以创建、编辑、合成或转换图片。它可以读和写各种格式的图像（超过 200 种格式）包括 PNG、JPEG、JPEG - 2000、GIF、TIFF、DPX、EXR、WebP、Postscript、PDF、SVG。ImageMagick 可以调整、翻转、镜像、旋转、扭曲、剪切和转换图像、图像色彩调整，适用于各种特殊效果,或绘制文本、线、多边形、椭圆和贝塞尔曲线。\n\n通过 shell command 就可以轻易使用以上功能。\n\n# Build Phases\n\nBuild Phases 代表着将代码构建为一个可执行文件的规则。它描述了 build 过程中必须执行的不同任务。\n\n## 定制Build Phases\n\n你可以在 build phases 中添加运行自定义脚本，就像 CocoaPods 使用的一样，来做额外的工作。当然也可以添加一些资源的拷贝任务，当你需要将某些确定的资源拷贝到制定的 target 目录中，这非常有用。\n另外你可以通过定制 build phase 来添加带有水印(包括版本号和commit hash)的 app icon。只需要在 build phase 中添加一个 Run Script.\n\n在工程 `Target` -> `Build Phases` 中新建一个 `Run Script`，我们可以给它起名 `Add BuildInfo on Icon`。\n\n![image](iOS-AppIcon添加打包标识/buildPhases_Shell.png)\n\n\n创建脚本 draw_icon_buildinfo.sh\n\n## 写加水印的脚本\n\n1.判断执行 Build 的机器是否安装了 ImageMagic\n\n```\nconvertPath=`which convert`\n# 判断 convertPath 文件是否存在\nif [ ! -f ${convertPath}]; then\necho \"==============\nWARNING: 你需要先安装 ImageMagick！！！！:\nbrew install imagemagick\n==============\"\nexit 0;\nfi\n```\n\n2.判断 Release 包不执行以下操作\n\n```\nif [ ${CONFIGURATION} = \"Release\" ]; then\nexit 0;\nfi\n```\n\n3.获取 commit、branch、version 等信息\n\n```\nversion=`/usr/libexec/PlistBuddy -c \"Print CFBundleShortVersionString\" \"${CONFIGURATION_BUILD_DIR}/${INFOPLIST_PATH}\"`\nbuild_num=`/usr/libexec/PlistBuddy -c \"Print SinaNewsBuildVersion\" \"${CONFIGURATION_BUILD_DIR}/${INFOPLIST_PATH}\"`\nif [[ ${build_num} == \"\" ]]; then\n    build_num=`date +\"%Y%m%d%H%M\"`\n    echo \"Use Xcode building, build time ${build_num}\"\nfi\ncommit=`git rev-parse --short HEAD`\nbranch=$(git rev-parse --abbrev-ref HEAD)\ncaption=\"${version}\\n${build_num}\\n${branch}\"\necho \"caption : ${caption}\"\n```\n\n4.找Icon图片\n\n在编译后的 info.plist 中，可以看到：\n![image](iOS-AppIcon添加打包标识/infoPlist_Icon1.png)\n![image](iOS-AppIcon添加打包标识/infoPlist_Icon2.png)\n\n通过脚本输出的结果为：\n\n```\n/usr/libexec/PlistBuddy -c \"Print CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles\" \"${CONFIGURATION_BUILD_DIR}/${INFOPLIST_PATH}\"\n```\n\n```\nArray {\n    AppIcon20x20\n    AppIcon29x29\n    AppIcon40x40\n    AppIcon60x60\n}\n```\n所以真实的 icon 个数为:\n\n```\nreal_icon_index=$((${icon_count} - 2))\n```\n\n根据数量循环，对找到的每个 Icon 执行加水印的操作：\n\n```\ni=0\nwhile [  $i -lt $real_icon_index ]; do\n  icon=`/usr/libexec/PlistBuddy -c \"Print CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles:$i\" \"${CONFIGURATION_BUILD_DIR}/${INFOPLIST_PATH}\"`\n\n  echo \"icon: ${icon}\"\n\n  if [[ $icon == *.png ]] || [[ $icon == *.PNG ]]\n  then\n    processIcon $icon\n  else\n    processIcon \"${icon}.png\"\n    processIcon \"${icon}@2x.png\"\n    processIcon \"${icon}@3x.png\"\n\n    processIcon \"${icon}~ipad.png\"\n    processIcon \"${icon}@2x~ipad.png\"\n  fi\n  let i=i+1\ndone\n```\n\n5.对找到的图片 Icon 加水印处理\n\n```\nfunction processIcon() {\n    base_file=$1\n\n    cd \"${CONFIGURATION_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}\"\n    base_path=`find . -name ${base_file}`\n\n    real_path=$( abspath \"${base_path}\" )\n    echo \"base path ${real_path}\"\n\n    # 验证存在性\n    if [[ ! -f ${base_path} || -z ${base_path} ]]; then\n      return;\n    fi\n\n    # TODO: if they are the same we need to fix it by introducing temp\n    target_file=`basename $base_path`\n    target_path=\"${CONFIGURATION_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/${target_file}\"\n\n    base_tmp_normalizedFileName=\"${base_file%.*}-normalized.${base_file##*.}\"\n    base_tmp_path=`dirname $base_path`\n    base_tmp_normalizedFilePath=\"${base_tmp_path}/${base_tmp_normalizedFileName}\"\n\n    stored_original_file=\"${base_tmp_normalizedFilePath}-tmp\"\n    if [[ -f ${stored_original_file} ]]; then\n      echo \"found previous file at path ${stored_original_file}, using it as base\"\n      mv \"${stored_original_file}\" \"${base_path}\"\n    fi\n\n    if [ $CONFIGURATION = \"Release\" ]; then\n      cp \"${base_path}\" \"$target_path\"\n      return 0;\n    fi\n\n    echo \"Reverting optimized PNG to normal\"\n    # Normalize\n    echo \"xcrun -sdk iphoneos pngcrush -revert-iphone-optimizations -q ${base_path} ${base_tmp_normalizedFilePath}\"\n    xcrun -sdk iphoneos pngcrush -revert-iphone-optimizations -q \"${base_path}\" \"${base_tmp_normalizedFilePath}\"\n\n    # move original pngcrush png to tmp file\n    echo \"moving pngcrushed png file at ${base_path} to ${stored_original_file}\"\n    #rm \"$base_path\"\n    mv \"$base_path\" \"${stored_original_file}\"\n\n    # Rename normalized png's filename to original one\n    echo \"Moving normalized png file to original one ${base_tmp_normalizedFilePath} to ${base_path}\"\n    mv \"${base_tmp_normalizedFilePath}\" \"${base_path}\"\n\n    width=`identify -format %w ${base_path}`\n    height=`identify -format %h ${base_path}`\n    band_height=$((($height * 47) / 100))\n    band_position=$(($height - $band_height))\n    text_position=$(($band_position - 3))\n    point_size=$(((13 * $width) / 100))\n\n    echo \"Image dimensions ($width x $height) - band height $band_height @ $band_position - point size $point_size\"\n\n    #\n    # 添加高斯模糊，在模糊图上添加文字\n    #\n    convert ${base_path} -blur 10x8 /tmp/blurred.png\n    convert /tmp/blurred.png -gamma 0 -fill white -draw \"rectangle 0,$band_position,$width,$height\" /tmp/mask.png\n    convert -size ${width}x${band_height} xc:none -fill 'rgba(0,0,0,0.2)' -draw \"rectangle 0,0,$width,$band_height\" /tmp/labels-base.png\n    convert -background none -size ${width}x${band_height} -pointsize $point_size -fill black -gravity center -gravity South caption:\"$caption\" /tmp/labels.png\n\n    convert ${base_path} /tmp/blurred.png /tmp/mask.png -composite /tmp/temp.png\n\n    rm /tmp/blurred.png\n    rm /tmp/mask.png\n\n    #\n    # 合成最后的图片\n    #\n    filename=New${base_file}\n    convert /tmp/temp.png /tmp/labels-base.png -geometry +0+$band_position -composite /tmp/labels.png -geometry +0+$text_position -geometry +${w}-${h} -composite \"${target_path}\"\n    \n    # 只写文字在Icon上\n    # convert -background none -fill black -pointsize $point_size -gravity south caption:\"$caption\" ${base_path} +swap -composite \"${target_path}\"\n\n    # 清除文件\n    rm /tmp/temp.png\n    rm /tmp/labels-base.png\n    rm /tmp/labels.png\n\n    echo \"Overlayed ${target_path}\"\n}\n```\n\n这要就完成了在 AppIcon 上添加 build 信息的处理。\n\n# 参考\n> [iOS——写一个快速定位问题的脚本](http://zhoulingyu.com/2017/04/04/iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC/#more)\n> [iOS探索：iOS程序的Build过程](http://beyondvincent.com/2013/11/21/2013-11-23-123-build-process/)\n\n","slug":"iOS-AppIcon添加打包标识","published":1,"updated":"2017-10-28T03:38:22.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9aztbpf000pxox08kcf1vsn","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>iOS 分支开发迭代过程中，测试经常需要装不同分支不同版本的包，有时候测试发现了 BUG 后，会突然忘了自己下的是 CI 上的哪一个包？这时候，我们可以把打包的 build 信息打印在 AppIcon 上，这样只需要根据 Icon 上的 build 信息就一目了然了。</p>\n<a id=\"more\"></a>\n<h1 id=\"ImageMagick\"><a href=\"#ImageMagick\" class=\"headerlink\" title=\"ImageMagick\"></a>ImageMagick</h1><p>使用 ImageMagick 可以创建、编辑、合成或转换图片。它可以读和写各种格式的图像（超过 200 种格式）包括 PNG、JPEG、JPEG - 2000、GIF、TIFF、DPX、EXR、WebP、Postscript、PDF、SVG。ImageMagick 可以调整、翻转、镜像、旋转、扭曲、剪切和转换图像、图像色彩调整，适用于各种特殊效果,或绘制文本、线、多边形、椭圆和贝塞尔曲线。</p>\n<p>通过 shell command 就可以轻易使用以上功能。</p>\n<h1 id=\"Build-Phases\"><a href=\"#Build-Phases\" class=\"headerlink\" title=\"Build Phases\"></a>Build Phases</h1><p>Build Phases 代表着将代码构建为一个可执行文件的规则。它描述了 build 过程中必须执行的不同任务。</p>\n<h2 id=\"定制Build-Phases\"><a href=\"#定制Build-Phases\" class=\"headerlink\" title=\"定制Build Phases\"></a>定制Build Phases</h2><p>你可以在 build phases 中添加运行自定义脚本，就像 CocoaPods 使用的一样，来做额外的工作。当然也可以添加一些资源的拷贝任务，当你需要将某些确定的资源拷贝到制定的 target 目录中，这非常有用。<br>另外你可以通过定制 build phase 来添加带有水印(包括版本号和commit hash)的 app icon。只需要在 build phase 中添加一个 Run Script.</p>\n<p>在工程 <code>Target</code> -&gt; <code>Build Phases</code> 中新建一个 <code>Run Script</code>，我们可以给它起名 <code>Add BuildInfo on Icon</code>。</p>\n<p><img src=\"/2017/08/17/iOS-AppIcon添加打包标识/buildPhases_Shell.png\" alt=\"image\"></p>\n<p>创建脚本 draw_icon_buildinfo.sh</p>\n<h2 id=\"写加水印的脚本\"><a href=\"#写加水印的脚本\" class=\"headerlink\" title=\"写加水印的脚本\"></a>写加水印的脚本</h2><p>1.判断执行 Build 的机器是否安装了 ImageMagic</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">convertPath=`which convert`</div><div class=\"line\"># 判断 convertPath 文件是否存在</div><div class=\"line\">if [ ! -f $&#123;convertPath&#125;]; then</div><div class=\"line\">echo &quot;==============</div><div class=\"line\">WARNING: 你需要先安装 ImageMagick！！！！:</div><div class=\"line\">brew install imagemagick</div><div class=\"line\">==============&quot;</div><div class=\"line\">exit 0;</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>2.判断 Release 包不执行以下操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">if [ $&#123;CONFIGURATION&#125; = &quot;Release&quot; ]; then</div><div class=\"line\">exit 0;</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>3.获取 commit、branch、version 等信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">version=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleShortVersionString&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;`</div><div class=\"line\">build_num=`/usr/libexec/PlistBuddy -c &quot;Print SinaNewsBuildVersion&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;`</div><div class=\"line\">if [[ $&#123;build_num&#125; == &quot;&quot; ]]; then</div><div class=\"line\">    build_num=`date +&quot;%Y%m%d%H%M&quot;`</div><div class=\"line\">    echo &quot;Use Xcode building, build time $&#123;build_num&#125;&quot;</div><div class=\"line\">fi</div><div class=\"line\">commit=`git rev-parse --short HEAD`</div><div class=\"line\">branch=$(git rev-parse --abbrev-ref HEAD)</div><div class=\"line\">caption=&quot;$&#123;version&#125;\\n$&#123;build_num&#125;\\n$&#123;branch&#125;&quot;</div><div class=\"line\">echo &quot;caption : $&#123;caption&#125;&quot;</div></pre></td></tr></table></figure>\n<p>4.找Icon图片</p>\n<p>在编译后的 info.plist 中，可以看到：<br><img src=\"/2017/08/17/iOS-AppIcon添加打包标识/infoPlist_Icon1.png\" alt=\"image\"><br><img src=\"/2017/08/17/iOS-AppIcon添加打包标识/infoPlist_Icon2.png\" alt=\"image\"></p>\n<p>通过脚本输出的结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/libexec/PlistBuddy -c &quot;Print CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array &#123;</div><div class=\"line\">    AppIcon20x20</div><div class=\"line\">    AppIcon29x29</div><div class=\"line\">    AppIcon40x40</div><div class=\"line\">    AppIcon60x60</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所以真实的 icon 个数为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">real_icon_index=$(($&#123;icon_count&#125; - 2))</div></pre></td></tr></table></figure>\n<p>根据数量循环，对找到的每个 Icon 执行加水印的操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">i=0</div><div class=\"line\">while [  $i -lt $real_icon_index ]; do</div><div class=\"line\">  icon=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles:$i&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;`</div><div class=\"line\"></div><div class=\"line\">  echo &quot;icon: $&#123;icon&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">  if [[ $icon == *.png ]] || [[ $icon == *.PNG ]]</div><div class=\"line\">  then</div><div class=\"line\">    processIcon $icon</div><div class=\"line\">  else</div><div class=\"line\">    processIcon &quot;$&#123;icon&#125;.png&quot;</div><div class=\"line\">    processIcon &quot;$&#123;icon&#125;@2x.png&quot;</div><div class=\"line\">    processIcon &quot;$&#123;icon&#125;@3x.png&quot;</div><div class=\"line\"></div><div class=\"line\">    processIcon &quot;$&#123;icon&#125;~ipad.png&quot;</div><div class=\"line\">    processIcon &quot;$&#123;icon&#125;@2x~ipad.png&quot;</div><div class=\"line\">  fi</div><div class=\"line\">  let i=i+1</div><div class=\"line\">done</div></pre></td></tr></table></figure>\n<p>5.对找到的图片 Icon 加水印处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\">function processIcon() &#123;</div><div class=\"line\">    base_file=$1</div><div class=\"line\"></div><div class=\"line\">    cd &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;&quot;</div><div class=\"line\">    base_path=`find . -name $&#123;base_file&#125;`</div><div class=\"line\"></div><div class=\"line\">    real_path=$( abspath &quot;$&#123;base_path&#125;&quot; )</div><div class=\"line\">    echo &quot;base path $&#123;real_path&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">    # 验证存在性</div><div class=\"line\">    if [[ ! -f $&#123;base_path&#125; || -z $&#123;base_path&#125; ]]; then</div><div class=\"line\">      return;</div><div class=\"line\">    fi</div><div class=\"line\"></div><div class=\"line\">    # TODO: if they are the same we need to fix it by introducing temp</div><div class=\"line\">    target_file=`basename $base_path`</div><div class=\"line\">    target_path=&quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;/$&#123;target_file&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">    base_tmp_normalizedFileName=&quot;$&#123;base_file%.*&#125;-normalized.$&#123;base_file##*.&#125;&quot;</div><div class=\"line\">    base_tmp_path=`dirname $base_path`</div><div class=\"line\">    base_tmp_normalizedFilePath=&quot;$&#123;base_tmp_path&#125;/$&#123;base_tmp_normalizedFileName&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">    stored_original_file=&quot;$&#123;base_tmp_normalizedFilePath&#125;-tmp&quot;</div><div class=\"line\">    if [[ -f $&#123;stored_original_file&#125; ]]; then</div><div class=\"line\">      echo &quot;found previous file at path $&#123;stored_original_file&#125;, using it as base&quot;</div><div class=\"line\">      mv &quot;$&#123;stored_original_file&#125;&quot; &quot;$&#123;base_path&#125;&quot;</div><div class=\"line\">    fi</div><div class=\"line\"></div><div class=\"line\">    if [ $CONFIGURATION = &quot;Release&quot; ]; then</div><div class=\"line\">      cp &quot;$&#123;base_path&#125;&quot; &quot;$target_path&quot;</div><div class=\"line\">      return 0;</div><div class=\"line\">    fi</div><div class=\"line\"></div><div class=\"line\">    echo &quot;Reverting optimized PNG to normal&quot;</div><div class=\"line\">    # Normalize</div><div class=\"line\">    echo &quot;xcrun -sdk iphoneos pngcrush -revert-iphone-optimizations -q $&#123;base_path&#125; $&#123;base_tmp_normalizedFilePath&#125;&quot;</div><div class=\"line\">    xcrun -sdk iphoneos pngcrush -revert-iphone-optimizations -q &quot;$&#123;base_path&#125;&quot; &quot;$&#123;base_tmp_normalizedFilePath&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">    # move original pngcrush png to tmp file</div><div class=\"line\">    echo &quot;moving pngcrushed png file at $&#123;base_path&#125; to $&#123;stored_original_file&#125;&quot;</div><div class=\"line\">    #rm &quot;$base_path&quot;</div><div class=\"line\">    mv &quot;$base_path&quot; &quot;$&#123;stored_original_file&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">    # Rename normalized png&apos;s filename to original one</div><div class=\"line\">    echo &quot;Moving normalized png file to original one $&#123;base_tmp_normalizedFilePath&#125; to $&#123;base_path&#125;&quot;</div><div class=\"line\">    mv &quot;$&#123;base_tmp_normalizedFilePath&#125;&quot; &quot;$&#123;base_path&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">    width=`identify -format %w $&#123;base_path&#125;`</div><div class=\"line\">    height=`identify -format %h $&#123;base_path&#125;`</div><div class=\"line\">    band_height=$((($height * 47) / 100))</div><div class=\"line\">    band_position=$(($height - $band_height))</div><div class=\"line\">    text_position=$(($band_position - 3))</div><div class=\"line\">    point_size=$(((13 * $width) / 100))</div><div class=\"line\"></div><div class=\"line\">    echo &quot;Image dimensions ($width x $height) - band height $band_height @ $band_position - point size $point_size&quot;</div><div class=\"line\"></div><div class=\"line\">    #</div><div class=\"line\">    # 添加高斯模糊，在模糊图上添加文字</div><div class=\"line\">    #</div><div class=\"line\">    convert $&#123;base_path&#125; -blur 10x8 /tmp/blurred.png</div><div class=\"line\">    convert /tmp/blurred.png -gamma 0 -fill white -draw &quot;rectangle 0,$band_position,$width,$height&quot; /tmp/mask.png</div><div class=\"line\">    convert -size $&#123;width&#125;x$&#123;band_height&#125; xc:none -fill &apos;rgba(0,0,0,0.2)&apos; -draw &quot;rectangle 0,0,$width,$band_height&quot; /tmp/labels-base.png</div><div class=\"line\">    convert -background none -size $&#123;width&#125;x$&#123;band_height&#125; -pointsize $point_size -fill black -gravity center -gravity South caption:&quot;$caption&quot; /tmp/labels.png</div><div class=\"line\"></div><div class=\"line\">    convert $&#123;base_path&#125; /tmp/blurred.png /tmp/mask.png -composite /tmp/temp.png</div><div class=\"line\"></div><div class=\"line\">    rm /tmp/blurred.png</div><div class=\"line\">    rm /tmp/mask.png</div><div class=\"line\"></div><div class=\"line\">    #</div><div class=\"line\">    # 合成最后的图片</div><div class=\"line\">    #</div><div class=\"line\">    filename=New$&#123;base_file&#125;</div><div class=\"line\">    convert /tmp/temp.png /tmp/labels-base.png -geometry +0+$band_position -composite /tmp/labels.png -geometry +0+$text_position -geometry +$&#123;w&#125;-$&#123;h&#125; -composite &quot;$&#123;target_path&#125;&quot;</div><div class=\"line\">    </div><div class=\"line\">    # 只写文字在Icon上</div><div class=\"line\">    # convert -background none -fill black -pointsize $point_size -gravity south caption:&quot;$caption&quot; $&#123;base_path&#125; +swap -composite &quot;$&#123;target_path&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">    # 清除文件</div><div class=\"line\">    rm /tmp/temp.png</div><div class=\"line\">    rm /tmp/labels-base.png</div><div class=\"line\">    rm /tmp/labels.png</div><div class=\"line\"></div><div class=\"line\">    echo &quot;Overlayed $&#123;target_path&#125;&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这要就完成了在 AppIcon 上添加 build 信息的处理。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"http://zhoulingyu.com/2017/04/04/iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC/#more\" target=\"_blank\" rel=\"external\">iOS——写一个快速定位问题的脚本</a><br><a href=\"http://beyondvincent.com/2013/11/21/2013-11-23-123-build-process/\" target=\"_blank\" rel=\"external\">iOS探索：iOS程序的Build过程</a></p>\n</blockquote>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>iOS 分支开发迭代过程中，测试经常需要装不同分支不同版本的包，有时候测试发现了 BUG 后，会突然忘了自己下的是 CI 上的哪一个包？这时候，我们可以把打包的 build 信息打印在 AppIcon 上，这样只需要根据 Icon 上的 build 信息就一目了然了。</p>","more":"<h1 id=\"ImageMagick\"><a href=\"#ImageMagick\" class=\"headerlink\" title=\"ImageMagick\"></a>ImageMagick</h1><p>使用 ImageMagick 可以创建、编辑、合成或转换图片。它可以读和写各种格式的图像（超过 200 种格式）包括 PNG、JPEG、JPEG - 2000、GIF、TIFF、DPX、EXR、WebP、Postscript、PDF、SVG。ImageMagick 可以调整、翻转、镜像、旋转、扭曲、剪切和转换图像、图像色彩调整，适用于各种特殊效果,或绘制文本、线、多边形、椭圆和贝塞尔曲线。</p>\n<p>通过 shell command 就可以轻易使用以上功能。</p>\n<h1 id=\"Build-Phases\"><a href=\"#Build-Phases\" class=\"headerlink\" title=\"Build Phases\"></a>Build Phases</h1><p>Build Phases 代表着将代码构建为一个可执行文件的规则。它描述了 build 过程中必须执行的不同任务。</p>\n<h2 id=\"定制Build-Phases\"><a href=\"#定制Build-Phases\" class=\"headerlink\" title=\"定制Build Phases\"></a>定制Build Phases</h2><p>你可以在 build phases 中添加运行自定义脚本，就像 CocoaPods 使用的一样，来做额外的工作。当然也可以添加一些资源的拷贝任务，当你需要将某些确定的资源拷贝到制定的 target 目录中，这非常有用。<br>另外你可以通过定制 build phase 来添加带有水印(包括版本号和commit hash)的 app icon。只需要在 build phase 中添加一个 Run Script.</p>\n<p>在工程 <code>Target</code> -&gt; <code>Build Phases</code> 中新建一个 <code>Run Script</code>，我们可以给它起名 <code>Add BuildInfo on Icon</code>。</p>\n<p><img src=\"/2017/08/17/iOS-AppIcon添加打包标识/buildPhases_Shell.png\" alt=\"image\"></p>\n<p>创建脚本 draw_icon_buildinfo.sh</p>\n<h2 id=\"写加水印的脚本\"><a href=\"#写加水印的脚本\" class=\"headerlink\" title=\"写加水印的脚本\"></a>写加水印的脚本</h2><p>1.判断执行 Build 的机器是否安装了 ImageMagic</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">convertPath=`which convert`</div><div class=\"line\"># 判断 convertPath 文件是否存在</div><div class=\"line\">if [ ! -f $&#123;convertPath&#125;]; then</div><div class=\"line\">echo &quot;==============</div><div class=\"line\">WARNING: 你需要先安装 ImageMagick！！！！:</div><div class=\"line\">brew install imagemagick</div><div class=\"line\">==============&quot;</div><div class=\"line\">exit 0;</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>2.判断 Release 包不执行以下操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">if [ $&#123;CONFIGURATION&#125; = &quot;Release&quot; ]; then</div><div class=\"line\">exit 0;</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>3.获取 commit、branch、version 等信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">version=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleShortVersionString&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;`</div><div class=\"line\">build_num=`/usr/libexec/PlistBuddy -c &quot;Print SinaNewsBuildVersion&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;`</div><div class=\"line\">if [[ $&#123;build_num&#125; == &quot;&quot; ]]; then</div><div class=\"line\">    build_num=`date +&quot;%Y%m%d%H%M&quot;`</div><div class=\"line\">    echo &quot;Use Xcode building, build time $&#123;build_num&#125;&quot;</div><div class=\"line\">fi</div><div class=\"line\">commit=`git rev-parse --short HEAD`</div><div class=\"line\">branch=$(git rev-parse --abbrev-ref HEAD)</div><div class=\"line\">caption=&quot;$&#123;version&#125;\\n$&#123;build_num&#125;\\n$&#123;branch&#125;&quot;</div><div class=\"line\">echo &quot;caption : $&#123;caption&#125;&quot;</div></pre></td></tr></table></figure>\n<p>4.找Icon图片</p>\n<p>在编译后的 info.plist 中，可以看到：<br><img src=\"/2017/08/17/iOS-AppIcon添加打包标识/infoPlist_Icon1.png\" alt=\"image\"><br><img src=\"/2017/08/17/iOS-AppIcon添加打包标识/infoPlist_Icon2.png\" alt=\"image\"></p>\n<p>通过脚本输出的结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/libexec/PlistBuddy -c &quot;Print CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array &#123;</div><div class=\"line\">    AppIcon20x20</div><div class=\"line\">    AppIcon29x29</div><div class=\"line\">    AppIcon40x40</div><div class=\"line\">    AppIcon60x60</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所以真实的 icon 个数为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">real_icon_index=$(($&#123;icon_count&#125; - 2))</div></pre></td></tr></table></figure>\n<p>根据数量循环，对找到的每个 Icon 执行加水印的操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">i=0</div><div class=\"line\">while [  $i -lt $real_icon_index ]; do</div><div class=\"line\">  icon=`/usr/libexec/PlistBuddy -c &quot;Print CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles:$i&quot; &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;`</div><div class=\"line\"></div><div class=\"line\">  echo &quot;icon: $&#123;icon&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">  if [[ $icon == *.png ]] || [[ $icon == *.PNG ]]</div><div class=\"line\">  then</div><div class=\"line\">    processIcon $icon</div><div class=\"line\">  else</div><div class=\"line\">    processIcon &quot;$&#123;icon&#125;.png&quot;</div><div class=\"line\">    processIcon &quot;$&#123;icon&#125;@2x.png&quot;</div><div class=\"line\">    processIcon &quot;$&#123;icon&#125;@3x.png&quot;</div><div class=\"line\"></div><div class=\"line\">    processIcon &quot;$&#123;icon&#125;~ipad.png&quot;</div><div class=\"line\">    processIcon &quot;$&#123;icon&#125;@2x~ipad.png&quot;</div><div class=\"line\">  fi</div><div class=\"line\">  let i=i+1</div><div class=\"line\">done</div></pre></td></tr></table></figure>\n<p>5.对找到的图片 Icon 加水印处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\">function processIcon() &#123;</div><div class=\"line\">    base_file=$1</div><div class=\"line\"></div><div class=\"line\">    cd &quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;&quot;</div><div class=\"line\">    base_path=`find . -name $&#123;base_file&#125;`</div><div class=\"line\"></div><div class=\"line\">    real_path=$( abspath &quot;$&#123;base_path&#125;&quot; )</div><div class=\"line\">    echo &quot;base path $&#123;real_path&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">    # 验证存在性</div><div class=\"line\">    if [[ ! -f $&#123;base_path&#125; || -z $&#123;base_path&#125; ]]; then</div><div class=\"line\">      return;</div><div class=\"line\">    fi</div><div class=\"line\"></div><div class=\"line\">    # TODO: if they are the same we need to fix it by introducing temp</div><div class=\"line\">    target_file=`basename $base_path`</div><div class=\"line\">    target_path=&quot;$&#123;CONFIGURATION_BUILD_DIR&#125;/$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;/$&#123;target_file&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">    base_tmp_normalizedFileName=&quot;$&#123;base_file%.*&#125;-normalized.$&#123;base_file##*.&#125;&quot;</div><div class=\"line\">    base_tmp_path=`dirname $base_path`</div><div class=\"line\">    base_tmp_normalizedFilePath=&quot;$&#123;base_tmp_path&#125;/$&#123;base_tmp_normalizedFileName&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">    stored_original_file=&quot;$&#123;base_tmp_normalizedFilePath&#125;-tmp&quot;</div><div class=\"line\">    if [[ -f $&#123;stored_original_file&#125; ]]; then</div><div class=\"line\">      echo &quot;found previous file at path $&#123;stored_original_file&#125;, using it as base&quot;</div><div class=\"line\">      mv &quot;$&#123;stored_original_file&#125;&quot; &quot;$&#123;base_path&#125;&quot;</div><div class=\"line\">    fi</div><div class=\"line\"></div><div class=\"line\">    if [ $CONFIGURATION = &quot;Release&quot; ]; then</div><div class=\"line\">      cp &quot;$&#123;base_path&#125;&quot; &quot;$target_path&quot;</div><div class=\"line\">      return 0;</div><div class=\"line\">    fi</div><div class=\"line\"></div><div class=\"line\">    echo &quot;Reverting optimized PNG to normal&quot;</div><div class=\"line\">    # Normalize</div><div class=\"line\">    echo &quot;xcrun -sdk iphoneos pngcrush -revert-iphone-optimizations -q $&#123;base_path&#125; $&#123;base_tmp_normalizedFilePath&#125;&quot;</div><div class=\"line\">    xcrun -sdk iphoneos pngcrush -revert-iphone-optimizations -q &quot;$&#123;base_path&#125;&quot; &quot;$&#123;base_tmp_normalizedFilePath&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">    # move original pngcrush png to tmp file</div><div class=\"line\">    echo &quot;moving pngcrushed png file at $&#123;base_path&#125; to $&#123;stored_original_file&#125;&quot;</div><div class=\"line\">    #rm &quot;$base_path&quot;</div><div class=\"line\">    mv &quot;$base_path&quot; &quot;$&#123;stored_original_file&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">    # Rename normalized png&apos;s filename to original one</div><div class=\"line\">    echo &quot;Moving normalized png file to original one $&#123;base_tmp_normalizedFilePath&#125; to $&#123;base_path&#125;&quot;</div><div class=\"line\">    mv &quot;$&#123;base_tmp_normalizedFilePath&#125;&quot; &quot;$&#123;base_path&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">    width=`identify -format %w $&#123;base_path&#125;`</div><div class=\"line\">    height=`identify -format %h $&#123;base_path&#125;`</div><div class=\"line\">    band_height=$((($height * 47) / 100))</div><div class=\"line\">    band_position=$(($height - $band_height))</div><div class=\"line\">    text_position=$(($band_position - 3))</div><div class=\"line\">    point_size=$(((13 * $width) / 100))</div><div class=\"line\"></div><div class=\"line\">    echo &quot;Image dimensions ($width x $height) - band height $band_height @ $band_position - point size $point_size&quot;</div><div class=\"line\"></div><div class=\"line\">    #</div><div class=\"line\">    # 添加高斯模糊，在模糊图上添加文字</div><div class=\"line\">    #</div><div class=\"line\">    convert $&#123;base_path&#125; -blur 10x8 /tmp/blurred.png</div><div class=\"line\">    convert /tmp/blurred.png -gamma 0 -fill white -draw &quot;rectangle 0,$band_position,$width,$height&quot; /tmp/mask.png</div><div class=\"line\">    convert -size $&#123;width&#125;x$&#123;band_height&#125; xc:none -fill &apos;rgba(0,0,0,0.2)&apos; -draw &quot;rectangle 0,0,$width,$band_height&quot; /tmp/labels-base.png</div><div class=\"line\">    convert -background none -size $&#123;width&#125;x$&#123;band_height&#125; -pointsize $point_size -fill black -gravity center -gravity South caption:&quot;$caption&quot; /tmp/labels.png</div><div class=\"line\"></div><div class=\"line\">    convert $&#123;base_path&#125; /tmp/blurred.png /tmp/mask.png -composite /tmp/temp.png</div><div class=\"line\"></div><div class=\"line\">    rm /tmp/blurred.png</div><div class=\"line\">    rm /tmp/mask.png</div><div class=\"line\"></div><div class=\"line\">    #</div><div class=\"line\">    # 合成最后的图片</div><div class=\"line\">    #</div><div class=\"line\">    filename=New$&#123;base_file&#125;</div><div class=\"line\">    convert /tmp/temp.png /tmp/labels-base.png -geometry +0+$band_position -composite /tmp/labels.png -geometry +0+$text_position -geometry +$&#123;w&#125;-$&#123;h&#125; -composite &quot;$&#123;target_path&#125;&quot;</div><div class=\"line\">    </div><div class=\"line\">    # 只写文字在Icon上</div><div class=\"line\">    # convert -background none -fill black -pointsize $point_size -gravity south caption:&quot;$caption&quot; $&#123;base_path&#125; +swap -composite &quot;$&#123;target_path&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">    # 清除文件</div><div class=\"line\">    rm /tmp/temp.png</div><div class=\"line\">    rm /tmp/labels-base.png</div><div class=\"line\">    rm /tmp/labels.png</div><div class=\"line\"></div><div class=\"line\">    echo &quot;Overlayed $&#123;target_path&#125;&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这要就完成了在 AppIcon 上添加 build 信息的处理。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"http://zhoulingyu.com/2017/04/04/iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC/#more\">iOS——写一个快速定位问题的脚本</a><br><a href=\"http://beyondvincent.com/2013/11/21/2013-11-23-123-build-process/\">iOS探索：iOS程序的Build过程</a></p>\n</blockquote>"},{"title":"使用CocoaPods创建私有Spec Repo管理项目公共组件","date":"2016-08-19T11:14:19.000Z","_content":"\n# 前言\n\n项目做多了，你会发现有很多基础功能模块是可以通用的，完全可以独立出来抽象成一个公用库，方便以后开发新项目的时候可以直接使用这些基础组件，不需要再重新开发，提高开发效率。同时，随着项目和业务的发展，工程量越来越大，业务模块越来越多，我们采用组件化的方式来开发，组件化就需要每个业务模块独立开发，方便迭代和代码管理。不管是通用的基础服务组件，还是独立的业务功能组件，都需要我们来进行组件管理。\n\nCocoaPods 是非常好用的一个iOS依赖管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库，以及管理自己的项目中的私有组件库。\n\n<!--more-->\n\n# CocoaPods 管理私有组件\n\n我们通过 CocoaPods 来使用和管理项目中的第三方库非常方便也非常简单，下面我们来学习下如何创建自己的私有的组件仓库，管理私有组件。\n\n## 1.创建私有 Spec Repo\n\nSpec Repo 是一个存放了所有 Pods 的索引文件 podspec 的仓库，集成的时候就是通过仓库里的 Pod 所对应的索引文件来找到对应的源码或者 framework的，当你使用 CocoaPods 后他会被 clone 到本地的 `~/.cocoapods/repos` 目录下，Github 官方的 Spec Repo 叫 master，我们可以到这个目录下查看 master 下的结构：\n\n```\n.\n├── Specs\n    └── [SPEC_NAME]\n        └── [VERSION]\n            └── [SPEC_NAME].podspec\n            \n```\n\n我们要存放私有的组件，当然不能用官方的 Repo 库了，所以我们要创建一个私有的 Spec Repo 库，首先我们先在 Gitlab 或者其他 Git 服务中创建一个仓库，例如我这里创建的一个仓库地址：https://gitlab.com/MZLApp/MZLSpecs.git 。            \n\n仓库创建好之后，执行下面的命令来把这个仓库作为一个 Pod 索引仓库：\n\n```\n# pod repo add [Private Repo Name] [GitHub HTTPS clone URL]\n$ pod repo add MZLSpecs https://gitlab.com/MZLApp/MZLSpecs.git\n```\n\n执行成功后，进入到 `~/.cocoapods/repos` 目录，就可以看到我们刚创建的 MZLSpecs 这个目录了，此时创建私有 Spec Repo 就完成了。\n\n## 2. 创建 Pod 组件库\n\n[CocoaPods](http://guides.cocoapods.org/making/using-pod-lib-create)提供了命令 `pod lib create xxx` 可以给我们很方便的创建一个 Pod，例如，创建一个 ObjC 常用的 Category 分类的公用组件库，执行下面的命令：\n\n```\npod lib create MZLCategory\n```\n\n这里会询问几个问题，1.你的仓库是用什么语言（Swift/ObjC）；2.是否要帮你创建一个 Demo 工程；3.你是否需要一个测试框架（Specta/Kiwi/None）；4.你是否需要基于 View 测试；5.你的 Pod 库里类的前缀。按你的具体情况做出选择：\n\n```\nCloning `https://github.com/CocoaPods/pod-template.git` into `MZLCategory`.\nConfiguring MZLCategory template.\n\n------------------------------\n\nTo get you started we need to ask a few questions, this should only take a minute.\n\nIf this is your first time we recommend running through with the guide:\n - http://guides.cocoapods.org/making/using-pod-lib-create.html\n ( hold cmd and click links to open in a browser. )\n\n\nWhat language do you want to use?? [ Swift / ObjC ]\n > ObjC\n\nWould you like to include a demo application with your library? [ Yes / No ]\n > Yes\n\nWhich testing frameworks will you use? [ Specta / Kiwi / None ]\n > None\n\nWould you like to do view based testing? [ Yes / No ]\n > No\n\nWhat is your class prefix?\n > MZL\n```\n\n问题选择完成后，如果你选择了帮你创建 Demo 的话，CocoaPods 会自动帮你执行 `pod install` 来生成 workspace 文件，完成后并自动在 Xcode 中打开：\n\n```\nRunning pod install on your new library.\n\nAnalyzing dependencies\nFetching podspec for `MZLCategory` from `../`\nDownloading dependencies\nInstalling MZLCategory (0.1.0)\nGenerating Pods project\nIntegrating client project\n\n[!] Please close any current Xcode sessions and use `MZLCategory.xcworkspace` for this project from now on.\nSending stats\nPod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.\n\n[!] Automatically assigning platform ios with version 8.3 on target MZLCategory_Example because no platform was specified. Please specify a platform for this target in your Podfile. See `https://guides.cocoapods.org/syntax/podfile.html#platform`.\n\n Ace! you're ready to go!\n We will start you off by opening your project in Xcode\n  open 'MZLCategory/Example/MZLCategory.xcworkspace'\n\nTo learn more about the template see `https://github.com/CocoaPods/pod-template.git`.\nTo learn more about creating a new pod, see `http://guides.cocoapods.org/making/making-a-cocoapod`.\n```\n\n这样，一个 Pod 就创建好了，我们来看这个 Pod 的结构以及相关介绍如下：\n\n```\nMZLCategory\n├── Example                     # Demo\n│   ├── MZLCategory\n│   ├── MZLCategory.xcodeproj\n│   ├── MZLCategory.xcworkspace\n│   ├── Podfile\n│   ├── Podfile.lock\n│   ├── Pods\n│   └── Tests\n├── LICENSE\n├── MZLCategory                 # Pod 组件\n│   ├── Assets                  # Pod 中的资源文件目录\n│   └── Classes                 # Pod 中的类文件目录   \n├── MZLCategory.podspec         # Pod 索引文件\n├── README.md\n└── _Pods.xcodeproj -> Example/Pods/Pods.xcodeproj\n```\n\n第一次提交，我们先配置好 podspec 文件，修改 summary、description、homepage、source 等配置，更多 podspec 的介绍在[这里](http://guides.cocoapods.org/making/specs-and-specs-repo.html)：\n\n```\nPod::Spec.new do |s|\n  s.name             = 'MZLCategory'\n  s.version          = '0.1.0'\n  s.summary          = '公用组件库：ObjC 的常用 Category 库'\n\n# This description is used to generate tags and improve search results.\n#   * Think: What does it do? Why did you write it? What is the focus?\n#   * Try to keep it short, snappy and to the point.\n#   * Write the description between the DESC delimiters below.\n#   * Finally, don't worry about the indent, CocoaPods strips it!\n\n  s.description      = <<-DESC\n公用组件库：ObjC 的常用 Category 库，包括 NSString，UIImage 等常用的类的分类\n                       DESC\n\n  s.homepage         = 'https://gitlab.com/MZLApp/MZLCategory'\n  # s.screenshots     = 'www.example.com/screenshots_1', 'www.example.com/screenshots_2'\n  s.license          = { :type => 'MIT', :file => 'LICENSE' }\n  s.author           = { 'lijin' => 'mlijin9011@163.com' }\n  s.source           = { :git => 'https://gitlab.com/MZLApp/MZLCategory.git', :tag => s.version.to_s }\n  # s.social_media_url = 'https://twitter.com/<TWITTER_USERNAME>'\n\n  s.ios.deployment_target = '8.0'\n\n  s.source_files = 'MZLCategory/Classes/**/*'        #代码源文件地址，**/*表示Classes目录及其子目录下所有文件，如果有多个目录下则用逗号分开，如果需要在项目中分组显示，这里也要做相应的设置\n  \n  # s.resource_bundles = {\n  #   'MZLCategory' => ['MZLCategory/Assets/*.png']  #资源文件地址\n  # }\n\n  # s.public_header_files = 'Pod/Classes/**/*.h'     #公开头文件地址\n  # s.frameworks = 'UIKit', 'MapKit'                 #所需的framework，多个用逗号隔开\n  # s.dependency 'AFNetworking', '~> 2.3'              #依赖关系，该项目所依赖的其他库，如果有多个需要填写多个s.dependency\n\nend\n```\n\n这个 Pod 已经是一个本地的 Git 仓库，接着我们需要把本地仓库和远程仓库关联起来，先在 Gitlab 上创建一个相应的组件仓库：https://gitlab.com/MZLApp/MZLCategory.git\n\n```\n$ cd MZLCategory\n$ git add .\n$ git commit -s -m \"Initial Commit of Pod Library\"\n$ git remote add origin git@gitlab.com:MZLApp/MZLCategory.git   #关联远端仓库\n$ git push origin master     #提交到远端仓库\n```\n\n创建 tag，这个 tag 需要和 podspec 文件中的 version 一致，不然提交 pod 到 spec repo 的时候就会说找不到此版本，\n\n```\ngit tag -m \"Initial Pod\" 0.1.0\ngit push --tags\n```\n\n## 3. 提交 Pod 到私有 Spec Repo\n\n提交 Pod 到 Spec Repo 就是提交 Pod 的索引文件 podspec，提交之前先验证一下，验证通过后才能提交，执行下面的命令来验证：\n\n```\npod lib lint --allow-warnings\n```\n\n验证成功后会输出：\n\n```\n-> MZLCategory (0.1.0)\nMZLCategory passed validation.\n```\n\n验证成功后，我们就可以提交 podspec 到 Spec Repo 了，执行：\n\n```\npod repo push MZLSpecs MZLCategory.podspec --use-libraries --allow-warnings\n```\n\n提交成功后，就可以在 `~/.cocoapods/repos/MZLSpecs` 目录下看到 MZLCategory 这个 Pod 了，同时 MZLSpecs 的远端仓库中 MZLCategory 这个 pod 的 podspec 也被 push 上去了。\n\n```\nMZLSpecs\n└── MZLCategory\n    └── 0.1.0\n```\n\n## 4. 私有 Pod 库的使用\n\n使用方法同 Github 官方的第三方库，只需要在你的 Podfile 文件中添加你的 Spec Repo 地址作为查找 Pod 库的源地址：\n\n```\nsource 'https://github.com/CocoaPods/Specs.git'\nsource 'https://gitlab.com/MZLApp/MZLSpecs.git'\n\nuse_frameworks!\ninhibit_all_warnings!\n\nplatform :ios, '8.0'\n\ntarget 'SinaNews' do\n    pod 'AFNetworking', '3.1.0'\n    ... ...\n    pod 'MZLCategory',  '0.1.0'\nend\n```\n\n# 参考\n\n- [CocoaPods官方文档](http://guides.cocoapods.org/making/private-cocoapods.html)\n- [使用Cocoapods创建私有podspec](http://www.cocoachina.com/ios/20150228/11206.html)\n\n\n","source":"_posts/使用CocoaPods创建私有Spec-Repo管理项目公共组件.md","raw":"---\ntitle: 使用CocoaPods创建私有Spec Repo管理项目公共组件\ndate: 2016-08-19 19:14:19\ncategories:\n- 技术\ntags:\n- iOS\n- CocoaPods\n---\n\n# 前言\n\n项目做多了，你会发现有很多基础功能模块是可以通用的，完全可以独立出来抽象成一个公用库，方便以后开发新项目的时候可以直接使用这些基础组件，不需要再重新开发，提高开发效率。同时，随着项目和业务的发展，工程量越来越大，业务模块越来越多，我们采用组件化的方式来开发，组件化就需要每个业务模块独立开发，方便迭代和代码管理。不管是通用的基础服务组件，还是独立的业务功能组件，都需要我们来进行组件管理。\n\nCocoaPods 是非常好用的一个iOS依赖管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库，以及管理自己的项目中的私有组件库。\n\n<!--more-->\n\n# CocoaPods 管理私有组件\n\n我们通过 CocoaPods 来使用和管理项目中的第三方库非常方便也非常简单，下面我们来学习下如何创建自己的私有的组件仓库，管理私有组件。\n\n## 1.创建私有 Spec Repo\n\nSpec Repo 是一个存放了所有 Pods 的索引文件 podspec 的仓库，集成的时候就是通过仓库里的 Pod 所对应的索引文件来找到对应的源码或者 framework的，当你使用 CocoaPods 后他会被 clone 到本地的 `~/.cocoapods/repos` 目录下，Github 官方的 Spec Repo 叫 master，我们可以到这个目录下查看 master 下的结构：\n\n```\n.\n├── Specs\n    └── [SPEC_NAME]\n        └── [VERSION]\n            └── [SPEC_NAME].podspec\n            \n```\n\n我们要存放私有的组件，当然不能用官方的 Repo 库了，所以我们要创建一个私有的 Spec Repo 库，首先我们先在 Gitlab 或者其他 Git 服务中创建一个仓库，例如我这里创建的一个仓库地址：https://gitlab.com/MZLApp/MZLSpecs.git 。            \n\n仓库创建好之后，执行下面的命令来把这个仓库作为一个 Pod 索引仓库：\n\n```\n# pod repo add [Private Repo Name] [GitHub HTTPS clone URL]\n$ pod repo add MZLSpecs https://gitlab.com/MZLApp/MZLSpecs.git\n```\n\n执行成功后，进入到 `~/.cocoapods/repos` 目录，就可以看到我们刚创建的 MZLSpecs 这个目录了，此时创建私有 Spec Repo 就完成了。\n\n## 2. 创建 Pod 组件库\n\n[CocoaPods](http://guides.cocoapods.org/making/using-pod-lib-create)提供了命令 `pod lib create xxx` 可以给我们很方便的创建一个 Pod，例如，创建一个 ObjC 常用的 Category 分类的公用组件库，执行下面的命令：\n\n```\npod lib create MZLCategory\n```\n\n这里会询问几个问题，1.你的仓库是用什么语言（Swift/ObjC）；2.是否要帮你创建一个 Demo 工程；3.你是否需要一个测试框架（Specta/Kiwi/None）；4.你是否需要基于 View 测试；5.你的 Pod 库里类的前缀。按你的具体情况做出选择：\n\n```\nCloning `https://github.com/CocoaPods/pod-template.git` into `MZLCategory`.\nConfiguring MZLCategory template.\n\n------------------------------\n\nTo get you started we need to ask a few questions, this should only take a minute.\n\nIf this is your first time we recommend running through with the guide:\n - http://guides.cocoapods.org/making/using-pod-lib-create.html\n ( hold cmd and click links to open in a browser. )\n\n\nWhat language do you want to use?? [ Swift / ObjC ]\n > ObjC\n\nWould you like to include a demo application with your library? [ Yes / No ]\n > Yes\n\nWhich testing frameworks will you use? [ Specta / Kiwi / None ]\n > None\n\nWould you like to do view based testing? [ Yes / No ]\n > No\n\nWhat is your class prefix?\n > MZL\n```\n\n问题选择完成后，如果你选择了帮你创建 Demo 的话，CocoaPods 会自动帮你执行 `pod install` 来生成 workspace 文件，完成后并自动在 Xcode 中打开：\n\n```\nRunning pod install on your new library.\n\nAnalyzing dependencies\nFetching podspec for `MZLCategory` from `../`\nDownloading dependencies\nInstalling MZLCategory (0.1.0)\nGenerating Pods project\nIntegrating client project\n\n[!] Please close any current Xcode sessions and use `MZLCategory.xcworkspace` for this project from now on.\nSending stats\nPod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.\n\n[!] Automatically assigning platform ios with version 8.3 on target MZLCategory_Example because no platform was specified. Please specify a platform for this target in your Podfile. See `https://guides.cocoapods.org/syntax/podfile.html#platform`.\n\n Ace! you're ready to go!\n We will start you off by opening your project in Xcode\n  open 'MZLCategory/Example/MZLCategory.xcworkspace'\n\nTo learn more about the template see `https://github.com/CocoaPods/pod-template.git`.\nTo learn more about creating a new pod, see `http://guides.cocoapods.org/making/making-a-cocoapod`.\n```\n\n这样，一个 Pod 就创建好了，我们来看这个 Pod 的结构以及相关介绍如下：\n\n```\nMZLCategory\n├── Example                     # Demo\n│   ├── MZLCategory\n│   ├── MZLCategory.xcodeproj\n│   ├── MZLCategory.xcworkspace\n│   ├── Podfile\n│   ├── Podfile.lock\n│   ├── Pods\n│   └── Tests\n├── LICENSE\n├── MZLCategory                 # Pod 组件\n│   ├── Assets                  # Pod 中的资源文件目录\n│   └── Classes                 # Pod 中的类文件目录   \n├── MZLCategory.podspec         # Pod 索引文件\n├── README.md\n└── _Pods.xcodeproj -> Example/Pods/Pods.xcodeproj\n```\n\n第一次提交，我们先配置好 podspec 文件，修改 summary、description、homepage、source 等配置，更多 podspec 的介绍在[这里](http://guides.cocoapods.org/making/specs-and-specs-repo.html)：\n\n```\nPod::Spec.new do |s|\n  s.name             = 'MZLCategory'\n  s.version          = '0.1.0'\n  s.summary          = '公用组件库：ObjC 的常用 Category 库'\n\n# This description is used to generate tags and improve search results.\n#   * Think: What does it do? Why did you write it? What is the focus?\n#   * Try to keep it short, snappy and to the point.\n#   * Write the description between the DESC delimiters below.\n#   * Finally, don't worry about the indent, CocoaPods strips it!\n\n  s.description      = <<-DESC\n公用组件库：ObjC 的常用 Category 库，包括 NSString，UIImage 等常用的类的分类\n                       DESC\n\n  s.homepage         = 'https://gitlab.com/MZLApp/MZLCategory'\n  # s.screenshots     = 'www.example.com/screenshots_1', 'www.example.com/screenshots_2'\n  s.license          = { :type => 'MIT', :file => 'LICENSE' }\n  s.author           = { 'lijin' => 'mlijin9011@163.com' }\n  s.source           = { :git => 'https://gitlab.com/MZLApp/MZLCategory.git', :tag => s.version.to_s }\n  # s.social_media_url = 'https://twitter.com/<TWITTER_USERNAME>'\n\n  s.ios.deployment_target = '8.0'\n\n  s.source_files = 'MZLCategory/Classes/**/*'        #代码源文件地址，**/*表示Classes目录及其子目录下所有文件，如果有多个目录下则用逗号分开，如果需要在项目中分组显示，这里也要做相应的设置\n  \n  # s.resource_bundles = {\n  #   'MZLCategory' => ['MZLCategory/Assets/*.png']  #资源文件地址\n  # }\n\n  # s.public_header_files = 'Pod/Classes/**/*.h'     #公开头文件地址\n  # s.frameworks = 'UIKit', 'MapKit'                 #所需的framework，多个用逗号隔开\n  # s.dependency 'AFNetworking', '~> 2.3'              #依赖关系，该项目所依赖的其他库，如果有多个需要填写多个s.dependency\n\nend\n```\n\n这个 Pod 已经是一个本地的 Git 仓库，接着我们需要把本地仓库和远程仓库关联起来，先在 Gitlab 上创建一个相应的组件仓库：https://gitlab.com/MZLApp/MZLCategory.git\n\n```\n$ cd MZLCategory\n$ git add .\n$ git commit -s -m \"Initial Commit of Pod Library\"\n$ git remote add origin git@gitlab.com:MZLApp/MZLCategory.git   #关联远端仓库\n$ git push origin master     #提交到远端仓库\n```\n\n创建 tag，这个 tag 需要和 podspec 文件中的 version 一致，不然提交 pod 到 spec repo 的时候就会说找不到此版本，\n\n```\ngit tag -m \"Initial Pod\" 0.1.0\ngit push --tags\n```\n\n## 3. 提交 Pod 到私有 Spec Repo\n\n提交 Pod 到 Spec Repo 就是提交 Pod 的索引文件 podspec，提交之前先验证一下，验证通过后才能提交，执行下面的命令来验证：\n\n```\npod lib lint --allow-warnings\n```\n\n验证成功后会输出：\n\n```\n-> MZLCategory (0.1.0)\nMZLCategory passed validation.\n```\n\n验证成功后，我们就可以提交 podspec 到 Spec Repo 了，执行：\n\n```\npod repo push MZLSpecs MZLCategory.podspec --use-libraries --allow-warnings\n```\n\n提交成功后，就可以在 `~/.cocoapods/repos/MZLSpecs` 目录下看到 MZLCategory 这个 Pod 了，同时 MZLSpecs 的远端仓库中 MZLCategory 这个 pod 的 podspec 也被 push 上去了。\n\n```\nMZLSpecs\n└── MZLCategory\n    └── 0.1.0\n```\n\n## 4. 私有 Pod 库的使用\n\n使用方法同 Github 官方的第三方库，只需要在你的 Podfile 文件中添加你的 Spec Repo 地址作为查找 Pod 库的源地址：\n\n```\nsource 'https://github.com/CocoaPods/Specs.git'\nsource 'https://gitlab.com/MZLApp/MZLSpecs.git'\n\nuse_frameworks!\ninhibit_all_warnings!\n\nplatform :ios, '8.0'\n\ntarget 'SinaNews' do\n    pod 'AFNetworking', '3.1.0'\n    ... ...\n    pod 'MZLCategory',  '0.1.0'\nend\n```\n\n# 参考\n\n- [CocoaPods官方文档](http://guides.cocoapods.org/making/private-cocoapods.html)\n- [使用Cocoapods创建私有podspec](http://www.cocoachina.com/ios/20150228/11206.html)\n\n\n","slug":"使用CocoaPods创建私有Spec-Repo管理项目公共组件","published":1,"updated":"2017-10-28T03:38:22.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9aztbpj000txox0cqoebj7e","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>项目做多了，你会发现有很多基础功能模块是可以通用的，完全可以独立出来抽象成一个公用库，方便以后开发新项目的时候可以直接使用这些基础组件，不需要再重新开发，提高开发效率。同时，随着项目和业务的发展，工程量越来越大，业务模块越来越多，我们采用组件化的方式来开发，组件化就需要每个业务模块独立开发，方便迭代和代码管理。不管是通用的基础服务组件，还是独立的业务功能组件，都需要我们来进行组件管理。</p>\n<p>CocoaPods 是非常好用的一个iOS依赖管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库，以及管理自己的项目中的私有组件库。</p>\n<a id=\"more\"></a>\n<h1 id=\"CocoaPods-管理私有组件\"><a href=\"#CocoaPods-管理私有组件\" class=\"headerlink\" title=\"CocoaPods 管理私有组件\"></a>CocoaPods 管理私有组件</h1><p>我们通过 CocoaPods 来使用和管理项目中的第三方库非常方便也非常简单，下面我们来学习下如何创建自己的私有的组件仓库，管理私有组件。</p>\n<h2 id=\"1-创建私有-Spec-Repo\"><a href=\"#1-创建私有-Spec-Repo\" class=\"headerlink\" title=\"1.创建私有 Spec Repo\"></a>1.创建私有 Spec Repo</h2><p>Spec Repo 是一个存放了所有 Pods 的索引文件 podspec 的仓库，集成的时候就是通过仓库里的 Pod 所对应的索引文件来找到对应的源码或者 framework的，当你使用 CocoaPods 后他会被 clone 到本地的 <code>~/.cocoapods/repos</code> 目录下，Github 官方的 Spec Repo 叫 master，我们可以到这个目录下查看 master 下的结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── Specs</div><div class=\"line\">    └── [SPEC_NAME]</div><div class=\"line\">        └── [VERSION]</div><div class=\"line\">            └── [SPEC_NAME].podspec</div></pre></td></tr></table></figure>\n<p>我们要存放私有的组件，当然不能用官方的 Repo 库了，所以我们要创建一个私有的 Spec Repo 库，首先我们先在 Gitlab 或者其他 Git 服务中创建一个仓库，例如我这里创建的一个仓库地址：<a href=\"https://gitlab.com/MZLApp/MZLSpecs.git\" target=\"_blank\" rel=\"external\">https://gitlab.com/MZLApp/MZLSpecs.git</a> 。            </p>\n<p>仓库创建好之后，执行下面的命令来把这个仓库作为一个 Pod 索引仓库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># pod repo add [Private Repo Name] [GitHub HTTPS clone URL]</div><div class=\"line\">$ pod repo add MZLSpecs https://gitlab.com/MZLApp/MZLSpecs.git</div></pre></td></tr></table></figure>\n<p>执行成功后，进入到 <code>~/.cocoapods/repos</code> 目录，就可以看到我们刚创建的 MZLSpecs 这个目录了，此时创建私有 Spec Repo 就完成了。</p>\n<h2 id=\"2-创建-Pod-组件库\"><a href=\"#2-创建-Pod-组件库\" class=\"headerlink\" title=\"2. 创建 Pod 组件库\"></a>2. 创建 Pod 组件库</h2><p><a href=\"http://guides.cocoapods.org/making/using-pod-lib-create\" target=\"_blank\" rel=\"external\">CocoaPods</a>提供了命令 <code>pod lib create xxx</code> 可以给我们很方便的创建一个 Pod，例如，创建一个 ObjC 常用的 Category 分类的公用组件库，执行下面的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod lib create MZLCategory</div></pre></td></tr></table></figure>\n<p>这里会询问几个问题，1.你的仓库是用什么语言（Swift/ObjC）；2.是否要帮你创建一个 Demo 工程；3.你是否需要一个测试框架（Specta/Kiwi/None）；4.你是否需要基于 View 测试；5.你的 Pod 库里类的前缀。按你的具体情况做出选择：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cloning `https://github.com/CocoaPods/pod-template.git` into `MZLCategory`.</div><div class=\"line\">Configuring MZLCategory template.</div><div class=\"line\"></div><div class=\"line\">------------------------------</div><div class=\"line\"></div><div class=\"line\">To get you started we need to ask a few questions, this should only take a minute.</div><div class=\"line\"></div><div class=\"line\">If this is your first time we recommend running through with the guide:</div><div class=\"line\"> - http://guides.cocoapods.org/making/using-pod-lib-create.html</div><div class=\"line\"> ( hold cmd and click links to open in a browser. )</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">What language do you want to use?? [ Swift / ObjC ]</div><div class=\"line\"> &gt; ObjC</div><div class=\"line\"></div><div class=\"line\">Would you like to include a demo application with your library? [ Yes / No ]</div><div class=\"line\"> &gt; Yes</div><div class=\"line\"></div><div class=\"line\">Which testing frameworks will you use? [ Specta / Kiwi / None ]</div><div class=\"line\"> &gt; None</div><div class=\"line\"></div><div class=\"line\">Would you like to do view based testing? [ Yes / No ]</div><div class=\"line\"> &gt; No</div><div class=\"line\"></div><div class=\"line\">What is your class prefix?</div><div class=\"line\"> &gt; MZL</div></pre></td></tr></table></figure>\n<p>问题选择完成后，如果你选择了帮你创建 Demo 的话，CocoaPods 会自动帮你执行 <code>pod install</code> 来生成 workspace 文件，完成后并自动在 Xcode 中打开：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">Running pod install on your new library.</div><div class=\"line\"></div><div class=\"line\">Analyzing dependencies</div><div class=\"line\">Fetching podspec for `MZLCategory` from `../`</div><div class=\"line\">Downloading dependencies</div><div class=\"line\">Installing MZLCategory (0.1.0)</div><div class=\"line\">Generating Pods project</div><div class=\"line\">Integrating client project</div><div class=\"line\"></div><div class=\"line\">[!] Please close any current Xcode sessions and use `MZLCategory.xcworkspace` for this project from now on.</div><div class=\"line\">Sending stats</div><div class=\"line\">Pod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.</div><div class=\"line\"></div><div class=\"line\">[!] Automatically assigning platform ios with version 8.3 on target MZLCategory_Example because no platform was specified. Please specify a platform for this target in your Podfile. See `https://guides.cocoapods.org/syntax/podfile.html#platform`.</div><div class=\"line\"></div><div class=\"line\"> Ace! you&apos;re ready to go!</div><div class=\"line\"> We will start you off by opening your project in Xcode</div><div class=\"line\">  open &apos;MZLCategory/Example/MZLCategory.xcworkspace&apos;</div><div class=\"line\"></div><div class=\"line\">To learn more about the template see `https://github.com/CocoaPods/pod-template.git`.</div><div class=\"line\">To learn more about creating a new pod, see `http://guides.cocoapods.org/making/making-a-cocoapod`.</div></pre></td></tr></table></figure>\n<p>这样，一个 Pod 就创建好了，我们来看这个 Pod 的结构以及相关介绍如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">MZLCategory</div><div class=\"line\">├── Example                     # Demo</div><div class=\"line\">│   ├── MZLCategory</div><div class=\"line\">│   ├── MZLCategory.xcodeproj</div><div class=\"line\">│   ├── MZLCategory.xcworkspace</div><div class=\"line\">│   ├── Podfile</div><div class=\"line\">│   ├── Podfile.lock</div><div class=\"line\">│   ├── Pods</div><div class=\"line\">│   └── Tests</div><div class=\"line\">├── LICENSE</div><div class=\"line\">├── MZLCategory                 # Pod 组件</div><div class=\"line\">│   ├── Assets                  # Pod 中的资源文件目录</div><div class=\"line\">│   └── Classes                 # Pod 中的类文件目录   </div><div class=\"line\">├── MZLCategory.podspec         # Pod 索引文件</div><div class=\"line\">├── README.md</div><div class=\"line\">└── _Pods.xcodeproj -&gt; Example/Pods/Pods.xcodeproj</div></pre></td></tr></table></figure>\n<p>第一次提交，我们先配置好 podspec 文件，修改 summary、description、homepage、source 等配置，更多 podspec 的介绍在<a href=\"http://guides.cocoapods.org/making/specs-and-specs-repo.html\" target=\"_blank\" rel=\"external\">这里</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pod::Spec.new do |s|</div><div class=\"line\">  s.name             = &apos;MZLCategory&apos;</div><div class=\"line\">  s.version          = &apos;0.1.0&apos;</div><div class=\"line\">  s.summary          = &apos;公用组件库：ObjC 的常用 Category 库&apos;</div><div class=\"line\"></div><div class=\"line\"># This description is used to generate tags and improve search results.</div><div class=\"line\">#   * Think: What does it do? Why did you write it? What is the focus?</div><div class=\"line\">#   * Try to keep it short, snappy and to the point.</div><div class=\"line\">#   * Write the description between the DESC delimiters below.</div><div class=\"line\">#   * Finally, don&apos;t worry about the indent, CocoaPods strips it!</div><div class=\"line\"></div><div class=\"line\">  s.description      = &lt;&lt;-DESC</div><div class=\"line\">公用组件库：ObjC 的常用 Category 库，包括 NSString，UIImage 等常用的类的分类</div><div class=\"line\">                       DESC</div><div class=\"line\"></div><div class=\"line\">  s.homepage         = &apos;https://gitlab.com/MZLApp/MZLCategory&apos;</div><div class=\"line\">  # s.screenshots     = &apos;www.example.com/screenshots_1&apos;, &apos;www.example.com/screenshots_2&apos;</div><div class=\"line\">  s.license          = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; &#125;</div><div class=\"line\">  s.author           = &#123; &apos;lijin&apos; =&gt; &apos;mlijin9011@163.com&apos; &#125;</div><div class=\"line\">  s.source           = &#123; :git =&gt; &apos;https://gitlab.com/MZLApp/MZLCategory.git&apos;, :tag =&gt; s.version.to_s &#125;</div><div class=\"line\">  # s.social_media_url = &apos;https://twitter.com/&lt;TWITTER_USERNAME&gt;&apos;</div><div class=\"line\"></div><div class=\"line\">  s.ios.deployment_target = &apos;8.0&apos;</div><div class=\"line\"></div><div class=\"line\">  s.source_files = &apos;MZLCategory/Classes/**/*&apos;        #代码源文件地址，**/*表示Classes目录及其子目录下所有文件，如果有多个目录下则用逗号分开，如果需要在项目中分组显示，这里也要做相应的设置</div><div class=\"line\">  </div><div class=\"line\">  # s.resource_bundles = &#123;</div><div class=\"line\">  #   &apos;MZLCategory&apos; =&gt; [&apos;MZLCategory/Assets/*.png&apos;]  #资源文件地址</div><div class=\"line\">  # &#125;</div><div class=\"line\"></div><div class=\"line\">  # s.public_header_files = &apos;Pod/Classes/**/*.h&apos;     #公开头文件地址</div><div class=\"line\">  # s.frameworks = &apos;UIKit&apos;, &apos;MapKit&apos;                 #所需的framework，多个用逗号隔开</div><div class=\"line\">  # s.dependency &apos;AFNetworking&apos;, &apos;~&gt; 2.3&apos;              #依赖关系，该项目所依赖的其他库，如果有多个需要填写多个s.dependency</div><div class=\"line\"></div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>这个 Pod 已经是一个本地的 Git 仓库，接着我们需要把本地仓库和远程仓库关联起来，先在 Gitlab 上创建一个相应的组件仓库：<a href=\"https://gitlab.com/MZLApp/MZLCategory.git\" target=\"_blank\" rel=\"external\">https://gitlab.com/MZLApp/MZLCategory.git</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd MZLCategory</div><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -s -m &quot;Initial Commit of Pod Library&quot;</div><div class=\"line\">$ git remote add origin git@gitlab.com:MZLApp/MZLCategory.git   #关联远端仓库</div><div class=\"line\">$ git push origin master     #提交到远端仓库</div></pre></td></tr></table></figure>\n<p>创建 tag，这个 tag 需要和 podspec 文件中的 version 一致，不然提交 pod 到 spec repo 的时候就会说找不到此版本，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag -m &quot;Initial Pod&quot; 0.1.0</div><div class=\"line\">git push --tags</div></pre></td></tr></table></figure>\n<h2 id=\"3-提交-Pod-到私有-Spec-Repo\"><a href=\"#3-提交-Pod-到私有-Spec-Repo\" class=\"headerlink\" title=\"3. 提交 Pod 到私有 Spec Repo\"></a>3. 提交 Pod 到私有 Spec Repo</h2><p>提交 Pod 到 Spec Repo 就是提交 Pod 的索引文件 podspec，提交之前先验证一下，验证通过后才能提交，执行下面的命令来验证：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod lib lint --allow-warnings</div></pre></td></tr></table></figure>\n<p>验证成功后会输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-&gt; MZLCategory (0.1.0)</div><div class=\"line\">MZLCategory passed validation.</div></pre></td></tr></table></figure>\n<p>验证成功后，我们就可以提交 podspec 到 Spec Repo 了，执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod repo push MZLSpecs MZLCategory.podspec --use-libraries --allow-warnings</div></pre></td></tr></table></figure>\n<p>提交成功后，就可以在 <code>~/.cocoapods/repos/MZLSpecs</code> 目录下看到 MZLCategory 这个 Pod 了，同时 MZLSpecs 的远端仓库中 MZLCategory 这个 pod 的 podspec 也被 push 上去了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MZLSpecs</div><div class=\"line\">└── MZLCategory</div><div class=\"line\">    └── 0.1.0</div></pre></td></tr></table></figure>\n<h2 id=\"4-私有-Pod-库的使用\"><a href=\"#4-私有-Pod-库的使用\" class=\"headerlink\" title=\"4. 私有 Pod 库的使用\"></a>4. 私有 Pod 库的使用</h2><p>使用方法同 Github 官方的第三方库，只需要在你的 Podfile 文件中添加你的 Spec Repo 地址作为查找 Pod 库的源地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">source &apos;https://github.com/CocoaPods/Specs.git&apos;</div><div class=\"line\">source &apos;https://gitlab.com/MZLApp/MZLSpecs.git&apos;</div><div class=\"line\"></div><div class=\"line\">use_frameworks!</div><div class=\"line\">inhibit_all_warnings!</div><div class=\"line\"></div><div class=\"line\">platform :ios, &apos;8.0&apos;</div><div class=\"line\"></div><div class=\"line\">target &apos;SinaNews&apos; do</div><div class=\"line\">    pod &apos;AFNetworking&apos;, &apos;3.1.0&apos;</div><div class=\"line\">    ... ...</div><div class=\"line\">    pod &apos;MZLCategory&apos;,  &apos;0.1.0&apos;</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://guides.cocoapods.org/making/private-cocoapods.html\" target=\"_blank\" rel=\"external\">CocoaPods官方文档</a></li>\n<li><a href=\"http://www.cocoachina.com/ios/20150228/11206.html\" target=\"_blank\" rel=\"external\">使用Cocoapods创建私有podspec</a></li>\n</ul>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>项目做多了，你会发现有很多基础功能模块是可以通用的，完全可以独立出来抽象成一个公用库，方便以后开发新项目的时候可以直接使用这些基础组件，不需要再重新开发，提高开发效率。同时，随着项目和业务的发展，工程量越来越大，业务模块越来越多，我们采用组件化的方式来开发，组件化就需要每个业务模块独立开发，方便迭代和代码管理。不管是通用的基础服务组件，还是独立的业务功能组件，都需要我们来进行组件管理。</p>\n<p>CocoaPods 是非常好用的一个iOS依赖管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库，以及管理自己的项目中的私有组件库。</p>","more":"<h1 id=\"CocoaPods-管理私有组件\"><a href=\"#CocoaPods-管理私有组件\" class=\"headerlink\" title=\"CocoaPods 管理私有组件\"></a>CocoaPods 管理私有组件</h1><p>我们通过 CocoaPods 来使用和管理项目中的第三方库非常方便也非常简单，下面我们来学习下如何创建自己的私有的组件仓库，管理私有组件。</p>\n<h2 id=\"1-创建私有-Spec-Repo\"><a href=\"#1-创建私有-Spec-Repo\" class=\"headerlink\" title=\"1.创建私有 Spec Repo\"></a>1.创建私有 Spec Repo</h2><p>Spec Repo 是一个存放了所有 Pods 的索引文件 podspec 的仓库，集成的时候就是通过仓库里的 Pod 所对应的索引文件来找到对应的源码或者 framework的，当你使用 CocoaPods 后他会被 clone 到本地的 <code>~/.cocoapods/repos</code> 目录下，Github 官方的 Spec Repo 叫 master，我们可以到这个目录下查看 master 下的结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── Specs</div><div class=\"line\">    └── [SPEC_NAME]</div><div class=\"line\">        └── [VERSION]</div><div class=\"line\">            └── [SPEC_NAME].podspec</div></pre></td></tr></table></figure>\n<p>我们要存放私有的组件，当然不能用官方的 Repo 库了，所以我们要创建一个私有的 Spec Repo 库，首先我们先在 Gitlab 或者其他 Git 服务中创建一个仓库，例如我这里创建的一个仓库地址：<a href=\"https://gitlab.com/MZLApp/MZLSpecs.git\">https://gitlab.com/MZLApp/MZLSpecs.git</a> 。            </p>\n<p>仓库创建好之后，执行下面的命令来把这个仓库作为一个 Pod 索引仓库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># pod repo add [Private Repo Name] [GitHub HTTPS clone URL]</div><div class=\"line\">$ pod repo add MZLSpecs https://gitlab.com/MZLApp/MZLSpecs.git</div></pre></td></tr></table></figure>\n<p>执行成功后，进入到 <code>~/.cocoapods/repos</code> 目录，就可以看到我们刚创建的 MZLSpecs 这个目录了，此时创建私有 Spec Repo 就完成了。</p>\n<h2 id=\"2-创建-Pod-组件库\"><a href=\"#2-创建-Pod-组件库\" class=\"headerlink\" title=\"2. 创建 Pod 组件库\"></a>2. 创建 Pod 组件库</h2><p><a href=\"http://guides.cocoapods.org/making/using-pod-lib-create\">CocoaPods</a>提供了命令 <code>pod lib create xxx</code> 可以给我们很方便的创建一个 Pod，例如，创建一个 ObjC 常用的 Category 分类的公用组件库，执行下面的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod lib create MZLCategory</div></pre></td></tr></table></figure>\n<p>这里会询问几个问题，1.你的仓库是用什么语言（Swift/ObjC）；2.是否要帮你创建一个 Demo 工程；3.你是否需要一个测试框架（Specta/Kiwi/None）；4.你是否需要基于 View 测试；5.你的 Pod 库里类的前缀。按你的具体情况做出选择：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cloning `https://github.com/CocoaPods/pod-template.git` into `MZLCategory`.</div><div class=\"line\">Configuring MZLCategory template.</div><div class=\"line\"></div><div class=\"line\">------------------------------</div><div class=\"line\"></div><div class=\"line\">To get you started we need to ask a few questions, this should only take a minute.</div><div class=\"line\"></div><div class=\"line\">If this is your first time we recommend running through with the guide:</div><div class=\"line\"> - http://guides.cocoapods.org/making/using-pod-lib-create.html</div><div class=\"line\"> ( hold cmd and click links to open in a browser. )</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">What language do you want to use?? [ Swift / ObjC ]</div><div class=\"line\"> &gt; ObjC</div><div class=\"line\"></div><div class=\"line\">Would you like to include a demo application with your library? [ Yes / No ]</div><div class=\"line\"> &gt; Yes</div><div class=\"line\"></div><div class=\"line\">Which testing frameworks will you use? [ Specta / Kiwi / None ]</div><div class=\"line\"> &gt; None</div><div class=\"line\"></div><div class=\"line\">Would you like to do view based testing? [ Yes / No ]</div><div class=\"line\"> &gt; No</div><div class=\"line\"></div><div class=\"line\">What is your class prefix?</div><div class=\"line\"> &gt; MZL</div></pre></td></tr></table></figure>\n<p>问题选择完成后，如果你选择了帮你创建 Demo 的话，CocoaPods 会自动帮你执行 <code>pod install</code> 来生成 workspace 文件，完成后并自动在 Xcode 中打开：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">Running pod install on your new library.</div><div class=\"line\"></div><div class=\"line\">Analyzing dependencies</div><div class=\"line\">Fetching podspec for `MZLCategory` from `../`</div><div class=\"line\">Downloading dependencies</div><div class=\"line\">Installing MZLCategory (0.1.0)</div><div class=\"line\">Generating Pods project</div><div class=\"line\">Integrating client project</div><div class=\"line\"></div><div class=\"line\">[!] Please close any current Xcode sessions and use `MZLCategory.xcworkspace` for this project from now on.</div><div class=\"line\">Sending stats</div><div class=\"line\">Pod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.</div><div class=\"line\"></div><div class=\"line\">[!] Automatically assigning platform ios with version 8.3 on target MZLCategory_Example because no platform was specified. Please specify a platform for this target in your Podfile. See `https://guides.cocoapods.org/syntax/podfile.html#platform`.</div><div class=\"line\"></div><div class=\"line\"> Ace! you&apos;re ready to go!</div><div class=\"line\"> We will start you off by opening your project in Xcode</div><div class=\"line\">  open &apos;MZLCategory/Example/MZLCategory.xcworkspace&apos;</div><div class=\"line\"></div><div class=\"line\">To learn more about the template see `https://github.com/CocoaPods/pod-template.git`.</div><div class=\"line\">To learn more about creating a new pod, see `http://guides.cocoapods.org/making/making-a-cocoapod`.</div></pre></td></tr></table></figure>\n<p>这样，一个 Pod 就创建好了，我们来看这个 Pod 的结构以及相关介绍如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">MZLCategory</div><div class=\"line\">├── Example                     # Demo</div><div class=\"line\">│   ├── MZLCategory</div><div class=\"line\">│   ├── MZLCategory.xcodeproj</div><div class=\"line\">│   ├── MZLCategory.xcworkspace</div><div class=\"line\">│   ├── Podfile</div><div class=\"line\">│   ├── Podfile.lock</div><div class=\"line\">│   ├── Pods</div><div class=\"line\">│   └── Tests</div><div class=\"line\">├── LICENSE</div><div class=\"line\">├── MZLCategory                 # Pod 组件</div><div class=\"line\">│   ├── Assets                  # Pod 中的资源文件目录</div><div class=\"line\">│   └── Classes                 # Pod 中的类文件目录   </div><div class=\"line\">├── MZLCategory.podspec         # Pod 索引文件</div><div class=\"line\">├── README.md</div><div class=\"line\">└── _Pods.xcodeproj -&gt; Example/Pods/Pods.xcodeproj</div></pre></td></tr></table></figure>\n<p>第一次提交，我们先配置好 podspec 文件，修改 summary、description、homepage、source 等配置，更多 podspec 的介绍在<a href=\"http://guides.cocoapods.org/making/specs-and-specs-repo.html\">这里</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pod::Spec.new do |s|</div><div class=\"line\">  s.name             = &apos;MZLCategory&apos;</div><div class=\"line\">  s.version          = &apos;0.1.0&apos;</div><div class=\"line\">  s.summary          = &apos;公用组件库：ObjC 的常用 Category 库&apos;</div><div class=\"line\"></div><div class=\"line\"># This description is used to generate tags and improve search results.</div><div class=\"line\">#   * Think: What does it do? Why did you write it? What is the focus?</div><div class=\"line\">#   * Try to keep it short, snappy and to the point.</div><div class=\"line\">#   * Write the description between the DESC delimiters below.</div><div class=\"line\">#   * Finally, don&apos;t worry about the indent, CocoaPods strips it!</div><div class=\"line\"></div><div class=\"line\">  s.description      = &lt;&lt;-DESC</div><div class=\"line\">公用组件库：ObjC 的常用 Category 库，包括 NSString，UIImage 等常用的类的分类</div><div class=\"line\">                       DESC</div><div class=\"line\"></div><div class=\"line\">  s.homepage         = &apos;https://gitlab.com/MZLApp/MZLCategory&apos;</div><div class=\"line\">  # s.screenshots     = &apos;www.example.com/screenshots_1&apos;, &apos;www.example.com/screenshots_2&apos;</div><div class=\"line\">  s.license          = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; &#125;</div><div class=\"line\">  s.author           = &#123; &apos;lijin&apos; =&gt; &apos;mlijin9011@163.com&apos; &#125;</div><div class=\"line\">  s.source           = &#123; :git =&gt; &apos;https://gitlab.com/MZLApp/MZLCategory.git&apos;, :tag =&gt; s.version.to_s &#125;</div><div class=\"line\">  # s.social_media_url = &apos;https://twitter.com/&lt;TWITTER_USERNAME&gt;&apos;</div><div class=\"line\"></div><div class=\"line\">  s.ios.deployment_target = &apos;8.0&apos;</div><div class=\"line\"></div><div class=\"line\">  s.source_files = &apos;MZLCategory/Classes/**/*&apos;        #代码源文件地址，**/*表示Classes目录及其子目录下所有文件，如果有多个目录下则用逗号分开，如果需要在项目中分组显示，这里也要做相应的设置</div><div class=\"line\">  </div><div class=\"line\">  # s.resource_bundles = &#123;</div><div class=\"line\">  #   &apos;MZLCategory&apos; =&gt; [&apos;MZLCategory/Assets/*.png&apos;]  #资源文件地址</div><div class=\"line\">  # &#125;</div><div class=\"line\"></div><div class=\"line\">  # s.public_header_files = &apos;Pod/Classes/**/*.h&apos;     #公开头文件地址</div><div class=\"line\">  # s.frameworks = &apos;UIKit&apos;, &apos;MapKit&apos;                 #所需的framework，多个用逗号隔开</div><div class=\"line\">  # s.dependency &apos;AFNetworking&apos;, &apos;~&gt; 2.3&apos;              #依赖关系，该项目所依赖的其他库，如果有多个需要填写多个s.dependency</div><div class=\"line\"></div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>这个 Pod 已经是一个本地的 Git 仓库，接着我们需要把本地仓库和远程仓库关联起来，先在 Gitlab 上创建一个相应的组件仓库：<a href=\"https://gitlab.com/MZLApp/MZLCategory.git\">https://gitlab.com/MZLApp/MZLCategory.git</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd MZLCategory</div><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -s -m &quot;Initial Commit of Pod Library&quot;</div><div class=\"line\">$ git remote add origin git@gitlab.com:MZLApp/MZLCategory.git   #关联远端仓库</div><div class=\"line\">$ git push origin master     #提交到远端仓库</div></pre></td></tr></table></figure>\n<p>创建 tag，这个 tag 需要和 podspec 文件中的 version 一致，不然提交 pod 到 spec repo 的时候就会说找不到此版本，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag -m &quot;Initial Pod&quot; 0.1.0</div><div class=\"line\">git push --tags</div></pre></td></tr></table></figure>\n<h2 id=\"3-提交-Pod-到私有-Spec-Repo\"><a href=\"#3-提交-Pod-到私有-Spec-Repo\" class=\"headerlink\" title=\"3. 提交 Pod 到私有 Spec Repo\"></a>3. 提交 Pod 到私有 Spec Repo</h2><p>提交 Pod 到 Spec Repo 就是提交 Pod 的索引文件 podspec，提交之前先验证一下，验证通过后才能提交，执行下面的命令来验证：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod lib lint --allow-warnings</div></pre></td></tr></table></figure>\n<p>验证成功后会输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-&gt; MZLCategory (0.1.0)</div><div class=\"line\">MZLCategory passed validation.</div></pre></td></tr></table></figure>\n<p>验证成功后，我们就可以提交 podspec 到 Spec Repo 了，执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod repo push MZLSpecs MZLCategory.podspec --use-libraries --allow-warnings</div></pre></td></tr></table></figure>\n<p>提交成功后，就可以在 <code>~/.cocoapods/repos/MZLSpecs</code> 目录下看到 MZLCategory 这个 Pod 了，同时 MZLSpecs 的远端仓库中 MZLCategory 这个 pod 的 podspec 也被 push 上去了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MZLSpecs</div><div class=\"line\">└── MZLCategory</div><div class=\"line\">    └── 0.1.0</div></pre></td></tr></table></figure>\n<h2 id=\"4-私有-Pod-库的使用\"><a href=\"#4-私有-Pod-库的使用\" class=\"headerlink\" title=\"4. 私有 Pod 库的使用\"></a>4. 私有 Pod 库的使用</h2><p>使用方法同 Github 官方的第三方库，只需要在你的 Podfile 文件中添加你的 Spec Repo 地址作为查找 Pod 库的源地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">source &apos;https://github.com/CocoaPods/Specs.git&apos;</div><div class=\"line\">source &apos;https://gitlab.com/MZLApp/MZLSpecs.git&apos;</div><div class=\"line\"></div><div class=\"line\">use_frameworks!</div><div class=\"line\">inhibit_all_warnings!</div><div class=\"line\"></div><div class=\"line\">platform :ios, &apos;8.0&apos;</div><div class=\"line\"></div><div class=\"line\">target &apos;SinaNews&apos; do</div><div class=\"line\">    pod &apos;AFNetworking&apos;, &apos;3.1.0&apos;</div><div class=\"line\">    ... ...</div><div class=\"line\">    pod &apos;MZLCategory&apos;,  &apos;0.1.0&apos;</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://guides.cocoapods.org/making/private-cocoapods.html\">CocoaPods官方文档</a></li>\n<li><a href=\"http://www.cocoachina.com/ios/20150228/11206.html\">使用Cocoapods创建私有podspec</a></li>\n</ul>"},{"title":"几种排序算法","date":"2016-07-08T09:41:05.000Z","_content":"\n# 前言\n\n基础知识整理，十大排序算法总结：\n\n查找和排序算法是算法的入门知识，其经典思想可以用于很多算法当中。学习算法首先要熟悉其思想，实际中加以灵活应用。\n常见的排序算法有，快速排序、归并排序、插入排序、冒泡排序、堆排序、基数排序、桶排序等。\n\n接下来我们就分析一下常见的排序算法及其使用场景。\n\n<!--more-->\n\n# 冒泡排序\n\n\n\n","source":"_posts/几种排序算法.md","raw":"---\ntitle: 几种排序算法\ndate: 2016-07-08 17:41:05\ncategories:\n- 技术\ntags:\n- 算法\n---\n\n# 前言\n\n基础知识整理，十大排序算法总结：\n\n查找和排序算法是算法的入门知识，其经典思想可以用于很多算法当中。学习算法首先要熟悉其思想，实际中加以灵活应用。\n常见的排序算法有，快速排序、归并排序、插入排序、冒泡排序、堆排序、基数排序、桶排序等。\n\n接下来我们就分析一下常见的排序算法及其使用场景。\n\n<!--more-->\n\n# 冒泡排序\n\n\n\n","slug":"几种排序算法","published":1,"updated":"2017-10-28T03:38:22.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9aztbpl000wxox09gbwyuop","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>基础知识整理，十大排序算法总结：</p>\n<p>查找和排序算法是算法的入门知识，其经典思想可以用于很多算法当中。学习算法首先要熟悉其思想，实际中加以灵活应用。<br>常见的排序算法有，快速排序、归并排序、插入排序、冒泡排序、堆排序、基数排序、桶排序等。</p>\n<p>接下来我们就分析一下常见的排序算法及其使用场景。</p>\n<a id=\"more\"></a>\n<h1 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h1>","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>基础知识整理，十大排序算法总结：</p>\n<p>查找和排序算法是算法的入门知识，其经典思想可以用于很多算法当中。学习算法首先要熟悉其思想，实际中加以灵活应用。<br>常见的排序算法有，快速排序、归并排序、插入排序、冒泡排序、堆排序、基数排序、桶排序等。</p>\n<p>接下来我们就分析一下常见的排序算法及其使用场景。</p>","more":"<h1 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h1>"},{"title":"成都游记","date":"2016-10-10T06:35:24.000Z","_content":"\n很多人都说，成都是那个你来了就不想离开的地方！有人留恋的是麻辣鲜香的美食，有人留恋的是独特魅力的景色，有人留恋的是那些漂亮水灵的姑娘……\n\n这次十一借着回家的名义去成都游玩了几天，实在是人很多啊，但也抵挡不了成都的美！\n\n<!--more-->\n\n首先是成都的火车站，跟北京的火车站比起来是小了点。一出车站就体验到了大四川的人真的是多啊，正好还赶上十一。\n\n![image](成都游记/1.1.JPG)\n![image](成都游记/1.2.JPG)\n\n提前在去哪儿网定了速8酒店春熙路店，满怀希望的去了一看，真的是破破烂烂，窗户都关不上，囧。\n\n酒店安顿好之后开始了第一站的行程——宽窄巷子。依旧是那么多人，宽窄巷子是宽巷子、窄巷子和井巷子三条平行排列的老式街道及其之间的四合院落群组成，井巷子比较多小吃。\n\n![image](成都游记/2.1.JPG)\n![image](成都游记/2.2.JPG)\n![image](成都游记/2.3.JPG)\n![image](成都游记/2.4.JPG)\n![image](成都游记/2.5.JPG)\n![image](成都游记/2.6.JPG)\n![image](成都游记/2.7.JPG)\n![image](成都游记/2.8.JPG)\n![image](成都游记/2.9.JPG)\n\n吃饱喝足了之后接着第二站——杜甫草堂，是杜甫流寓成都时的故居。\n\n![image](成都游记/3.1.JPG)\n![image](成都游记/3.2.JPG)\n![image](成都游记/3.3.JPG)\n![image](成都游记/3.4.JPG)\n![image](成都游记/3.5.JPG)\n![image](成都游记/3.6.JPG)\n\n接下来去了大熊猫养育基地，不得不说，国宝就是可爱啊！\n\n![image](成都游记/4.1.JPG)\n![image](成都游记/4.2.JPG)\n![image](成都游记/4.3.JPG)\n![image](成都游记/4.4.JPG)\n![image](成都游记/4.5.JPG)\n\n接下来是美丽的都江堰，本人比较喜欢这种山清水秀的地方\n\n![image](成都游记/5.1.JPG)\n![image](成都游记/5.2.JPG)\n![image](成都游记/5.3.JPG)\n![image](成都游记/5.4.JPG)\n![image](成都游记/5.5.JPG)\n![image](成都游记/5.6.JPG)\n![image](成都游记/5.7.JPG)\n![image](成都游记/5.8.JPG)\n![image](成都游记/5.9.JPG)\n![image](成都游记/5.10.JPG)\n\n看了这些照片，是不是有点想去呢，😝\n\n假期结束了，开始上班吧，😒\n\n此文同时收录于我的公众号（小乱谈），[成都游记](https://mp.weixin.qq.com/s?__biz=MzI2NTQ4MTkwNg==&mid=2247483777&idx=1&sn=67a4fa65e9f1b0a032452ac329d604d9&chksm=ea9dfa5cddea734ac9727d182a3970b3230f0ffe151bb2c99720f92ec60f85c4e2abd20f1045#rd)\n\n\n","source":"_posts/成都游记.md","raw":"---\ntitle: 成都游记\ndate: 2016-10-10 14:35:24\ncategories:\n- 游记\ntags:\n- 成都\n- 都江堰\n---\n\n很多人都说，成都是那个你来了就不想离开的地方！有人留恋的是麻辣鲜香的美食，有人留恋的是独特魅力的景色，有人留恋的是那些漂亮水灵的姑娘……\n\n这次十一借着回家的名义去成都游玩了几天，实在是人很多啊，但也抵挡不了成都的美！\n\n<!--more-->\n\n首先是成都的火车站，跟北京的火车站比起来是小了点。一出车站就体验到了大四川的人真的是多啊，正好还赶上十一。\n\n![image](成都游记/1.1.JPG)\n![image](成都游记/1.2.JPG)\n\n提前在去哪儿网定了速8酒店春熙路店，满怀希望的去了一看，真的是破破烂烂，窗户都关不上，囧。\n\n酒店安顿好之后开始了第一站的行程——宽窄巷子。依旧是那么多人，宽窄巷子是宽巷子、窄巷子和井巷子三条平行排列的老式街道及其之间的四合院落群组成，井巷子比较多小吃。\n\n![image](成都游记/2.1.JPG)\n![image](成都游记/2.2.JPG)\n![image](成都游记/2.3.JPG)\n![image](成都游记/2.4.JPG)\n![image](成都游记/2.5.JPG)\n![image](成都游记/2.6.JPG)\n![image](成都游记/2.7.JPG)\n![image](成都游记/2.8.JPG)\n![image](成都游记/2.9.JPG)\n\n吃饱喝足了之后接着第二站——杜甫草堂，是杜甫流寓成都时的故居。\n\n![image](成都游记/3.1.JPG)\n![image](成都游记/3.2.JPG)\n![image](成都游记/3.3.JPG)\n![image](成都游记/3.4.JPG)\n![image](成都游记/3.5.JPG)\n![image](成都游记/3.6.JPG)\n\n接下来去了大熊猫养育基地，不得不说，国宝就是可爱啊！\n\n![image](成都游记/4.1.JPG)\n![image](成都游记/4.2.JPG)\n![image](成都游记/4.3.JPG)\n![image](成都游记/4.4.JPG)\n![image](成都游记/4.5.JPG)\n\n接下来是美丽的都江堰，本人比较喜欢这种山清水秀的地方\n\n![image](成都游记/5.1.JPG)\n![image](成都游记/5.2.JPG)\n![image](成都游记/5.3.JPG)\n![image](成都游记/5.4.JPG)\n![image](成都游记/5.5.JPG)\n![image](成都游记/5.6.JPG)\n![image](成都游记/5.7.JPG)\n![image](成都游记/5.8.JPG)\n![image](成都游记/5.9.JPG)\n![image](成都游记/5.10.JPG)\n\n看了这些照片，是不是有点想去呢，😝\n\n假期结束了，开始上班吧，😒\n\n此文同时收录于我的公众号（小乱谈），[成都游记](https://mp.weixin.qq.com/s?__biz=MzI2NTQ4MTkwNg==&mid=2247483777&idx=1&sn=67a4fa65e9f1b0a032452ac329d604d9&chksm=ea9dfa5cddea734ac9727d182a3970b3230f0ffe151bb2c99720f92ec60f85c4e2abd20f1045#rd)\n\n\n","slug":"成都游记","published":1,"updated":"2017-10-28T03:38:22.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9aztbpo0010xox0qqzbum31","content":"<p>很多人都说，成都是那个你来了就不想离开的地方！有人留恋的是麻辣鲜香的美食，有人留恋的是独特魅力的景色，有人留恋的是那些漂亮水灵的姑娘……</p>\n<p>这次十一借着回家的名义去成都游玩了几天，实在是人很多啊，但也抵挡不了成都的美！</p>\n<a id=\"more\"></a>\n<p>首先是成都的火车站，跟北京的火车站比起来是小了点。一出车站就体验到了大四川的人真的是多啊，正好还赶上十一。</p>\n<p><img src=\"/2016/10/10/成都游记/1.1.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/1.2.JPG\" alt=\"image\"></p>\n<p>提前在去哪儿网定了速8酒店春熙路店，满怀希望的去了一看，真的是破破烂烂，窗户都关不上，囧。</p>\n<p>酒店安顿好之后开始了第一站的行程——宽窄巷子。依旧是那么多人，宽窄巷子是宽巷子、窄巷子和井巷子三条平行排列的老式街道及其之间的四合院落群组成，井巷子比较多小吃。</p>\n<p><img src=\"/2016/10/10/成都游记/2.1.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.2.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.3.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.4.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.5.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.6.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.7.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.8.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.9.JPG\" alt=\"image\"></p>\n<p>吃饱喝足了之后接着第二站——杜甫草堂，是杜甫流寓成都时的故居。</p>\n<p><img src=\"/2016/10/10/成都游记/3.1.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/3.2.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/3.3.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/3.4.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/3.5.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/3.6.JPG\" alt=\"image\"></p>\n<p>接下来去了大熊猫养育基地，不得不说，国宝就是可爱啊！</p>\n<p><img src=\"/2016/10/10/成都游记/4.1.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/4.2.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/4.3.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/4.4.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/4.5.JPG\" alt=\"image\"></p>\n<p>接下来是美丽的都江堰，本人比较喜欢这种山清水秀的地方</p>\n<p><img src=\"/2016/10/10/成都游记/5.1.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.2.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.3.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.4.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.5.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.6.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.7.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.8.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.9.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.10.JPG\" alt=\"image\"></p>\n<p>看了这些照片，是不是有点想去呢，😝</p>\n<p>假期结束了，开始上班吧，😒</p>\n<p>此文同时收录于我的公众号（小乱谈），<a href=\"https://mp.weixin.qq.com/s?__biz=MzI2NTQ4MTkwNg==&amp;mid=2247483777&amp;idx=1&amp;sn=67a4fa65e9f1b0a032452ac329d604d9&amp;chksm=ea9dfa5cddea734ac9727d182a3970b3230f0ffe151bb2c99720f92ec60f85c4e2abd20f1045#rd\" target=\"_blank\" rel=\"external\">成都游记</a></p>\n","excerpt":"<p>很多人都说，成都是那个你来了就不想离开的地方！有人留恋的是麻辣鲜香的美食，有人留恋的是独特魅力的景色，有人留恋的是那些漂亮水灵的姑娘……</p>\n<p>这次十一借着回家的名义去成都游玩了几天，实在是人很多啊，但也抵挡不了成都的美！</p>","more":"<p>首先是成都的火车站，跟北京的火车站比起来是小了点。一出车站就体验到了大四川的人真的是多啊，正好还赶上十一。</p>\n<p><img src=\"/2016/10/10/成都游记/1.1.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/1.2.JPG\" alt=\"image\"></p>\n<p>提前在去哪儿网定了速8酒店春熙路店，满怀希望的去了一看，真的是破破烂烂，窗户都关不上，囧。</p>\n<p>酒店安顿好之后开始了第一站的行程——宽窄巷子。依旧是那么多人，宽窄巷子是宽巷子、窄巷子和井巷子三条平行排列的老式街道及其之间的四合院落群组成，井巷子比较多小吃。</p>\n<p><img src=\"/2016/10/10/成都游记/2.1.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.2.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.3.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.4.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.5.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.6.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.7.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.8.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/2.9.JPG\" alt=\"image\"></p>\n<p>吃饱喝足了之后接着第二站——杜甫草堂，是杜甫流寓成都时的故居。</p>\n<p><img src=\"/2016/10/10/成都游记/3.1.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/3.2.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/3.3.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/3.4.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/3.5.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/3.6.JPG\" alt=\"image\"></p>\n<p>接下来去了大熊猫养育基地，不得不说，国宝就是可爱啊！</p>\n<p><img src=\"/2016/10/10/成都游记/4.1.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/4.2.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/4.3.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/4.4.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/4.5.JPG\" alt=\"image\"></p>\n<p>接下来是美丽的都江堰，本人比较喜欢这种山清水秀的地方</p>\n<p><img src=\"/2016/10/10/成都游记/5.1.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.2.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.3.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.4.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.5.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.6.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.7.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.8.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.9.JPG\" alt=\"image\"><br><img src=\"/2016/10/10/成都游记/5.10.JPG\" alt=\"image\"></p>\n<p>看了这些照片，是不是有点想去呢，😝</p>\n<p>假期结束了，开始上班吧，😒</p>\n<p>此文同时收录于我的公众号（小乱谈），<a href=\"https://mp.weixin.qq.com/s?__biz=MzI2NTQ4MTkwNg==&amp;mid=2247483777&amp;idx=1&amp;sn=67a4fa65e9f1b0a032452ac329d604d9&amp;chksm=ea9dfa5cddea734ac9727d182a3970b3230f0ffe151bb2c99720f92ec60f85c4e2abd20f1045#rd\">成都游记</a></p>"},{"title":"港珠澳之行","date":"2017-06-05T06:59:00.000Z","_content":"\n趁着端午节假期，再请3天假，凑得了8日连休，南下去了一趟香港，澳门，其实这趟主要是去中山探望友人，顺道去香港和澳门玩了一圈，别人去广东都是去找好吃的，但是我们这趟没怎么吃好东西，看来我不属于吃货，都不会找好吃的，但是玩的还不错，这也是迄今为止我走的最远最南的地方了！\n\n<!--more-->\n\n首先我们坐了晚上的动车去了广州，一下火车就感觉到了扑面而来的热浪，虽然才5月底，趁着早上还不是很热，我们先随便吃了点早茶后，就去了圣心大教堂，去了之后发现真是没白来，教堂里正在进行早上的祷告，没法拍照，但是跟港剧里演的真的一样，很神圣庄严的地方，只拍了外面，真的很漂亮！\n\n![image](港珠澳之行/1.1.JPG)\n![image](港珠澳之行/1.2.JPG)\n![image](港珠澳之行/1.3.JPG)\n\n接着我们乘坐公交车去找沙面公园，跟北京比，广州的街道真的是很窄，一路穿梭来到了沙面公园，沙面是以前的租界，现在也是什么侨办、海关、使馆的所在地，建筑风格都是以前租界区的风格，都是小洋楼。园中绿树婆娑，秀色满目，毗邻神奇美丽的白鹅潭，视野极为开阔。\n\n![image](港珠澳之行/2.1.JPG)\n![image](港珠澳之行/2.2.JPG)\n![image](港珠澳之行/2.3.JPG)\n![image](港珠澳之行/2.4.JPG)\n\n可能因为沙面原来是租界吧所以教堂比较多，这是其中之一。\n\n![image](港珠澳之行/2.5.JPG)\n\n离开了沙面，骑小黄前往上下九步行街，现在有了共享单车，出行真的是更加方便了。由于地处广州荔湾区的上九路、下九路、第十甫路之间，所以得名上下九。上下九步行街是个商业街区，但中西合璧的风格，以及岭南文化的体现，营造出亮丽的旅游风景线。\n\n![image](港珠澳之行/3.1.JPG)\n![image](港珠澳之行/3.2.JPG)\n\n下午乘坐城际列车来到了中山，探望朋友，不得不说广州这边的城际线路真是发达，链接了广州周边各地区，很是方便，这是我们住在友人家楼旁的楼顶花园，这个花园建在了3楼顶，下面是商业铺面，上面是花园。\n\n![image](港珠澳之行/4.JPG)\n\n在中山逗留了两天之后，我们一起来到了珠海的长隆海洋王国玩了一整天，各种表演，各种海洋动物，以及水上活动设施，还有晚上的花车表演，烟花表演，唯一的遗憾是没有胆量玩过山车[囧]。\n\n![image](港珠澳之行/5.1.JPG)\n![image](港珠澳之行/5.2.JPG)\n![image](港珠澳之行/5.3.JPG)\n![image](港珠澳之行/5.4.JPG)\n![image](港珠澳之行/5.5.JPG)\n![image](港珠澳之行/5.6.JPG)\n![image](港珠澳之行/5.7.JPG)\n\n珠海渔女石像\n\n![image](港珠澳之行/6.1.JPG)\n![image](港珠澳之行/6.2.JPG)\n\n","source":"_posts/港珠澳之行.md","raw":"---\ntitle: 港珠澳之行\ndate: 2017-06-05 14:59:00\ncategories:\n- 游记\ntags:\n- 珠海\n- 长隆\n- 香港\n- 澳门\n---\n\n趁着端午节假期，再请3天假，凑得了8日连休，南下去了一趟香港，澳门，其实这趟主要是去中山探望友人，顺道去香港和澳门玩了一圈，别人去广东都是去找好吃的，但是我们这趟没怎么吃好东西，看来我不属于吃货，都不会找好吃的，但是玩的还不错，这也是迄今为止我走的最远最南的地方了！\n\n<!--more-->\n\n首先我们坐了晚上的动车去了广州，一下火车就感觉到了扑面而来的热浪，虽然才5月底，趁着早上还不是很热，我们先随便吃了点早茶后，就去了圣心大教堂，去了之后发现真是没白来，教堂里正在进行早上的祷告，没法拍照，但是跟港剧里演的真的一样，很神圣庄严的地方，只拍了外面，真的很漂亮！\n\n![image](港珠澳之行/1.1.JPG)\n![image](港珠澳之行/1.2.JPG)\n![image](港珠澳之行/1.3.JPG)\n\n接着我们乘坐公交车去找沙面公园，跟北京比，广州的街道真的是很窄，一路穿梭来到了沙面公园，沙面是以前的租界，现在也是什么侨办、海关、使馆的所在地，建筑风格都是以前租界区的风格，都是小洋楼。园中绿树婆娑，秀色满目，毗邻神奇美丽的白鹅潭，视野极为开阔。\n\n![image](港珠澳之行/2.1.JPG)\n![image](港珠澳之行/2.2.JPG)\n![image](港珠澳之行/2.3.JPG)\n![image](港珠澳之行/2.4.JPG)\n\n可能因为沙面原来是租界吧所以教堂比较多，这是其中之一。\n\n![image](港珠澳之行/2.5.JPG)\n\n离开了沙面，骑小黄前往上下九步行街，现在有了共享单车，出行真的是更加方便了。由于地处广州荔湾区的上九路、下九路、第十甫路之间，所以得名上下九。上下九步行街是个商业街区，但中西合璧的风格，以及岭南文化的体现，营造出亮丽的旅游风景线。\n\n![image](港珠澳之行/3.1.JPG)\n![image](港珠澳之行/3.2.JPG)\n\n下午乘坐城际列车来到了中山，探望朋友，不得不说广州这边的城际线路真是发达，链接了广州周边各地区，很是方便，这是我们住在友人家楼旁的楼顶花园，这个花园建在了3楼顶，下面是商业铺面，上面是花园。\n\n![image](港珠澳之行/4.JPG)\n\n在中山逗留了两天之后，我们一起来到了珠海的长隆海洋王国玩了一整天，各种表演，各种海洋动物，以及水上活动设施，还有晚上的花车表演，烟花表演，唯一的遗憾是没有胆量玩过山车[囧]。\n\n![image](港珠澳之行/5.1.JPG)\n![image](港珠澳之行/5.2.JPG)\n![image](港珠澳之行/5.3.JPG)\n![image](港珠澳之行/5.4.JPG)\n![image](港珠澳之行/5.5.JPG)\n![image](港珠澳之行/5.6.JPG)\n![image](港珠澳之行/5.7.JPG)\n\n珠海渔女石像\n\n![image](港珠澳之行/6.1.JPG)\n![image](港珠澳之行/6.2.JPG)\n\n","slug":"港珠澳之行","published":1,"updated":"2017-10-28T03:38:23.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9aztbpq0013xox0oihtz37z","content":"<p>趁着端午节假期，再请3天假，凑得了8日连休，南下去了一趟香港，澳门，其实这趟主要是去中山探望友人，顺道去香港和澳门玩了一圈，别人去广东都是去找好吃的，但是我们这趟没怎么吃好东西，看来我不属于吃货，都不会找好吃的，但是玩的还不错，这也是迄今为止我走的最远最南的地方了！</p>\n<a id=\"more\"></a>\n<p>首先我们坐了晚上的动车去了广州，一下火车就感觉到了扑面而来的热浪，虽然才5月底，趁着早上还不是很热，我们先随便吃了点早茶后，就去了圣心大教堂，去了之后发现真是没白来，教堂里正在进行早上的祷告，没法拍照，但是跟港剧里演的真的一样，很神圣庄严的地方，只拍了外面，真的很漂亮！</p>\n<p><img src=\"/2017/06/05/港珠澳之行/1.1.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/1.2.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/1.3.JPG\" alt=\"image\"></p>\n<p>接着我们乘坐公交车去找沙面公园，跟北京比，广州的街道真的是很窄，一路穿梭来到了沙面公园，沙面是以前的租界，现在也是什么侨办、海关、使馆的所在地，建筑风格都是以前租界区的风格，都是小洋楼。园中绿树婆娑，秀色满目，毗邻神奇美丽的白鹅潭，视野极为开阔。</p>\n<p><img src=\"/2017/06/05/港珠澳之行/2.1.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/2.2.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/2.3.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/2.4.JPG\" alt=\"image\"></p>\n<p>可能因为沙面原来是租界吧所以教堂比较多，这是其中之一。</p>\n<p><img src=\"/2017/06/05/港珠澳之行/2.5.JPG\" alt=\"image\"></p>\n<p>离开了沙面，骑小黄前往上下九步行街，现在有了共享单车，出行真的是更加方便了。由于地处广州荔湾区的上九路、下九路、第十甫路之间，所以得名上下九。上下九步行街是个商业街区，但中西合璧的风格，以及岭南文化的体现，营造出亮丽的旅游风景线。</p>\n<p><img src=\"/2017/06/05/港珠澳之行/3.1.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/3.2.JPG\" alt=\"image\"></p>\n<p>下午乘坐城际列车来到了中山，探望朋友，不得不说广州这边的城际线路真是发达，链接了广州周边各地区，很是方便，这是我们住在友人家楼旁的楼顶花园，这个花园建在了3楼顶，下面是商业铺面，上面是花园。</p>\n<p><img src=\"/2017/06/05/港珠澳之行/4.JPG\" alt=\"image\"></p>\n<p>在中山逗留了两天之后，我们一起来到了珠海的长隆海洋王国玩了一整天，各种表演，各种海洋动物，以及水上活动设施，还有晚上的花车表演，烟花表演，唯一的遗憾是没有胆量玩过山车[囧]。</p>\n<p><img src=\"/2017/06/05/港珠澳之行/5.1.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/5.2.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/5.3.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/5.4.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/5.5.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/5.6.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/5.7.JPG\" alt=\"image\"></p>\n<p>珠海渔女石像</p>\n<p><img src=\"/2017/06/05/港珠澳之行/6.1.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/6.2.JPG\" alt=\"image\"></p>\n","excerpt":"<p>趁着端午节假期，再请3天假，凑得了8日连休，南下去了一趟香港，澳门，其实这趟主要是去中山探望友人，顺道去香港和澳门玩了一圈，别人去广东都是去找好吃的，但是我们这趟没怎么吃好东西，看来我不属于吃货，都不会找好吃的，但是玩的还不错，这也是迄今为止我走的最远最南的地方了！</p>","more":"<p>首先我们坐了晚上的动车去了广州，一下火车就感觉到了扑面而来的热浪，虽然才5月底，趁着早上还不是很热，我们先随便吃了点早茶后，就去了圣心大教堂，去了之后发现真是没白来，教堂里正在进行早上的祷告，没法拍照，但是跟港剧里演的真的一样，很神圣庄严的地方，只拍了外面，真的很漂亮！</p>\n<p><img src=\"/2017/06/05/港珠澳之行/1.1.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/1.2.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/1.3.JPG\" alt=\"image\"></p>\n<p>接着我们乘坐公交车去找沙面公园，跟北京比，广州的街道真的是很窄，一路穿梭来到了沙面公园，沙面是以前的租界，现在也是什么侨办、海关、使馆的所在地，建筑风格都是以前租界区的风格，都是小洋楼。园中绿树婆娑，秀色满目，毗邻神奇美丽的白鹅潭，视野极为开阔。</p>\n<p><img src=\"/2017/06/05/港珠澳之行/2.1.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/2.2.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/2.3.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/2.4.JPG\" alt=\"image\"></p>\n<p>可能因为沙面原来是租界吧所以教堂比较多，这是其中之一。</p>\n<p><img src=\"/2017/06/05/港珠澳之行/2.5.JPG\" alt=\"image\"></p>\n<p>离开了沙面，骑小黄前往上下九步行街，现在有了共享单车，出行真的是更加方便了。由于地处广州荔湾区的上九路、下九路、第十甫路之间，所以得名上下九。上下九步行街是个商业街区，但中西合璧的风格，以及岭南文化的体现，营造出亮丽的旅游风景线。</p>\n<p><img src=\"/2017/06/05/港珠澳之行/3.1.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/3.2.JPG\" alt=\"image\"></p>\n<p>下午乘坐城际列车来到了中山，探望朋友，不得不说广州这边的城际线路真是发达，链接了广州周边各地区，很是方便，这是我们住在友人家楼旁的楼顶花园，这个花园建在了3楼顶，下面是商业铺面，上面是花园。</p>\n<p><img src=\"/2017/06/05/港珠澳之行/4.JPG\" alt=\"image\"></p>\n<p>在中山逗留了两天之后，我们一起来到了珠海的长隆海洋王国玩了一整天，各种表演，各种海洋动物，以及水上活动设施，还有晚上的花车表演，烟花表演，唯一的遗憾是没有胆量玩过山车[囧]。</p>\n<p><img src=\"/2017/06/05/港珠澳之行/5.1.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/5.2.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/5.3.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/5.4.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/5.5.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/5.6.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/5.7.JPG\" alt=\"image\"></p>\n<p>珠海渔女石像</p>\n<p><img src=\"/2017/06/05/港珠澳之行/6.1.JPG\" alt=\"image\"><br><img src=\"/2017/06/05/港珠澳之行/6.2.JPG\" alt=\"image\"></p>"},{"title":"首尔之行","date":"2016-09-28T13:53:19.000Z","_content":"\n首尔是个极具小清新的城市，干净的大街上各色店铺、餐馆都色彩缤纷，极具特色与少女心，无意间闯进的街道，转角遇见的花店都让人想要驻足，送你一颗少女心，圆你一场甜美梦。\n\n<!--more-->\n\n这是酒店后面的街道，早上起来溜达，吃点东西，街道两边的店面装饰的都五颜六色的很好看。\n\n![image](首尔之行/1.1.JPG)\n![image](首尔之行/1.2.JPG)\n\n免税店里面都是中国人，就跟不要钱一样排着队抢着买东西，然后去了南山公园和首尔塔，南山公园有个很著名的地方——爱情锁。\n\n![image](首尔之行/2.JPG)\n![image](首尔之行/3.1.JPG)\n![image](首尔之行/3.2.JPG)\n\n在这里买了个韩剧里面经常出现的冰激凌吃，插得那两根甜的中间夹杂着点十三香的味道，不过还挺好吃的。\n\n![image](首尔之行/4.JPG)\n\n这是韩国的天安门故宫——光华门和景福宫。里面很大但是都是新建的没有什么意思。\n\n![image](首尔之行/5.1.JPG)\n![image](首尔之行/5.2.JPG)\n![image](首尔之行/5.3.JPG)\n![image](首尔之行/5.4.JPG)\n![image](首尔之行/5.5.JPG)\n\n这是首尔的天安门广场吧，来的时候正好是韩国的韩服节，大很多本地人穿着韩服来广场上体验传统韩国文化，广场上的世宗大王像，世宗大王是发明韩国文字的一个皇帝。\n\n![image](首尔之行/6.JPG)\n\n接着去了梨花女子大学，这里的美女真的是多啊，不过没好意思拍照，嘻嘻。\n\n然后是韩屋村，有点像鼓楼大街那样的胡同院子一样，是韩国特色的古代房屋建筑，朝鲜时代的两班居住的区域，现在也还有人在住。街道仍然很干净漂亮。\n\n![image](首尔之行/7.1.JPG)\n![image](首尔之行/7.2.JPG)\n![image](首尔之行/7.3.JPG)\n\n美食来了，正宗的冷面，大酱汤，拌饭，烤韩牛，参鸡汤\n\n![image](首尔之行/8.1.JPG)\n![image](首尔之行/8.2.JPG)\n![image](首尔之行/8.3.JPG)\n![image](首尔之行/8.4.JPG)\n![image](首尔之行/8.5.JPG)\n![image](首尔之行/8.6.JPG)\n\n作为一个资深的追星族，来到韩国当然少不了的是追韩星喽，这是一条韩流明星街，街道上有一个挨一个的明星团体应援吉祥物。\n\n![image](首尔之行/9.1.JPG)\n![image](首尔之行/9.2.JPG)\n![image](首尔之行/9.3.JPG)\n![image](首尔之行/9.4.JPG)\n![image](首尔之行/9.5.JPG)\n![image](首尔之行/9.6.JPG)\n![image](首尔之行/9.7.JPG)\n![image](首尔之行/9.8.JPG)\n\n明星手印\n\n![image](首尔之行/10.1.JPG)\n![image](首尔之行/10.1.JPG)\n\n这是在江南，首尔的富人区，果然是有钱呢，商店都是奢侈品，连地铁站都这么豪华呢。\n\n![image](首尔之行/11.JPG)\n\n韩国的炸鸡啤酒，啤酒兑着烧酒，哇好好喝\n\n![image](首尔之行/12.JPG)\n\n明洞，逛街吃小吃的地方\n\n![image](首尔之行/13.JPG)\n\n明洞的 711 便利店都这么大\n\n![image](首尔之行/14.JPG)\n\n这是一家书店，很大，环境也很好\n\n![image](首尔之行/15.JPG)\n\n壁画村，真的美极了\n\n![image](首尔之行/16.1.JPG)\n![image](首尔之行/16.2.JPG)\n![image](首尔之行/16.3.JPG)\n\n回来的飞机上拍的，飞上云霄\n\n![image](首尔之行/17.1.JPG)\n![image](首尔之行/17.2.JPG)\n![image](首尔之行/17.3.JPG)\n\n作为一个看了韩剧N年的人来说，这一趟首尔之行圆了对韩国和韩式生活得好奇心，多年来看韩剧学的韩语也派上了用场，^-^.\n\n此文同时收录于我的公众号（小乱谈），[首尔之行](https://mp.weixin.qq.com/s?__biz=MzI2NTQ4MTkwNg==&mid=2247483713&idx=1&sn=361d40c9ddab773f0d28bd9666cc53f9&chksm=ea9dfa9cddea738ab312fee545f55a54ae4d15c25c3d25193a25bc80d969b0218560b30947a2#rd)\n\n\n","source":"_posts/首尔之行.md","raw":"---\ntitle: 首尔之行\ndate: 2016-09-28 21:53:19\ncategories:\n- 游记\ntags:\n- 首尔\n---\n\n首尔是个极具小清新的城市，干净的大街上各色店铺、餐馆都色彩缤纷，极具特色与少女心，无意间闯进的街道，转角遇见的花店都让人想要驻足，送你一颗少女心，圆你一场甜美梦。\n\n<!--more-->\n\n这是酒店后面的街道，早上起来溜达，吃点东西，街道两边的店面装饰的都五颜六色的很好看。\n\n![image](首尔之行/1.1.JPG)\n![image](首尔之行/1.2.JPG)\n\n免税店里面都是中国人，就跟不要钱一样排着队抢着买东西，然后去了南山公园和首尔塔，南山公园有个很著名的地方——爱情锁。\n\n![image](首尔之行/2.JPG)\n![image](首尔之行/3.1.JPG)\n![image](首尔之行/3.2.JPG)\n\n在这里买了个韩剧里面经常出现的冰激凌吃，插得那两根甜的中间夹杂着点十三香的味道，不过还挺好吃的。\n\n![image](首尔之行/4.JPG)\n\n这是韩国的天安门故宫——光华门和景福宫。里面很大但是都是新建的没有什么意思。\n\n![image](首尔之行/5.1.JPG)\n![image](首尔之行/5.2.JPG)\n![image](首尔之行/5.3.JPG)\n![image](首尔之行/5.4.JPG)\n![image](首尔之行/5.5.JPG)\n\n这是首尔的天安门广场吧，来的时候正好是韩国的韩服节，大很多本地人穿着韩服来广场上体验传统韩国文化，广场上的世宗大王像，世宗大王是发明韩国文字的一个皇帝。\n\n![image](首尔之行/6.JPG)\n\n接着去了梨花女子大学，这里的美女真的是多啊，不过没好意思拍照，嘻嘻。\n\n然后是韩屋村，有点像鼓楼大街那样的胡同院子一样，是韩国特色的古代房屋建筑，朝鲜时代的两班居住的区域，现在也还有人在住。街道仍然很干净漂亮。\n\n![image](首尔之行/7.1.JPG)\n![image](首尔之行/7.2.JPG)\n![image](首尔之行/7.3.JPG)\n\n美食来了，正宗的冷面，大酱汤，拌饭，烤韩牛，参鸡汤\n\n![image](首尔之行/8.1.JPG)\n![image](首尔之行/8.2.JPG)\n![image](首尔之行/8.3.JPG)\n![image](首尔之行/8.4.JPG)\n![image](首尔之行/8.5.JPG)\n![image](首尔之行/8.6.JPG)\n\n作为一个资深的追星族，来到韩国当然少不了的是追韩星喽，这是一条韩流明星街，街道上有一个挨一个的明星团体应援吉祥物。\n\n![image](首尔之行/9.1.JPG)\n![image](首尔之行/9.2.JPG)\n![image](首尔之行/9.3.JPG)\n![image](首尔之行/9.4.JPG)\n![image](首尔之行/9.5.JPG)\n![image](首尔之行/9.6.JPG)\n![image](首尔之行/9.7.JPG)\n![image](首尔之行/9.8.JPG)\n\n明星手印\n\n![image](首尔之行/10.1.JPG)\n![image](首尔之行/10.1.JPG)\n\n这是在江南，首尔的富人区，果然是有钱呢，商店都是奢侈品，连地铁站都这么豪华呢。\n\n![image](首尔之行/11.JPG)\n\n韩国的炸鸡啤酒，啤酒兑着烧酒，哇好好喝\n\n![image](首尔之行/12.JPG)\n\n明洞，逛街吃小吃的地方\n\n![image](首尔之行/13.JPG)\n\n明洞的 711 便利店都这么大\n\n![image](首尔之行/14.JPG)\n\n这是一家书店，很大，环境也很好\n\n![image](首尔之行/15.JPG)\n\n壁画村，真的美极了\n\n![image](首尔之行/16.1.JPG)\n![image](首尔之行/16.2.JPG)\n![image](首尔之行/16.3.JPG)\n\n回来的飞机上拍的，飞上云霄\n\n![image](首尔之行/17.1.JPG)\n![image](首尔之行/17.2.JPG)\n![image](首尔之行/17.3.JPG)\n\n作为一个看了韩剧N年的人来说，这一趟首尔之行圆了对韩国和韩式生活得好奇心，多年来看韩剧学的韩语也派上了用场，^-^.\n\n此文同时收录于我的公众号（小乱谈），[首尔之行](https://mp.weixin.qq.com/s?__biz=MzI2NTQ4MTkwNg==&mid=2247483713&idx=1&sn=361d40c9ddab773f0d28bd9666cc53f9&chksm=ea9dfa9cddea738ab312fee545f55a54ae4d15c25c3d25193a25bc80d969b0218560b30947a2#rd)\n\n\n","slug":"首尔之行","published":1,"updated":"2017-10-28T03:38:23.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9aztbpr0018xox0b81hvoe0","content":"<p>首尔是个极具小清新的城市，干净的大街上各色店铺、餐馆都色彩缤纷，极具特色与少女心，无意间闯进的街道，转角遇见的花店都让人想要驻足，送你一颗少女心，圆你一场甜美梦。</p>\n<a id=\"more\"></a>\n<p>这是酒店后面的街道，早上起来溜达，吃点东西，街道两边的店面装饰的都五颜六色的很好看。</p>\n<p><img src=\"/2016/09/28/首尔之行/1.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/1.2.JPG\" alt=\"image\"></p>\n<p>免税店里面都是中国人，就跟不要钱一样排着队抢着买东西，然后去了南山公园和首尔塔，南山公园有个很著名的地方——爱情锁。</p>\n<p><img src=\"/2016/09/28/首尔之行/2.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/3.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/3.2.JPG\" alt=\"image\"></p>\n<p>在这里买了个韩剧里面经常出现的冰激凌吃，插得那两根甜的中间夹杂着点十三香的味道，不过还挺好吃的。</p>\n<p><img src=\"/2016/09/28/首尔之行/4.JPG\" alt=\"image\"></p>\n<p>这是韩国的天安门故宫——光华门和景福宫。里面很大但是都是新建的没有什么意思。</p>\n<p><img src=\"/2016/09/28/首尔之行/5.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/5.2.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/5.3.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/5.4.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/5.5.JPG\" alt=\"image\"></p>\n<p>这是首尔的天安门广场吧，来的时候正好是韩国的韩服节，大很多本地人穿着韩服来广场上体验传统韩国文化，广场上的世宗大王像，世宗大王是发明韩国文字的一个皇帝。</p>\n<p><img src=\"/2016/09/28/首尔之行/6.JPG\" alt=\"image\"></p>\n<p>接着去了梨花女子大学，这里的美女真的是多啊，不过没好意思拍照，嘻嘻。</p>\n<p>然后是韩屋村，有点像鼓楼大街那样的胡同院子一样，是韩国特色的古代房屋建筑，朝鲜时代的两班居住的区域，现在也还有人在住。街道仍然很干净漂亮。</p>\n<p><img src=\"/2016/09/28/首尔之行/7.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/7.2.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/7.3.JPG\" alt=\"image\"></p>\n<p>美食来了，正宗的冷面，大酱汤，拌饭，烤韩牛，参鸡汤</p>\n<p><img src=\"/2016/09/28/首尔之行/8.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/8.2.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/8.3.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/8.4.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/8.5.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/8.6.JPG\" alt=\"image\"></p>\n<p>作为一个资深的追星族，来到韩国当然少不了的是追韩星喽，这是一条韩流明星街，街道上有一个挨一个的明星团体应援吉祥物。</p>\n<p><img src=\"/2016/09/28/首尔之行/9.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/9.2.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/9.3.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/9.4.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/9.5.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/9.6.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/9.7.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/9.8.JPG\" alt=\"image\"></p>\n<p>明星手印</p>\n<p><img src=\"/2016/09/28/首尔之行/10.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/10.1.JPG\" alt=\"image\"></p>\n<p>这是在江南，首尔的富人区，果然是有钱呢，商店都是奢侈品，连地铁站都这么豪华呢。</p>\n<p><img src=\"/2016/09/28/首尔之行/11.JPG\" alt=\"image\"></p>\n<p>韩国的炸鸡啤酒，啤酒兑着烧酒，哇好好喝</p>\n<p><img src=\"/2016/09/28/首尔之行/12.JPG\" alt=\"image\"></p>\n<p>明洞，逛街吃小吃的地方</p>\n<p><img src=\"/2016/09/28/首尔之行/13.JPG\" alt=\"image\"></p>\n<p>明洞的 711 便利店都这么大</p>\n<p><img src=\"/2016/09/28/首尔之行/14.JPG\" alt=\"image\"></p>\n<p>这是一家书店，很大，环境也很好</p>\n<p><img src=\"/2016/09/28/首尔之行/15.JPG\" alt=\"image\"></p>\n<p>壁画村，真的美极了</p>\n<p><img src=\"/2016/09/28/首尔之行/16.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/16.2.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/16.3.JPG\" alt=\"image\"></p>\n<p>回来的飞机上拍的，飞上云霄</p>\n<p><img src=\"/2016/09/28/首尔之行/17.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/17.2.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/17.3.JPG\" alt=\"image\"></p>\n<p>作为一个看了韩剧N年的人来说，这一趟首尔之行圆了对韩国和韩式生活得好奇心，多年来看韩剧学的韩语也派上了用场，^-^.</p>\n<p>此文同时收录于我的公众号（小乱谈），<a href=\"https://mp.weixin.qq.com/s?__biz=MzI2NTQ4MTkwNg==&amp;mid=2247483713&amp;idx=1&amp;sn=361d40c9ddab773f0d28bd9666cc53f9&amp;chksm=ea9dfa9cddea738ab312fee545f55a54ae4d15c25c3d25193a25bc80d969b0218560b30947a2#rd\" target=\"_blank\" rel=\"external\">首尔之行</a></p>\n","excerpt":"<p>首尔是个极具小清新的城市，干净的大街上各色店铺、餐馆都色彩缤纷，极具特色与少女心，无意间闯进的街道，转角遇见的花店都让人想要驻足，送你一颗少女心，圆你一场甜美梦。</p>","more":"<p>这是酒店后面的街道，早上起来溜达，吃点东西，街道两边的店面装饰的都五颜六色的很好看。</p>\n<p><img src=\"/2016/09/28/首尔之行/1.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/1.2.JPG\" alt=\"image\"></p>\n<p>免税店里面都是中国人，就跟不要钱一样排着队抢着买东西，然后去了南山公园和首尔塔，南山公园有个很著名的地方——爱情锁。</p>\n<p><img src=\"/2016/09/28/首尔之行/2.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/3.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/3.2.JPG\" alt=\"image\"></p>\n<p>在这里买了个韩剧里面经常出现的冰激凌吃，插得那两根甜的中间夹杂着点十三香的味道，不过还挺好吃的。</p>\n<p><img src=\"/2016/09/28/首尔之行/4.JPG\" alt=\"image\"></p>\n<p>这是韩国的天安门故宫——光华门和景福宫。里面很大但是都是新建的没有什么意思。</p>\n<p><img src=\"/2016/09/28/首尔之行/5.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/5.2.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/5.3.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/5.4.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/5.5.JPG\" alt=\"image\"></p>\n<p>这是首尔的天安门广场吧，来的时候正好是韩国的韩服节，大很多本地人穿着韩服来广场上体验传统韩国文化，广场上的世宗大王像，世宗大王是发明韩国文字的一个皇帝。</p>\n<p><img src=\"/2016/09/28/首尔之行/6.JPG\" alt=\"image\"></p>\n<p>接着去了梨花女子大学，这里的美女真的是多啊，不过没好意思拍照，嘻嘻。</p>\n<p>然后是韩屋村，有点像鼓楼大街那样的胡同院子一样，是韩国特色的古代房屋建筑，朝鲜时代的两班居住的区域，现在也还有人在住。街道仍然很干净漂亮。</p>\n<p><img src=\"/2016/09/28/首尔之行/7.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/7.2.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/7.3.JPG\" alt=\"image\"></p>\n<p>美食来了，正宗的冷面，大酱汤，拌饭，烤韩牛，参鸡汤</p>\n<p><img src=\"/2016/09/28/首尔之行/8.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/8.2.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/8.3.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/8.4.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/8.5.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/8.6.JPG\" alt=\"image\"></p>\n<p>作为一个资深的追星族，来到韩国当然少不了的是追韩星喽，这是一条韩流明星街，街道上有一个挨一个的明星团体应援吉祥物。</p>\n<p><img src=\"/2016/09/28/首尔之行/9.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/9.2.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/9.3.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/9.4.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/9.5.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/9.6.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/9.7.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/9.8.JPG\" alt=\"image\"></p>\n<p>明星手印</p>\n<p><img src=\"/2016/09/28/首尔之行/10.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/10.1.JPG\" alt=\"image\"></p>\n<p>这是在江南，首尔的富人区，果然是有钱呢，商店都是奢侈品，连地铁站都这么豪华呢。</p>\n<p><img src=\"/2016/09/28/首尔之行/11.JPG\" alt=\"image\"></p>\n<p>韩国的炸鸡啤酒，啤酒兑着烧酒，哇好好喝</p>\n<p><img src=\"/2016/09/28/首尔之行/12.JPG\" alt=\"image\"></p>\n<p>明洞，逛街吃小吃的地方</p>\n<p><img src=\"/2016/09/28/首尔之行/13.JPG\" alt=\"image\"></p>\n<p>明洞的 711 便利店都这么大</p>\n<p><img src=\"/2016/09/28/首尔之行/14.JPG\" alt=\"image\"></p>\n<p>这是一家书店，很大，环境也很好</p>\n<p><img src=\"/2016/09/28/首尔之行/15.JPG\" alt=\"image\"></p>\n<p>壁画村，真的美极了</p>\n<p><img src=\"/2016/09/28/首尔之行/16.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/16.2.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/16.3.JPG\" alt=\"image\"></p>\n<p>回来的飞机上拍的，飞上云霄</p>\n<p><img src=\"/2016/09/28/首尔之行/17.1.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/17.2.JPG\" alt=\"image\"><br><img src=\"/2016/09/28/首尔之行/17.3.JPG\" alt=\"image\"></p>\n<p>作为一个看了韩剧N年的人来说，这一趟首尔之行圆了对韩国和韩式生活得好奇心，多年来看韩剧学的韩语也派上了用场，^-^.</p>\n<p>此文同时收录于我的公众号（小乱谈），<a href=\"https://mp.weixin.qq.com/s?__biz=MzI2NTQ4MTkwNg==&amp;mid=2247483713&amp;idx=1&amp;sn=361d40c9ddab773f0d28bd9666cc53f9&amp;chksm=ea9dfa9cddea738ab312fee545f55a54ae4d15c25c3d25193a25bc80d969b0218560b30947a2#rd\">首尔之行</a></p>"}],"PostAsset":[{"_id":"source/_posts/港珠澳之行/1.2.JPG","slug":"1.2.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/1.3.JPG","slug":"1.3.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/2.5.JPG","slug":"2.5.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/3.2.JPG","slug":"3.2.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/13.jpg","slug":"13.jpg","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/16.3.jpg","slug":"16.3.jpg","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/5.2.JPG","slug":"5.2.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/16.1.jpg","slug":"16.1.jpg","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/7.1.JPG","slug":"7.1.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/2.2.JPG","slug":"2.2.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/ReactNative入门（1）/component-lifecycle.jpg","post":"cj9aztbp20009xox07fhs9emr","slug":"component-lifecycle.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Mac使用oh-my-zsh和iTerm2/iterm2.png","post":"cj9aztbp00007xox0pk5y682z","slug":"iterm2.png","modified":1,"renderable":1},{"_id":"source/_posts/Mac使用oh-my-zsh和iTerm2/oh-my-zsh.png","post":"cj9aztbp00007xox0pk5y682z","slug":"oh-my-zsh.png","modified":1,"renderable":1},{"_id":"source/_posts/fastlane+jenkins实现iOS持续集成/fastlane-intro-tree.png","post":"cj9aztbpc000jxox0wtzgf0be","slug":"fastlane-intro-tree.png","modified":1,"renderable":1},{"_id":"source/_posts/fastlane+jenkins实现iOS持续集成/fastlane-logo.png","post":"cj9aztbpc000jxox0wtzgf0be","slug":"fastlane-logo.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS-AppIcon添加打包标识/buildPhases_Shell.png","post":"cj9aztbpf000pxox08kcf1vsn","slug":"buildPhases_Shell.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS-AppIcon添加打包标识/infoPlist_Icon1.png","post":"cj9aztbpf000pxox08kcf1vsn","slug":"infoPlist_Icon1.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS-AppIcon添加打包标识/infoPlist_Icon2.png","post":"cj9aztbpf000pxox08kcf1vsn","slug":"infoPlist_Icon2.png","modified":1,"renderable":1},{"_id":"source/_posts/首尔之行/5.3.JPG","slug":"5.3.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/5.4.JPG","slug":"5.4.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/1.1.JPG","slug":"1.1.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/2.1.JPG","slug":"2.1.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/2.3.JPG","slug":"2.3.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/2.4.JPG","slug":"2.4.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/3.1.JPG","slug":"3.1.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/4.JPG","slug":"4.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/5.1.JPG","slug":"5.1.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/5.2.JPG","slug":"5.2.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/5.3.JPG","slug":"5.3.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/5.4.JPG","slug":"5.4.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/5.5.JPG","slug":"5.5.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/5.6.JPG","slug":"5.6.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/5.7.JPG","slug":"5.7.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/6.1.JPG","slug":"6.1.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/港珠澳之行/6.2.JPG","slug":"6.2.JPG","post":"cj9aztbpq0013xox0oihtz37z","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/1.1.JPG","slug":"1.1.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/1.2.JPG","slug":"1.2.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/2.1.JPG","slug":"2.1.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/2.2.JPG","slug":"2.2.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/2.3.JPG","slug":"2.3.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/2.4.JPG","slug":"2.4.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/2.5.JPG","slug":"2.5.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/2.6.JPG","slug":"2.6.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/2.7.JPG","slug":"2.7.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/2.8.JPG","slug":"2.8.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/2.9.JPG","slug":"2.9.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/3.1.JPG","slug":"3.1.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/3.2.JPG","slug":"3.2.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/3.3.JPG","slug":"3.3.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/3.4.JPG","slug":"3.4.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/3.5.JPG","slug":"3.5.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/3.6.JPG","slug":"3.6.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/4.1.JPG","slug":"4.1.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/4.2.JPG","slug":"4.2.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/4.3.JPG","slug":"4.3.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/4.4.JPG","slug":"4.4.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/4.5.JPG","slug":"4.5.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/5.1.JPG","slug":"5.1.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/5.10.JPG","slug":"5.10.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/5.2.JPG","slug":"5.2.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/5.3.JPG","slug":"5.3.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/5.4.JPG","slug":"5.4.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/5.5.JPG","slug":"5.5.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/5.6.JPG","slug":"5.6.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/5.7.JPG","slug":"5.7.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/5.8.JPG","slug":"5.8.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/成都游记/5.9.JPG","slug":"5.9.JPG","post":"cj9aztbpo0010xox0qqzbum31","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/1.1.JPG","slug":"1.1.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/1.2.JPG","slug":"1.2.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/10.1.JPG","slug":"10.1.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/10.2.jpg","slug":"10.2.jpg","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/11.JPG","slug":"11.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/12.JPG","slug":"12.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/14.JPG","slug":"14.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/15.JPG","slug":"15.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/16.2.jpg","post":"cj9aztbpr0018xox0b81hvoe0","slug":"16.2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/首尔之行/17.1.JPG","slug":"17.1.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/17.2.JPG","slug":"17.2.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/17.3.JPG","slug":"17.3.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/2.JPG","post":"cj9aztbpr0018xox0b81hvoe0","slug":"2.JPG","modified":1,"renderable":1},{"_id":"source/_posts/首尔之行/3.1.jpg","post":"cj9aztbpr0018xox0b81hvoe0","slug":"3.1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/首尔之行/3.2.JPG","post":"cj9aztbpr0018xox0b81hvoe0","slug":"3.2.JPG","modified":1,"renderable":1},{"_id":"source/_posts/首尔之行/4.JPG","post":"cj9aztbpr0018xox0b81hvoe0","slug":"4.JPG","modified":1,"renderable":1},{"_id":"source/_posts/首尔之行/5.1.JPG","post":"cj9aztbpr0018xox0b81hvoe0","slug":"5.1.JPG","modified":1,"renderable":1},{"_id":"source/_posts/首尔之行/5.5.JPG","slug":"5.5.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/6.JPG","slug":"6.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/7.2.jpg","post":"cj9aztbpr0018xox0b81hvoe0","slug":"7.2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/首尔之行/7.3.jpg","post":"cj9aztbpr0018xox0b81hvoe0","slug":"7.3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/首尔之行/8.1.JPG","slug":"8.1.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/8.2.JPG","slug":"8.2.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/8.3.JPG","slug":"8.3.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/8.4.JPG","slug":"8.4.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/8.5.JPG","slug":"8.5.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/8.6.JPG","post":"cj9aztbpr0018xox0b81hvoe0","slug":"8.6.JPG","modified":1,"renderable":1},{"_id":"source/_posts/首尔之行/9.1.JPG","slug":"9.1.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/9.2.JPG","slug":"9.2.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/9.3.JPG","slug":"9.3.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/9.4.JPG","slug":"9.4.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/9.5.JPG","slug":"9.5.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0},{"_id":"source/_posts/首尔之行/9.6.JPG","post":"cj9aztbpr0018xox0b81hvoe0","slug":"9.6.JPG","modified":1,"renderable":1},{"_id":"source/_posts/首尔之行/9.7.JPG","post":"cj9aztbpr0018xox0b81hvoe0","slug":"9.7.JPG","modified":1,"renderable":1},{"_id":"source/_posts/首尔之行/9.8.JPG","slug":"9.8.JPG","post":"cj9aztbpr0018xox0b81hvoe0","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cj9aztbp20009xox07fhs9emr","category_id":"cj9aztboz0006xox0xmm72b9m","_id":"cj9aztbpc000ixox01vttpz6s"},{"post_id":"cj9aztbop0001xox0smld128m","category_id":"cj9aztboz0006xox0xmm72b9m","_id":"cj9aztbpd000mxox0aumuej4s"},{"post_id":"cj9aztbp5000cxox05qo0ll9v","category_id":"cj9aztboz0006xox0xmm72b9m","_id":"cj9aztbpf000oxox0ybmsxqia"},{"post_id":"cj9aztbou0003xox0aep7kolx","category_id":"cj9aztboz0006xox0xmm72b9m","_id":"cj9aztbpi000sxox00chtxc2j"},{"post_id":"cj9aztbpc000jxox0wtzgf0be","category_id":"cj9aztboz0006xox0xmm72b9m","_id":"cj9aztbpl000vxox0dsex5p46"},{"post_id":"cj9aztbpe000nxox00v2p8vvy","category_id":"cj9aztboz0006xox0xmm72b9m","_id":"cj9aztbpo000zxox04cg6zsx7"},{"post_id":"cj9aztbp00007xox0pk5y682z","category_id":"cj9aztboz0006xox0xmm72b9m","_id":"cj9aztbpp0012xox0amojhm2c"},{"post_id":"cj9aztbpf000pxox08kcf1vsn","category_id":"cj9aztboz0006xox0xmm72b9m","_id":"cj9aztbpr0017xox0hxv8q5uk"},{"post_id":"cj9aztbpj000txox0cqoebj7e","category_id":"cj9aztboz0006xox0xmm72b9m","_id":"cj9aztbpt001axox0pvu8vye4"},{"post_id":"cj9aztbpl000wxox09gbwyuop","category_id":"cj9aztboz0006xox0xmm72b9m","_id":"cj9aztbpv001cxox0x6eokvpw"},{"post_id":"cj9aztbpo0010xox0qqzbum31","category_id":"cj9aztbpr0016xox0pkm9gnwz","_id":"cj9aztbpx001fxox0n332px7k"},{"post_id":"cj9aztbpq0013xox0oihtz37z","category_id":"cj9aztbpr0016xox0pkm9gnwz","_id":"cj9aztbpy001kxox0wpzggxd1"},{"post_id":"cj9aztbpr0018xox0b81hvoe0","category_id":"cj9aztbpr0016xox0pkm9gnwz","_id":"cj9aztbpz001nxox098xh1d2o"}],"PostTag":[{"post_id":"cj9aztbop0001xox0smld128m","tag_id":"cj9aztbox0005xox0aaplhgpu","_id":"cj9aztbp8000fxox0ouyrsmf6"},{"post_id":"cj9aztbpe000nxox00v2p8vvy","tag_id":"cj9aztbpd000lxox0h8vu4dxt","_id":"cj9aztbph000rxox0av646tj5"},{"post_id":"cj9aztbou0003xox0aep7kolx","tag_id":"cj9aztbp4000bxox0xpyb4oxf","_id":"cj9aztbpk000uxox0gzwe9aj5"},{"post_id":"cj9aztbou0003xox0aep7kolx","tag_id":"cj9aztbpd000lxox0h8vu4dxt","_id":"cj9aztbpo000yxox0gy77088r"},{"post_id":"cj9aztbpf000pxox08kcf1vsn","tag_id":"cj9aztbpd000lxox0h8vu4dxt","_id":"cj9aztbpp0011xox02bfnhu8h"},{"post_id":"cj9aztbp00007xox0pk5y682z","tag_id":"cj9aztbox0005xox0aaplhgpu","_id":"cj9aztbpr0015xox0fq70wvw5"},{"post_id":"cj9aztbp20009xox07fhs9emr","tag_id":"cj9aztbp4000bxox0xpyb4oxf","_id":"cj9aztbps0019xox0vvccqz1i"},{"post_id":"cj9aztbp5000cxox05qo0ll9v","tag_id":"cj9aztbp4000bxox0xpyb4oxf","_id":"cj9aztbpx001hxox0pe92i3zb"},{"post_id":"cj9aztbp5000cxox05qo0ll9v","tag_id":"cj9aztbpd000lxox0h8vu4dxt","_id":"cj9aztbpx001ixox0og4bmjyf"},{"post_id":"cj9aztbp8000gxox09iyg2hfi","tag_id":"cj9aztbpw001exox0ez2hwq84","_id":"cj9aztbpy001lxox0dit88u80"},{"post_id":"cj9aztbpc000jxox0wtzgf0be","tag_id":"cj9aztbpd000lxox0h8vu4dxt","_id":"cj9aztbq0001qxox0jd12xtjq"},{"post_id":"cj9aztbpc000jxox0wtzgf0be","tag_id":"cj9aztbpz001mxox0v1p3f7jy","_id":"cj9aztbq1001rxox035ah9rzq"},{"post_id":"cj9aztbpc000jxox0wtzgf0be","tag_id":"cj9aztbq0001oxox0ph3v2ypo","_id":"cj9aztbq1001txox0sgy3lj4u"},{"post_id":"cj9aztbpj000txox0cqoebj7e","tag_id":"cj9aztbpd000lxox0h8vu4dxt","_id":"cj9aztbq1001uxox0b8x07rb5"},{"post_id":"cj9aztbpj000txox0cqoebj7e","tag_id":"cj9aztbq0001pxox02se6399y","_id":"cj9aztbq2001wxox0ve0zkb7r"},{"post_id":"cj9aztbpl000wxox09gbwyuop","tag_id":"cj9aztbq1001sxox0gslv8i5m","_id":"cj9aztbq2001xxox08lsk6fku"},{"post_id":"cj9aztbpo0010xox0qqzbum31","tag_id":"cj9aztbq2001vxox0vjmh9m2x","_id":"cj9aztbq30020xox0hqids0ds"},{"post_id":"cj9aztbpo0010xox0qqzbum31","tag_id":"cj9aztbq2001yxox0rnxphl1k","_id":"cj9aztbq30021xox0b02vwq9m"},{"post_id":"cj9aztbpq0013xox0oihtz37z","tag_id":"cj9aztbq3001zxox0p3lxhwvz","_id":"cj9aztbq50026xox0ewxrtsu3"},{"post_id":"cj9aztbpq0013xox0oihtz37z","tag_id":"cj9aztbq30022xox08s9elz54","_id":"cj9aztbq50027xox0nc65yzn3"},{"post_id":"cj9aztbpq0013xox0oihtz37z","tag_id":"cj9aztbq40023xox04lq1z7s0","_id":"cj9aztbq60028xox0zmy4jpbz"},{"post_id":"cj9aztbpq0013xox0oihtz37z","tag_id":"cj9aztbq40024xox040f2tffr","_id":"cj9aztbq60029xox06cwv0847"},{"post_id":"cj9aztbpr0018xox0b81hvoe0","tag_id":"cj9aztbq50025xox0b7gk8xy1","_id":"cj9aztbq6002axox0haaysuox"}],"Tag":[{"name":"Mac","_id":"cj9aztbox0005xox0aaplhgpu"},{"name":"React Native","_id":"cj9aztbp4000bxox0xpyb4oxf"},{"name":"iOS","_id":"cj9aztbpd000lxox0h8vu4dxt"},{"name":"Hexo","_id":"cj9aztbpw001exox0ez2hwq84"},{"name":"fastlane","_id":"cj9aztbpz001mxox0v1p3f7jy"},{"name":"jenkins","_id":"cj9aztbq0001oxox0ph3v2ypo"},{"name":"CocoaPods","_id":"cj9aztbq0001pxox02se6399y"},{"name":"算法","_id":"cj9aztbq1001sxox0gslv8i5m"},{"name":"成都","_id":"cj9aztbq2001vxox0vjmh9m2x"},{"name":"都江堰","_id":"cj9aztbq2001yxox0rnxphl1k"},{"name":"珠海","_id":"cj9aztbq3001zxox0p3lxhwvz"},{"name":"长隆","_id":"cj9aztbq30022xox08s9elz54"},{"name":"香港","_id":"cj9aztbq40023xox04lq1z7s0"},{"name":"澳门","_id":"cj9aztbq40024xox040f2tffr"},{"name":"首尔","_id":"cj9aztbq50025xox0b7gk8xy1"}]}}